
Prestudy motor control pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800768c  0800768c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800768c  0800768c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800768c  0800768c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000014  080076a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080076a8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001495d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002825  00000000  00000000  000349a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  00038610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce09  00000000  00000000  00039940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bd9  00000000  00000000  00056749  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad819  00000000  00000000  00067322  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00114bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007638 	.word	0x08007638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007638 	.word	0x08007638

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <getInputVoltage>:
	//HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
}
*/

float getInputVoltage()
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
	uint32_t temp = adcBuffer[0];
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <getInputVoltage+0x70>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	60fb      	str	r3, [r7, #12]
	uint32_t shuntVoltage = (801 * temp);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f240 3221 	movw	r2, #801	; 0x321
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	60bb      	str	r3, [r7, #8]
	float voltage = (shuntVoltage * 18.414) / 1000000;
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f7ff fc8b 	bl	800044c <__aeabi_ui2d>
 8000b36:	a310      	add	r3, pc, #64	; (adr r3, 8000b78 <getInputVoltage+0x60>)
 8000b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3c:	f7ff fd00 	bl	8000540 <__aeabi_dmul>
 8000b40:	4603      	mov	r3, r0
 8000b42:	460c      	mov	r4, r1
 8000b44:	4618      	mov	r0, r3
 8000b46:	4621      	mov	r1, r4
 8000b48:	a30d      	add	r3, pc, #52	; (adr r3, 8000b80 <getInputVoltage+0x68>)
 8000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4e:	f7ff fe21 	bl	8000794 <__aeabi_ddiv>
 8000b52:	4603      	mov	r3, r0
 8000b54:	460c      	mov	r4, r1
 8000b56:	4618      	mov	r0, r3
 8000b58:	4621      	mov	r1, r4
 8000b5a:	f7ff ff8b 	bl	8000a74 <__aeabi_d2f>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	607b      	str	r3, [r7, #4]
	return voltage;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	ee07 3a90 	vmov	s15, r3
}
 8000b68:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	f3af 8000 	nop.w
 8000b78:	e76c8b44 	.word	0xe76c8b44
 8000b7c:	403269fb 	.word	0x403269fb
 8000b80:	00000000 	.word	0x00000000
 8000b84:	412e8480 	.word	0x412e8480
 8000b88:	2000005c 	.word	0x2000005c

08000b8c <sendACK>:

void sendACK()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	uint32_t mb;
	uint8_t data[] = {1, 1, 1, 1};
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <sendACK+0x6c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	603b      	str	r3, [r7, #0]
	TxMessage.StdId = 0;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <sendACK+0x70>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <sendACK+0x70>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <sendACK+0x70>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = 4;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <sendACK+0x70>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	611a      	str	r2, [r3, #16]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <sendACK+0x70>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
	data[1] = adcBuffer[0] >> 8;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <sendACK+0x74>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	707b      	strb	r3, [r7, #1]
	data[2] = adcBuffer[1] >> 8;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <sendACK+0x74>)
 8000bc4:	885b      	ldrh	r3, [r3, #2]
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	70bb      	strb	r3, [r7, #2]
	data[3] = adcBuffer[2] >> 8;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <sendACK+0x74>)
 8000bd0:	889b      	ldrh	r3, [r3, #4]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	70fb      	strb	r3, [r7, #3]
	if (HAL_CAN_AddTxMessage(&hcan, &TxMessage, data, &mb) != HAL_OK) {
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	463a      	mov	r2, r7
 8000bde:	4907      	ldr	r1, [pc, #28]	; (8000bfc <sendACK+0x70>)
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <sendACK+0x78>)
 8000be2:	f002 fd7f 	bl	80036e4 <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <sendACK+0x64>
	    Error_Handler();
 8000bec:	f001 f8e2 	bl	8001db4 <Error_Handler>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08007650 	.word	0x08007650
 8000bfc:	20000348 	.word	0x20000348
 8000c00:	2000005c 	.word	0x2000005c
 8000c04:	20000148 	.word	0x20000148

08000c08 <setPWMLeft>:
	}
}


void setPWMLeft(int PWM)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <setPWMLeft+0x80>)
 8000c16:	701a      	strb	r2, [r3, #0]
	uint8_t PWM_local = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <setPWMLeft+0x84>)
 8000c22:	f003 fdd1 	bl	80047c8 <HAL_GPIO_WritePin>
	if(PWM >= 100)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b63      	cmp	r3, #99	; 0x63
 8000c2a:	dd0a      	ble.n	8000c42 <setPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f003 fdc8 	bl	80047c8 <HAL_GPIO_WritePin>
		PWM_local = PWM - 100;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3b64      	subs	r3, #100	; 0x64
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e00d      	b.n	8000c5e <setPWMLeft+0x56>
	}
	else if(PWM < 100)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b63      	cmp	r3, #99	; 0x63
 8000c46:	dc0a      	bgt.n	8000c5e <setPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f003 fdba 	bl	80047c8 <HAL_GPIO_WritePin>
		PWM_local = 100 - PWM;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000c5c:	73fb      	strb	r3, [r7, #15]
	}
	int temp = PWM_local * 32 + 1;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	3301      	adds	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
	if(temp > 3300)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dd02      	ble.n	8000c76 <setPWMLeft+0x6e>
	{
		temp = 3300;
 8000c70:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000c74:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, temp);
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <setPWMLeft+0x88>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000003 	.word	0x20000003
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	200000b0 	.word	0x200000b0

08000c94 <setPWMRight>:

void setPWMRight(int PWM)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <setPWMRight+0x80>)
 8000ca2:	701a      	strb	r2, [r3, #0]
	uint8_t PWM_local = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	481a      	ldr	r0, [pc, #104]	; (8000d18 <setPWMRight+0x84>)
 8000cae:	f003 fd8b 	bl	80047c8 <HAL_GPIO_WritePin>
	if(PWM >= 100)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b63      	cmp	r3, #99	; 0x63
 8000cb6:	dd0a      	ble.n	8000cce <setPWMRight+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f003 fd82 	bl	80047c8 <HAL_GPIO_WritePin>
		PWM_local = PWM - 100;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3b64      	subs	r3, #100	; 0x64
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e00d      	b.n	8000cea <setPWMRight+0x56>
	}
	else if(PWM < 100)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b63      	cmp	r3, #99	; 0x63
 8000cd2:	dc0a      	bgt.n	8000cea <setPWMRight+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2180      	movs	r1, #128	; 0x80
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f003 fd74 	bl	80047c8 <HAL_GPIO_WritePin>
		PWM_local = 100 - PWM;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000ce8:	73fb      	strb	r3, [r7, #15]
	}
	int temp = PWM_local * 32 + 1;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	015b      	lsls	r3, r3, #5
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
	if(temp > 3300)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	dd02      	ble.n	8000d02 <setPWMRight+0x6e>
	{
		temp = 3300;
 8000cfc:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000d00:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, temp);
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <setPWMRight+0x88>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000004 	.word	0x20000004
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	200000b0 	.word	0x200000b0

08000d20 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08b      	sub	sp, #44	; 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  //HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8000d28:	4bce      	ldr	r3, [pc, #824]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000d2a:	4acf      	ldr	r2, [pc, #828]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f002 fdb3 	bl	800389a <HAL_CAN_GetRxMessage>
  uint32_t mb;
  uint32_t shuntVoltage;
  uint8_t currentLSB, currentMSB, voltageLSB, voltageMSB;
  float current, voltage;
  uint8_t data[] = {1,0,0,0,0,0,0,0};
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	723b      	strb	r3, [r7, #8]
  switch(RxData[0])
 8000d42:	4bc8      	ldr	r3, [pc, #800]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b66      	cmp	r3, #102	; 0x66
 8000d48:	f200 82b2 	bhi.w	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000ef1 	.word	0x08000ef1
 8000d58:	08000f3b 	.word	0x08000f3b
 8000d5c:	08000f79 	.word	0x08000f79
 8000d60:	08000f8b 	.word	0x08000f8b
 8000d64:	08000fc1 	.word	0x08000fc1
 8000d68:	08000ff7 	.word	0x08000ff7
 8000d6c:	08001015 	.word	0x08001015
 8000d70:	080012b1 	.word	0x080012b1
 8000d74:	080012b1 	.word	0x080012b1
 8000d78:	080012b1 	.word	0x080012b1
 8000d7c:	08001033 	.word	0x08001033
 8000d80:	08001051 	.word	0x08001051
 8000d84:	080012b1 	.word	0x080012b1
 8000d88:	080012b1 	.word	0x080012b1
 8000d8c:	080012b1 	.word	0x080012b1
 8000d90:	080012b1 	.word	0x080012b1
 8000d94:	080012b1 	.word	0x080012b1
 8000d98:	080012b1 	.word	0x080012b1
 8000d9c:	080012b1 	.word	0x080012b1
 8000da0:	080012b1 	.word	0x080012b1
 8000da4:	080012b1 	.word	0x080012b1
 8000da8:	080012b1 	.word	0x080012b1
 8000dac:	080012b1 	.word	0x080012b1
 8000db0:	080012b1 	.word	0x080012b1
 8000db4:	080012b1 	.word	0x080012b1
 8000db8:	080012b1 	.word	0x080012b1
 8000dbc:	080012b1 	.word	0x080012b1
 8000dc0:	080012b1 	.word	0x080012b1
 8000dc4:	080012b1 	.word	0x080012b1
 8000dc8:	080012b1 	.word	0x080012b1
 8000dcc:	080012b1 	.word	0x080012b1
 8000dd0:	080012b1 	.word	0x080012b1
 8000dd4:	080012b1 	.word	0x080012b1
 8000dd8:	080012b1 	.word	0x080012b1
 8000ddc:	080012b1 	.word	0x080012b1
 8000de0:	080012b1 	.word	0x080012b1
 8000de4:	080012b1 	.word	0x080012b1
 8000de8:	080012b1 	.word	0x080012b1
 8000dec:	080012b1 	.word	0x080012b1
 8000df0:	080012b1 	.word	0x080012b1
 8000df4:	080012b1 	.word	0x080012b1
 8000df8:	080012b1 	.word	0x080012b1
 8000dfc:	080012b1 	.word	0x080012b1
 8000e00:	080012b1 	.word	0x080012b1
 8000e04:	080012b1 	.word	0x080012b1
 8000e08:	080012b1 	.word	0x080012b1
 8000e0c:	080012b1 	.word	0x080012b1
 8000e10:	080012b1 	.word	0x080012b1
 8000e14:	080012b1 	.word	0x080012b1
 8000e18:	080012b1 	.word	0x080012b1
 8000e1c:	080012b1 	.word	0x080012b1
 8000e20:	080012b1 	.word	0x080012b1
 8000e24:	080012b1 	.word	0x080012b1
 8000e28:	080012b1 	.word	0x080012b1
 8000e2c:	080012b1 	.word	0x080012b1
 8000e30:	080012b1 	.word	0x080012b1
 8000e34:	080012b1 	.word	0x080012b1
 8000e38:	080012b1 	.word	0x080012b1
 8000e3c:	080012b1 	.word	0x080012b1
 8000e40:	080012b1 	.word	0x080012b1
 8000e44:	080012b1 	.word	0x080012b1
 8000e48:	080012b1 	.word	0x080012b1
 8000e4c:	080012b1 	.word	0x080012b1
 8000e50:	080012b1 	.word	0x080012b1
 8000e54:	080012b1 	.word	0x080012b1
 8000e58:	080012b1 	.word	0x080012b1
 8000e5c:	080012b1 	.word	0x080012b1
 8000e60:	080012b1 	.word	0x080012b1
 8000e64:	080012b1 	.word	0x080012b1
 8000e68:	080012b1 	.word	0x080012b1
 8000e6c:	080012b1 	.word	0x080012b1
 8000e70:	080012b1 	.word	0x080012b1
 8000e74:	080012b1 	.word	0x080012b1
 8000e78:	080012b1 	.word	0x080012b1
 8000e7c:	080012b1 	.word	0x080012b1
 8000e80:	080012b1 	.word	0x080012b1
 8000e84:	080012b1 	.word	0x080012b1
 8000e88:	080012b1 	.word	0x080012b1
 8000e8c:	080012b1 	.word	0x080012b1
 8000e90:	080012b1 	.word	0x080012b1
 8000e94:	080012b1 	.word	0x080012b1
 8000e98:	080012b1 	.word	0x080012b1
 8000e9c:	080012b1 	.word	0x080012b1
 8000ea0:	080012b1 	.word	0x080012b1
 8000ea4:	080012b1 	.word	0x080012b1
 8000ea8:	080012b1 	.word	0x080012b1
 8000eac:	080012b1 	.word	0x080012b1
 8000eb0:	080012b1 	.word	0x080012b1
 8000eb4:	080012b1 	.word	0x080012b1
 8000eb8:	080012b1 	.word	0x080012b1
 8000ebc:	080012b1 	.word	0x080012b1
 8000ec0:	080012b1 	.word	0x080012b1
 8000ec4:	080012b1 	.word	0x080012b1
 8000ec8:	080012b1 	.word	0x080012b1
 8000ecc:	080012b1 	.word	0x080012b1
 8000ed0:	080012b1 	.word	0x080012b1
 8000ed4:	080012b1 	.word	0x080012b1
 8000ed8:	080012b1 	.word	0x080012b1
 8000edc:	080012b1 	.word	0x080012b1
 8000ee0:	080012b1 	.word	0x080012b1
 8000ee4:	080010a3 	.word	0x080010a3
 8000ee8:	08001157 	.word	0x08001157
 8000eec:	08001209 	.word	0x08001209
  {
  	  case 0:
  		  //----------- Coast Brake -----------//
  		  //Set sleep pins low
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	485d      	ldr	r0, [pc, #372]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000ef6:	f003 fc67 	bl	80047c8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	485b      	ldr	r0, [pc, #364]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000f00:	f003 fc62 	bl	80047c8 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f003 fc5c 	bl	80047c8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fc56 	bl	80047c8 <HAL_GPIO_WritePin>
  		  pwm_left = 100;
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8000f1e:	2264      	movs	r2, #100	; 0x64
 8000f20:	701a      	strb	r2, [r3, #0]
  		  pwm_target_left = 100;
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000f24:	2264      	movs	r2, #100	; 0x64
 8000f26:	701a      	strb	r2, [r3, #0]
  		  pwm_right = 100;
 8000f28:	4b53      	ldr	r3, [pc, #332]	; (8001078 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	701a      	strb	r2, [r3, #0]
  		  pwm_target_right = 100;
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000f30:	2264      	movs	r2, #100	; 0x64
 8000f32:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000f34:	f7ff fe2a 	bl	8000b8c <sendACK>
  		  break;
 8000f38:	e1ba      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 1:
  		  //----------- Dynamic Brake (slow brake) -----------//
  		  //Set sleep pins high
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	484b      	ldr	r0, [pc, #300]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000f40:	f003 fc42 	bl	80047c8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	4848      	ldr	r0, [pc, #288]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000f4a:	f003 fc3d 	bl	80047c8 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f003 fc37 	bl	80047c8 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f003 fc31 	bl	80047c8 <HAL_GPIO_WritePin>
  		  setPWMLeft(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f7ff fe4e 	bl	8000c08 <setPWMLeft>
  		  setPWMRight(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f7ff fe91 	bl	8000c94 <setPWMRight>
  		  sendACK();
 8000f72:	f7ff fe0b 	bl	8000b8c <sendACK>
  		  break;
 8000f76:	e19b      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 2:
  		  //----------- Regenerative brake -----------//
  		  pwm_target_right = 100;
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000f7a:	2264      	movs	r2, #100	; 0x64
 8000f7c:	701a      	strb	r2, [r3, #0]
		  pwm_target_left = 100;
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000f80:	2264      	movs	r2, #100	; 0x64
 8000f82:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000f84:	f7ff fe02 	bl	8000b8c <sendACK>
  		  break;
 8000f88:	e192      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 3:
  		  //----------- Forward drive -----------//
  		  if(RxData[1] > 100)
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d906      	bls.n	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>
  		  {
  			  pwm_target_left = 200;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000f94:	22c8      	movs	r2, #200	; 0xc8
 8000f96:	701a      	strb	r2, [r3, #0]
  			  pwm_target_right = 0;
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e00c      	b.n	8000fba <HAL_CAN_RxFifo0MsgPendingCallback+0x29a>
  		  }
  		  else
  		  {
  			  pwm_target_left = 100 + RxData[1];
 8000fa0:	4b30      	ldr	r3, [pc, #192]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	3364      	adds	r3, #100	; 0x64
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000faa:	701a      	strb	r2, [r3, #0]
  			  pwm_target_right = 100 - RxData[1];
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
  		  }
  		  sendACK();
 8000fba:	f7ff fde7 	bl	8000b8c <sendACK>
  		  break;
 8000fbe:	e177      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 4:
  		  //----------- Reverse drive -----------//
  		  if(RxData[1] > 100)
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d906      	bls.n	8000fd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b6>
  		  {
  		  	  pwm_target_left = 0;
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
  		  	  pwm_target_right = 200;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fd0:	22c8      	movs	r2, #200	; 0xc8
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e00c      	b.n	8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>
  		  }
  		  else
  		  {
  			  pwm_target_left = 100 - RxData[1];
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000fe2:	701a      	strb	r2, [r3, #0]
  		  	  pwm_target_right = 100 + RxData[1];
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
 8000fe8:	3364      	adds	r3, #100	; 0x64
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fee:	701a      	strb	r2, [r3, #0]
  		  }
  		  sendACK();
 8000ff0:	f7ff fdcc 	bl	8000b8c <sendACK>
  		  break;
 8000ff4:	e15c      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 5:
  		  //----------- Manual left motor -----------//
  		  if(RxData[1] > 200) pwm_target_left = 200;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	2bc8      	cmp	r3, #200	; 0xc8
 8000ffc:	d903      	bls.n	8001006 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e6>
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8001000:	22c8      	movs	r2, #200	; 0xc8
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e003      	b.n	800100e <HAL_CAN_RxFifo0MsgPendingCallback+0x2ee>
  		  else pwm_target_left = RxData[1];
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001008:	785a      	ldrb	r2, [r3, #1]
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 800100c:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800100e:	f7ff fdbd 	bl	8000b8c <sendACK>
  		  break;
 8001012:	e14d      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 6:
  		  //----------- Manual right motor -----------//
  		  if(RxData[1] > 200) pwm_target_right = 200;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	2bc8      	cmp	r3, #200	; 0xc8
 800101a:	d903      	bls.n	8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 800101e:	22c8      	movs	r2, #200	; 0xc8
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e003      	b.n	800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>
  		  else pwm_target_right = RxData[1];
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001026:	785a      	ldrb	r2, [r3, #1]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 800102a:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800102c:	f7ff fdae 	bl	8000b8c <sendACK>
  		  break;
 8001030:	e13e      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 10:
  		  if(RxData[1] > 100) accl = 100;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d903      	bls.n	8001042 <HAL_CAN_RxFifo0MsgPendingCallback+0x322>
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e003      	b.n	800104a <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
  		  else accl = RxData[1];
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001044:	785a      	ldrb	r2, [r3, #1]
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8001048:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800104a:	f7ff fd9f 	bl	8000b8c <sendACK>
  		  break;
 800104e:	e12f      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 11:
  		  if(RxData[1] > 100) DAC1->DHR12R1 = 4024;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d917      	bls.n	8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 800105a:	f640 72b8 	movw	r2, #4024	; 0xfb8
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	e01c      	b.n	800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>
 8001062:	bf00      	nop
 8001064:	200002f4 	.word	0x200002f4
 8001068:	200003ac 	.word	0x200003ac
 800106c:	48000800 	.word	0x48000800
 8001070:	20000003 	.word	0x20000003
 8001074:	20000001 	.word	0x20000001
 8001078:	20000004 	.word	0x20000004
 800107c:	20000002 	.word	0x20000002
 8001080:	20000000 	.word	0x20000000
 8001084:	40007400 	.word	0x40007400
  		  else DAC1->DHR12R1 = RxData[1] * 40;
 8001088:	4b91      	ldr	r3, [pc, #580]	; (80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b0>)
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	461a      	mov	r2, r3
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	461a      	mov	r2, r3
 8001098:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b4>)
 800109a:	609a      	str	r2, [r3, #8]
  		  sendACK();
 800109c:	f7ff fd76 	bl	8000b8c <sendACK>
  		  break;
 80010a0:	e106      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  	  case 100:
  		  //----------- Left current -----------//
  		  mb = adcBuffer[1];
 80010a2:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 80010a4:	885b      	ldrh	r3, [r3, #2]
 80010a6:	613b      	str	r3, [r7, #16]
  		  shuntVoltage = (801 * mb) / 20;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f240 3221 	movw	r2, #801	; 0x321
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x5bc>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	61fb      	str	r3, [r7, #28]
  		  current = (shuntVoltage / 10000.0);
 80010bc:	69f8      	ldr	r0, [r7, #28]
 80010be:	f7ff f9c5 	bl	800044c <__aeabi_ui2d>
 80010c2:	a381      	add	r3, pc, #516	; (adr r3, 80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a8>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fb64 	bl	8000794 <__aeabi_ddiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fcce 	bl	8000a74 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	61bb      	str	r3, [r7, #24]
  		  currentMSB = current;
 80010dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e4:	edc7 7a00 	vstr	s15, [r7]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	75fb      	strb	r3, [r7, #23]
  		  currentLSB = (current - currentMSB)*100;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c0>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	edc7 7a00 	vstr	s15, [r7]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	75bb      	strb	r3, [r7, #22]
  	  	  data[1] = currentMSB;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	727b      	strb	r3, [r7, #9]
  	  	  data[2] = currentLSB;
 8001116:	7dbb      	ldrb	r3, [r7, #22]
 8001118:	72bb      	strb	r3, [r7, #10]
  	  	  TxMessage.StdId = 0;
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 800112c:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 800112e:	2203      	movs	r2, #3
 8001130:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001134:	2200      	movs	r2, #0
 8001136:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	f107 0208 	add.w	r2, r7, #8
 8001140:	4968      	ldr	r1, [pc, #416]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f002 face 	bl	80036e4 <HAL_CAN_AddTxMessage>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80ab 	beq.w	80012a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x586>
  	  		  Error_Handler();
 8001150:	f000 fe30 	bl	8001db4 <Error_Handler>
  	  	  }
  		  break;
 8001154:	e0a7      	b.n	80012a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x586>
  	  case 101:
  		  //----------- Right current -----------//
  		  mb = adcBuffer[2];
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	613b      	str	r3, [r7, #16]
  		  shuntVoltage = (801 * mb) / 20;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	f240 3221 	movw	r2, #801	; 0x321
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x5bc>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	61fb      	str	r3, [r7, #28]
  		  current = (shuntVoltage / 10000.0);
 8001170:	69f8      	ldr	r0, [r7, #28]
 8001172:	f7ff f96b 	bl	800044c <__aeabi_ui2d>
 8001176:	a354      	add	r3, pc, #336	; (adr r3, 80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fb0a 	bl	8000794 <__aeabi_ddiv>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f7ff fc74 	bl	8000a74 <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
  		  currentMSB = current;
 8001190:	edd7 7a06 	vldr	s15, [r7, #24]
 8001194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001198:	edc7 7a00 	vstr	s15, [r7]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	75fb      	strb	r3, [r7, #23]
  		  currentLSB = (current - currentMSB)*100;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c0>
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	edc7 7a00 	vstr	s15, [r7]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	75bb      	strb	r3, [r7, #22]
  		  data[1] = currentMSB;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	727b      	strb	r3, [r7, #9]
  		  data[2] = currentLSB;
 80011ca:	7dbb      	ldrb	r3, [r7, #22]
 80011cc:	72bb      	strb	r3, [r7, #10]
  	  	  TxMessage.StdId = 0;
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 80011d4:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 80011e0:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	493b      	ldr	r1, [pc, #236]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 fa74 	bl	80036e4 <HAL_CAN_AddTxMessage>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d053      	beq.n	80012aa <HAL_CAN_RxFifo0MsgPendingCallback+0x58a>
  	  		  Error_Handler();
 8001202:	f000 fdd7 	bl	8001db4 <Error_Handler>
  	  	  }
  		  break;
 8001206:	e050      	b.n	80012aa <HAL_CAN_RxFifo0MsgPendingCallback+0x58a>
  	  case 102:
  		  //----------- Battery voltage -----------//
  		  voltage = getInputVoltage();
 8001208:	f7ff fc86 	bl	8000b18 <getInputVoltage>
 800120c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  		  voltageMSB = voltage;
 8001210:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	edc7 7a00 	vstr	s15, [r7]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  		  voltageLSB = (voltage - voltageMSB) * 100;
 8001222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001236:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c0>
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	edc7 7a00 	vstr	s15, [r7]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  		  data[1] = voltageMSB;
 800124c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001250:	727b      	strb	r3, [r7, #9]
  		  data[2] = voltageLSB;
 8001252:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001256:	72bb      	strb	r3, [r7, #10]
  		  data[3] = adcBuffer[0] >> 8;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	b29b      	uxth	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	72fb      	strb	r3, [r7, #11]
  		  data[4] = adcBuffer[0];
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5b8>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	733b      	strb	r3, [r7, #12]
  		  TxMessage.StdId = 0;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 5;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001280:	2205      	movs	r2, #5
 8001282:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001286:	2200      	movs	r2, #0
 8001288:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	f107 0208 	add.w	r2, r7, #8
 8001292:	4914      	ldr	r1, [pc, #80]	; (80012e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c4>)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f002 fa25 	bl	80036e4 <HAL_CAN_AddTxMessage>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_CAN_RxFifo0MsgPendingCallback+0x58e>
  			  Error_Handler();
 80012a0:	f000 fd88 	bl	8001db4 <Error_Handler>
  		  }
  		  break;
 80012a4:	e003      	b.n	80012ae <HAL_CAN_RxFifo0MsgPendingCallback+0x58e>
  		  break;
 80012a6:	bf00      	nop
 80012a8:	e002      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  		  break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x590>
  		  break;
 80012ae:	bf00      	nop
  };
  counter ++;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c8>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c8>)
 80012ba:	801a      	strh	r2, [r3, #0]

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	372c      	adds	r7, #44	; 0x2c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	f3af 8000 	nop.w
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40c38800 	.word	0x40c38800
 80012d0:	200002f4 	.word	0x200002f4
 80012d4:	40007400 	.word	0x40007400
 80012d8:	2000005c 	.word	0x2000005c
 80012dc:	cccccccd 	.word	0xcccccccd
 80012e0:	42c80000 	.word	0x42c80000
 80012e4:	20000348 	.word	0x20000348
 80012e8:	20000030 	.word	0x20000030
 80012ec:	00000000 	.word	0x00000000

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f001 f8e1 	bl	80024bc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8e3 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fcbd 	bl	8001c7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001302:	f000 fca3 	bl	8001c4c <MX_DMA_Init>
  MX_ADC1_Init();
 8001306:	f000 f941 	bl	800158c <MX_ADC1_Init>
  MX_CAN_Init();
 800130a:	f000 f9bb 	bl	8001684 <MX_CAN_Init>
  MX_DAC_Init();
 800130e:	f000 fa1f 	bl	8001750 <MX_DAC_Init>
  MX_TIM1_Init();
 8001312:	f000 fa87 	bl	8001824 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001316:	f000 fadf 	bl	80018d8 <MX_TIM2_Init>
  MX_TIM15_Init();
 800131a:	f000 fb31 	bl	8001980 <MX_TIM15_Init>
  MX_TIM16_Init();
 800131e:	f000 fbc5 	bl	8001aac <MX_TIM16_Init>
  MX_TIM17_Init();
 8001322:	f000 fbe9 	bl	8001af8 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001326:	f000 fa3d 	bl	80017a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800132a:	f000 fc5f 	bl	8001bec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	4857      	ldr	r0, [pc, #348]	; (8001490 <main+0x1a0>)
 8001332:	f002 ff46 	bl	80041c2 <HAL_DAC_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	4856      	ldr	r0, [pc, #344]	; (8001494 <main+0x1a4>)
 800133a:	f004 ff01 	bl	8006140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	4854      	ldr	r0, [pc, #336]	; (8001494 <main+0x1a4>)
 8001342:	f004 fefd 	bl	8006140 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001346:	2100      	movs	r1, #0
 8001348:	4853      	ldr	r0, [pc, #332]	; (8001498 <main+0x1a8>)
 800134a:	f001 fb7f 	bl	8002a4c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 3);
 800134e:	2203      	movs	r2, #3
 8001350:	4952      	ldr	r1, [pc, #328]	; (800149c <main+0x1ac>)
 8001352:	4851      	ldr	r0, [pc, #324]	; (8001498 <main+0x1a8>)
 8001354:	f001 fade 	bl	8002914 <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2014      	movs	r0, #20
 800135e:	f002 fed8 	bl	8004112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001362:	2014      	movs	r0, #20
 8001364:	f002 fef1 	bl	800414a <HAL_NVIC_EnableIRQ>
  DAC1->DHR12R1 = 3000;
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <main+0x1b0>)
 800136a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800136e:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(OV_FAULT == 1 || GD_FAULT == 1)
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <main+0x1b4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d003      	beq.n	8001380 <main+0x90>
 8001378:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <main+0x1b8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d110      	bne.n	80013a2 <main+0xb2>
	  {
		  setPWMLeft(100);
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f7ff fc41 	bl	8000c08 <setPWMLeft>
		  setPWMRight(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f7ff fc84 	bl	8000c94 <setPWMRight>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <main+0x1bc>)
 8001392:	f003 fa19 	bl	80047c8 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	4844      	ldr	r0, [pc, #272]	; (80014ac <main+0x1bc>)
 800139c:	f003 fa14 	bl	80047c8 <HAL_GPIO_WritePin>
 80013a0:	e042      	b.n	8001428 <main+0x138>
	  }
	  else if(pwm_target_left != pwm_left || pwm_target_right != pwm_right)
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <main+0x1c0>)
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <main+0x1c4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d105      	bne.n	80013ba <main+0xca>
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <main+0x1c8>)
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	4b42      	ldr	r3, [pc, #264]	; (80014bc <main+0x1cc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d036      	beq.n	8001428 <main+0x138>
	  {
		  if(pwm_target_left > pwm_left)
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <main+0x1c0>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <main+0x1c4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d906      	bls.n	80013d4 <main+0xe4>
		  {
			  setPWMLeft(pwm_left + 1);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <main+0x1c4>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc1b 	bl	8000c08 <setPWMLeft>
 80013d2:	e00b      	b.n	80013ec <main+0xfc>
		  }
		  else if(pwm_target_left < pwm_left)
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <main+0x1c0>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <main+0x1c4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d205      	bcs.n	80013ec <main+0xfc>
		  {
			  setPWMLeft(pwm_left - 1);
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <main+0x1c4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc0e 	bl	8000c08 <setPWMLeft>
		  }
		  if(pwm_target_right > pwm_right)
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <main+0x1c8>)
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <main+0x1cc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d906      	bls.n	8001406 <main+0x116>
		  {
		  	  setPWMRight(pwm_right + 1);
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <main+0x1cc>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fc48 	bl	8000c94 <setPWMRight>
 8001404:	e00b      	b.n	800141e <main+0x12e>
		  }
		  else if(pwm_target_right < pwm_right)
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0x1c8>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <main+0x1cc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d205      	bcs.n	800141e <main+0x12e>
		  {
		  	  setPWMRight(pwm_right - 1);
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <main+0x1cc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3b01      	subs	r3, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc3b 	bl	8000c94 <setPWMRight>
		  }
		  HAL_Delay(accl);
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <main+0x1d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f8b0 	bl	8002588 <HAL_Delay>
	  }
	  float inputVoltage = getInputVoltage();
 8001428:	f7ff fb76 	bl	8000b18 <getInputVoltage>
 800142c:	ed87 0a01 	vstr	s0, [r7, #4]
	  if(inputVoltage > 29.2 && OV_FAULT == 0)
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff f82d 	bl	8000490 <__aeabi_f2d>
 8001436:	a314      	add	r3, pc, #80	; (adr r3, 8001488 <main+0x198>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff fb10 	bl	8000a60 <__aeabi_dcmpgt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <main+0x164>
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <main+0x1b4>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <main+0x164>
	  {
		  OV_FAULT = 1;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <main+0x1b4>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
	  }
	  if((!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)) && GD_FAULT == 0)
 8001454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001458:	4814      	ldr	r0, [pc, #80]	; (80014ac <main+0x1bc>)
 800145a:	f003 f99d 	bl	8004798 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <main+0x186>
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <main+0x1bc>)
 800146a:	f003 f995 	bl	8004798 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f af7d 	bne.w	8001370 <main+0x80>
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <main+0x1b8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f47f af78 	bne.w	8001370 <main+0x80>
	  {
		  GD_FAULT = 1;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <main+0x1b8>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
  {
 8001486:	e773      	b.n	8001370 <main+0x80>
 8001488:	33333333 	.word	0x33333333
 800148c:	403d3333 	.word	0x403d3333
 8001490:	20000244 	.word	0x20000244
 8001494:	200000b0 	.word	0x200000b0
 8001498:	20000170 	.word	0x20000170
 800149c:	2000005c 	.word	0x2000005c
 80014a0:	40007400 	.word	0x40007400
 80014a4:	20000033 	.word	0x20000033
 80014a8:	20000032 	.word	0x20000032
 80014ac:	48000800 	.word	0x48000800
 80014b0:	20000001 	.word	0x20000001
 80014b4:	20000003 	.word	0x20000003
 80014b8:	20000002 	.word	0x20000002
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000000 	.word	0x20000000

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09c      	sub	sp, #112	; 0x70
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ce:	2228      	movs	r2, #40	; 0x28
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 f8a8 	bl	8007628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 f89a 	bl	8007628 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fc:	2310      	movs	r3, #16
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001504:	2300      	movs	r3, #0
 8001506:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001508:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800150c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fa96 	bl	8004a44 <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800151e:	f000 fc49 	bl	8001db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001536:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f004 f989 	bl	8005854 <HAL_RCC_ClockConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001548:	f000 fc34 	bl	8001db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <SystemClock_Config+0xc4>)
 800154e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fba5 	bl	8005cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800157c:	f000 fc1a 	bl	8001db4 <Error_Handler>
  }
}
 8001580:	bf00      	nop
 8001582:	3770      	adds	r7, #112	; 0x70
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	001c10a1 	.word	0x001c10a1

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015d4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015e2:	2203      	movs	r2, #3
 80015e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_ADC1_Init+0xf4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001600:	481f      	ldr	r0, [pc, #124]	; (8001680 <MX_ADC1_Init+0xf4>)
 8001602:	f001 f801 	bl	8002608 <HAL_ADC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 800160c:	f000 fbd2 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001610:	2308      	movs	r3, #8
 8001612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001614:	2301      	movs	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800161c:	2304      	movs	r3, #4
 800161e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_ADC1_Init+0xf4>)
 800162e:	f001 fa77 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001638:	f000 fbbc 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800163c:	2307      	movs	r3, #7
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001644:	2304      	movs	r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_ADC1_Init+0xf4>)
 800164e:	f001 fa67 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001658:	f000 fbac 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800165c:	2306      	movs	r3, #6
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001660:	2303      	movs	r3, #3
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_ADC1_Init+0xf4>)
 800166a:	f001 fa59 	bl	8002b20 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001674:	f000 fb9e 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000170 	.word	0x20000170

08001684 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MX_CAN_Init+0xc4>)
 800168c:	4a2f      	ldr	r2, [pc, #188]	; (800174c <MX_CAN_Init+0xc8>)
 800168e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MX_CAN_Init+0xc4>)
 8001692:	2204      	movs	r2, #4
 8001694:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <MX_CAN_Init+0xc4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_CAN_Init+0xc4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <MX_CAN_Init+0xc4>)
 80016a4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80016a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <MX_CAN_Init+0xc4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <MX_CAN_Init+0xc4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MX_CAN_Init+0xc4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <MX_CAN_Init+0xc4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_CAN_Init+0xc4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MX_CAN_Init+0xc4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_CAN_Init+0xc4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <MX_CAN_Init+0xc4>)
 80016d6:	f001 fdfc 	bl	80032d2 <HAL_CAN_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016e0:	f000 fb68 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sf;
    sf.FilterMaskIdHigh = 0xFFFF;
 80016e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e8:	60bb      	str	r3, [r7, #8]
    sf.FilterMaskIdLow = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
    sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
    sf.FilterBank = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
    sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
    sf.FilterScale = CAN_FILTERSCALE_32BIT;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
    sf.FilterActivation = CAN_FILTER_ENABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
    sf.FilterIdLow= 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
    sf.FilterIdHigh = 0x001 << 5;
 8001706:	2320      	movs	r3, #32
 8001708:	603b      	str	r3, [r7, #0]
    if (HAL_CAN_ConfigFilter(&hcan, &sf) != HAL_OK) {
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <MX_CAN_Init+0xc4>)
 8001710:	f001 feda 	bl	80034c8 <HAL_CAN_ConfigFilter>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_CAN_Init+0x9a>
      Error_Handler();
 800171a:	f000 fb4b 	bl	8001db4 <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800171e:	2102      	movs	r1, #2
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <MX_CAN_Init+0xc4>)
 8001722:	f002 f9cc 	bl	8003abe <HAL_CAN_ActivateNotification>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_CAN_Init+0xac>
        Error_Handler();
 800172c:	f000 fb42 	bl	8001db4 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_CAN_Init+0xc4>)
 8001732:	f001 ff93 	bl	800365c <HAL_CAN_Start>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_CAN_Init+0xbc>
      Error_Handler();
 800173c:	f000 fb3a 	bl	8001db4 <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000148 	.word	0x20000148
 800174c:	40006400 	.word	0x40006400

08001750 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_DAC_Init+0x4c>)
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <MX_DAC_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_DAC_Init+0x4c>)
 8001768:	f002 fd09 	bl	800417e <HAL_DAC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001772:	f000 fb1f 	bl	8001db4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_DAC_Init+0x4c>)
 8001786:	f002 fd53 	bl	8004230 <HAL_DAC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001790:	f000 fb10 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000244 	.word	0x20000244
 80017a0:	40007400 	.word	0x40007400

080017a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_I2C1_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_I2C1_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <MX_I2C1_Init+0x7c>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_I2C1_Init+0x74>)
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_I2C1_Init+0x74>)
 80017e0:	f003 f80a 	bl	80047f8 <HAL_I2C_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ea:	f000 fae3 	bl	8001db4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <MX_I2C1_Init+0x74>)
 80017f2:	f003 f890 	bl	8004916 <HAL_I2CEx_ConfigAnalogFilter>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 fada 	bl	8001db4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_I2C1_Init+0x74>)
 8001804:	f003 f8d2 	bl	80049ac <HAL_I2CEx_ConfigDigitalFilter>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 fad1 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000064 	.word	0x20000064
 800181c:	40005400 	.word	0x40005400
 8001820:	2000090e 	.word	0x2000090e

08001824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <MX_TIM1_Init+0xb0>)
 8001846:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_TIM1_Init+0xac>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_TIM1_Init+0xac>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM1_Init+0xac>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001870:	f004 fbb8 	bl	8005fe4 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800187a:	f000 fa9b 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_TIM1_Init+0xac>)
 8001898:	f004 fe48 	bl	800652c <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018a2:	f000 fa87 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM1_Init+0xac>)
 80018b8:	f005 fac6 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80018c2:	f000 fa77 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002a4 	.word	0x200002a4
 80018d4:	40012c00 	.word	0x40012c00

080018d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_TIM2_Init+0xa4>)
 80018f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_TIM2_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM2_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <MX_TIM2_Init+0xa4>)
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_TIM2_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM2_Init+0xa4>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <MX_TIM2_Init+0xa4>)
 8001920:	f004 fb60 	bl	8005fe4 <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800192a:	f000 fa43 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800192e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001932:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <MX_TIM2_Init+0xa4>)
 8001948:	f004 fdf0 	bl	800652c <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001952:	f000 fa2f 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_TIM2_Init+0xa4>)
 8001964:	f005 fa70 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800196e:	f000 fa21 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002fc 	.word	0x200002fc

08001980 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	222c      	movs	r2, #44	; 0x2c
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 fe3b 	bl	8007628 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <MX_TIM15_Init+0x128>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3200;
 80019c4:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019c6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80019ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019de:	4831      	ldr	r0, [pc, #196]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019e0:	f004 fb57 	bl	8006092 <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80019ea:	f000 f9e3 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ee:	2320      	movs	r3, #32
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fa:	4619      	mov	r1, r3
 80019fc:	4829      	ldr	r0, [pc, #164]	; (8001aa4 <MX_TIM15_Init+0x124>)
 80019fe:	f005 fa23 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f000 f9d4 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1200;
 8001a10:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <MX_TIM15_Init+0x124>)
 8001a34:	f004 fc6a 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001a3e:	f000 f9b9 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8001a42:	23c8      	movs	r3, #200	; 0xc8
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <MX_TIM15_Init+0x124>)
 8001a50:	f004 fc5c 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM15_Init+0xde>
  {
    Error_Handler();
 8001a5a:	f000 f9ab 	bl	8001db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <MX_TIM15_Init+0x124>)
 8001a86:	f005 fa45 	bl	8006f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 8001a90:	f000 f990 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <MX_TIM15_Init+0x124>)
 8001a96:	f000 fbc5 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3758      	adds	r7, #88	; 0x58
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200000b0 	.word	0x200000b0
 8001aa8:	40014000 	.word	0x40014000

08001aac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <MX_TIM16_Init+0x48>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_TIM16_Init+0x44>)
 8001ade:	f004 fa81 	bl	8005fe4 <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ae8:	f000 f964 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000360 	.word	0x20000360
 8001af4:	40014400 	.word	0x40014400

08001af8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b092      	sub	sp, #72	; 0x48
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b12:	463b      	mov	r3, r7
 8001b14:	222c      	movs	r2, #44	; 0x2c
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fd85 	bl	8007628 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b20:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <MX_TIM17_Init+0xf0>)
 8001b22:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b36:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b4a:	4826      	ldr	r0, [pc, #152]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b4c:	f004 fa4a 	bl	8005fe4 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001b56:	f000 f92d 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001b5a:	4822      	ldr	r0, [pc, #136]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b5c:	f004 fa99 	bl	8006092 <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001b66:	f000 f925 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	; 0x60
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4815      	ldr	r0, [pc, #84]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001b90:	f004 fbbc 	bl	800630c <HAL_TIM_PWM_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001b9a:	f000 f90b 	bl	8001db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001bc6:	f005 f9a5 	bl	8006f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001bd0:	f000 f8f0 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM17_Init+0xec>)
 8001bd6:	f000 fb25 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3748      	adds	r7, #72	; 0x48
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200000fc 	.word	0x200000fc
 8001be8:	40014800 	.word	0x40014800

08001bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <MX_USART1_UART_Init+0x5c>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001bf8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c30:	f005 f9e8 	bl	8007004 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f000 f8bb 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200001c0 	.word	0x200001c0
 8001c48:	40013800 	.word	0x40013800

08001c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_DMA_Init+0x2c>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <MX_DMA_Init+0x2c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6153      	str	r3, [r2, #20]
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_DMA_Init+0x2c>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a44      	ldr	r2, [pc, #272]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	6153      	str	r3, [r2, #20]
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6153      	str	r3, [r2, #20]
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <MX_GPIO_Init+0x12c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	21c0      	movs	r1, #192	; 0xc0
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f002 fd71 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cec:	482f      	ldr	r0, [pc, #188]	; (8001dac <MX_GPIO_Init+0x130>)
 8001cee:	f002 fd6b 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	21c0      	movs	r1, #192	; 0xc0
 8001cf6:	482e      	ldr	r0, [pc, #184]	; (8001db0 <MX_GPIO_Init+0x134>)
 8001cf8:	f002 fd66 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f002 fbcf 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f002 fbc0 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d34:	2301      	movs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_GPIO_Init+0x130>)
 8001d48:	f002 fbb4 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_GPIO_Init+0x130>)
 8001d66:	f002 fba5 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d72:	2302      	movs	r3, #2
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <MX_GPIO_Init+0x134>)
 8001d82:	f002 fb97 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_GPIO_Init+0x134>)
 8001d9c:	f002 fb8a 	bl	80044b4 <HAL_GPIO_Init>

}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dba:	e7fe      	b.n	8001dba <Error_Handler+0x6>

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x44>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6193      	str	r3, [r2, #24]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x44>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_MspInit+0x44>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_MspInit+0x44>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_MspInit+0x44>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e24:	d14c      	bne.n	8001ec0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6153      	str	r3, [r2, #20]
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e48:	6153      	str	r3, [r2, #20]
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_ADC_MspInit+0xc4>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e56:	2307      	movs	r3, #7
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4818      	ldr	r0, [pc, #96]	; (8001ecc <HAL_ADC_MspInit+0xc8>)
 8001e6a:	f002 fb23 	bl	80044b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e70:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_ADC_MspInit+0xd0>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e98:	2220      	movs	r2, #32
 8001e9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001ea6:	f002 fa10 	bl	80042ca <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001eb0:	f7ff ff80 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_ADC_MspInit+0xcc>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	20000258 	.word	0x20000258
 8001ed4:	40020008 	.word	0x40020008

08001ed8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_CAN_MspInit+0x90>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d131      	bne.n	8001f5e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	6153      	str	r3, [r2, #20]
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_CAN_MspInit+0x94>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4a:	f002 fab3 	bl	80044b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2014      	movs	r0, #20
 8001f54:	f002 f8dd 	bl	8004112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001f58:	2014      	movs	r0, #20
 8001f5a:	f002 f8f6 	bl	800414a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40006400 	.word	0x40006400
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_DAC_MspInit+0x74>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d124      	bne.n	8001fdc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	6153      	str	r3, [r2, #20]
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_DAC_MspInit+0x78>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f002 fa6c 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40007400 	.word	0x40007400
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <HAL_I2C_MspInit+0xb8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d145      	bne.n	800209a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	6153      	str	r3, [r2, #20]
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6153      	str	r3, [r2, #20]
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800203e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002044:	2312      	movs	r3, #18
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002048:	2301      	movs	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002050:	2304      	movs	r3, #4
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f002 fa29 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002066:	2312      	movs	r3, #18
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002072:	2304      	movs	r3, #4
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_I2C_MspInit+0xc0>)
 800207e:	f002 fa19 	bl	80044b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_I2C_MspInit+0xbc>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40005400 	.word	0x40005400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400

080020b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_TIM_Base_MspInit+0x120>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d128      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020dc:	6193      	str	r3, [r2, #24]
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020f4:	6153      	str	r3, [r2, #20]
 80020f6:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002102:	2310      	movs	r3, #16
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002112:	2302      	movs	r3, #2
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	482e      	ldr	r0, [pc, #184]	; (80021d8 <HAL_TIM_Base_MspInit+0x128>)
 800211e:	f002 f9c9 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002122:	e051      	b.n	80021c8 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212c:	d129      	bne.n	8002182 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	6153      	str	r3, [r2, #20]
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	2301      	movs	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800216e:	2301      	movs	r3, #1
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f002 f99a 	bl	80044b4 <HAL_GPIO_Init>
}
 8002180:	e022      	b.n	80021c8 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_TIM_Base_MspInit+0x12c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10c      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
}
 80021a4:	e010      	b.n	80021c8 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM17)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_TIM_Base_MspInit+0x130>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d10b      	bne.n	80021c8 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80021b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_TIM_Base_MspInit+0x124>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3738      	adds	r7, #56	; 0x38
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48000800 	.word	0x48000800
 80021dc:	40014400 	.word	0x40014400
 80021e0:	40014800 	.word	0x40014800

080021e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_TIM_PWM_MspInit+0x38>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_TIM_PWM_MspInit+0x3c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6193      	str	r3, [r2, #24]
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_TIM_PWM_MspInit+0x3c>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40014000 	.word	0x40014000
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <HAL_TIM_MspPostInit+0xe4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d13a      	bne.n	80022bc <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6153      	str	r3, [r2, #20]
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4a2a      	ldr	r2, [pc, #168]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6153      	str	r3, [r2, #20]
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002276:	2308      	movs	r3, #8
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002286:	2309      	movs	r3, #9
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002294:	f002 f90e 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4816      	ldr	r0, [pc, #88]	; (8002310 <HAL_TIM_MspPostInit+0xec>)
 80022b6:	f002 f8fd 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80022ba:	e021      	b.n	8002300 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM17)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_TIM_MspPostInit+0xf0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d11c      	bne.n	8002300 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6153      	str	r3, [r2, #20]
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0xe8>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0xec>)
 80022fc:	f002 f8da 	bl	80044b4 <HAL_GPIO_Init>
}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40014000 	.word	0x40014000
 800230c:	40021000 	.word	0x40021000
 8002310:	48000400 	.word	0x48000400
 8002314:	40014800 	.word	0x40014800

08002318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_UART_MspInit+0xb8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d145      	bne.n	80023c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6193      	str	r3, [r2, #24]
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800235c:	6153      	str	r3, [r2, #20]
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	6153      	str	r3, [r2, #20]
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_UART_MspInit+0xbc>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002382:	2320      	movs	r3, #32
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002392:	2307      	movs	r3, #7
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	480e      	ldr	r0, [pc, #56]	; (80023d8 <HAL_UART_MspInit+0xc0>)
 800239e:	f002 f889 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b4:	2307      	movs	r3, #7
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c2:	f002 f877 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000800 	.word	0x48000800

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <NMI_Handler+0x4>

080023e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <HardFault_Handler+0x4>

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <MemManage_Handler+0x4>

080023ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002428:	f000 f88e 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002436:	f001 fb68 	bl	8003b0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000148 	.word	0x20000148

08002444 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SystemInit+0x20>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <SystemInit+0x20>)
 8002450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800246e:	490e      	ldr	r1, [pc, #56]	; (80024a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <LoopForever+0xe>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002484:	4c0b      	ldr	r4, [pc, #44]	; (80024b4 <LoopForever+0x16>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002492:	f7ff ffd7 	bl	8002444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f005 f8a3 	bl	80075e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800249a:	f7fe ff29 	bl	80012f0 <main>

0800249e <LoopForever>:

LoopForever:
    b LoopForever
 800249e:	e7fe      	b.n	800249e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80024ac:	08007694 	.word	0x08007694
  ldr r2, =_sbss
 80024b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80024b4:	200003cc 	.word	0x200003cc

080024b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_IRQHandler>
	...

080024bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x28>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x28>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f001 fe15 	bl	80040fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fc70 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000

080024e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fe2d 	bl	8004166 <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f001 fdf5 	bl	8004112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000008 	.word	0x20000008
 8002540:	20000010 	.word	0x20000010
 8002544:	2000000c 	.word	0x2000000c

08002548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000010 	.word	0x20000010
 800256c:	200003c8 	.word	0x200003c8

08002570 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;  
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200003c8 	.word	0x200003c8

08002588 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_Delay+0x40>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000010 	.word	0x20000010

080025cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b09a      	sub	sp, #104	; 0x68
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e169      	b.n	80028fc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d176      	bne.n	8002728 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d152      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fbd1 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d13b      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fdcf 	bl	8003214 <ADC_Disable>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d12f      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
 8002688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800268c:	2b00      	cmp	r3, #0
 800268e:	d12b      	bne.n	80026e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	f043 0202 	orr.w	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c4:	4b8f      	ldr	r3, [pc, #572]	; (8002904 <HAL_ADC_Init+0x2fc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a8f      	ldr	r2, [pc, #572]	; (8002908 <HAL_ADC_Init+0x300>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9a      	lsrs	r2, r3, #18
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026da:	e002      	b.n	80026e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d110      	bne.n	8002728 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0312 	bic.w	r3, r3, #18
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 80d6 	bne.w	80028e2 <HAL_ADC_Init+0x2da>
 8002736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80d1 	bne.w	80028e2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80c9 	bne.w	80028e2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_ADC_Init+0x304>)
 8002762:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <HAL_ADC_Init+0x180>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_ADC_Init+0x180>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_ADC_Init+0x182>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11c      	bne.n	80027c8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800278e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d010      	beq.n	80027b6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_Init+0x1a8>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_Init+0x1a8>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_Init+0x1aa>
 80027b0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e5b      	ldrb	r3, [r3, #25]
 80027cc:	035b      	lsls	r3, r3, #13
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d002      	beq.n	80027dc <HAL_ADC_Init+0x1d4>
 80027d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027da:	e000      	b.n	80027de <HAL_ADC_Init+0x1d6>
 80027dc:	2200      	movs	r2, #0
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ee:	4313      	orrs	r3, r2
 80027f0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d11b      	bne.n	8002834 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e5b      	ldrb	r3, [r3, #25]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	3b01      	subs	r3, #1
 800280a:	045a      	lsls	r2, r3, #17
 800280c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280e:	4313      	orrs	r3, r2
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	663b      	str	r3, [r7, #96]	; 0x60
 8002816:	e00d      	b.n	8002834 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4313      	orrs	r3, r2
 8002846:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002848:	4313      	orrs	r3, r2
 800284a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7e1b      	ldrb	r3, [r3, #24]
 8002872:	039a      	lsls	r2, r3, #14
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4313      	orrs	r3, r2
 800287e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002880:	4313      	orrs	r3, r2
 8002882:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_ADC_Init+0x308>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002894:	430b      	orrs	r3, r1
 8002896:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10c      	bne.n	80028ba <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f023 010f 	bic.w	r1, r3, #15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	1e5a      	subs	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
 80028b8:	e007      	b.n	80028ca <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020f 	bic.w	r2, r2, #15
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f023 0303 	bic.w	r3, r3, #3
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
 80028e0:	e00a      	b.n	80028f8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f023 0312 	bic.w	r3, r3, #18
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3768      	adds	r7, #104	; 0x68
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000008 	.word	0x20000008
 8002908:	431bde83 	.word	0x431bde83
 800290c:	50000300 	.word	0x50000300
 8002910:	fff0c007 	.word	0xfff0c007

08002914 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d17e      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_ADC_Start_DMA+0x2c>
 800293c:	2302      	movs	r3, #2
 800293e:	e07a      	b.n	8002a36 <HAL_ADC_Start_DMA+0x122>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fc05 	bl	8003158 <ADC_Enable>
 800294e:	4603      	mov	r3, r0
 8002950:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d166      	bne.n	8002a26 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f023 0206 	bic.w	r2, r3, #6
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_ADC_Start_DMA+0x12c>)
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_ADC_Start_DMA+0x130>)
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_ADC_Start_DMA+0x134>)
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	221c      	movs	r2, #28
 80029de:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0210 	orr.w	r2, r2, #16
 80029ee:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f001 fca2 	bl	8004358 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0204 	orr.w	r2, r2, #4
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a2e:	e001      	b.n	8002a34 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800308d 	.word	0x0800308d
 8002a44:	08003107 	.word	0x08003107
 8002a48:	08003123 	.word	0x08003123

08002a4c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e057      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0xcc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fbcf 	bl	8003214 <ADC_Disable>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d146      	bne.n	8002b0e <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002a94:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aaa:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aba:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002abc:	f7ff fd58 	bl	8002570 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ac2:	e014      	b.n	8002aee <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ac4:	f7ff fd54 	bl	8002570 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b0a      	cmp	r3, #10
 8002ad0:	d90d      	bls.n	8002aee <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f023 0312 	bic.w	r3, r3, #18
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e014      	b.n	8002b18 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002afc:	d0e2      	beq.n	8002ac4 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b09b      	sub	sp, #108	; 0x6c
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e299      	b.n	8003076 <HAL_ADC_ConfigChannel+0x556>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 827d 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d81c      	bhi.n	8002b9c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	461a      	mov	r2, r3
 8002b76:	231f      	movs	r3, #31
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	4019      	ands	r1, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9a:	e063      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d81e      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	3b1e      	subs	r3, #30
 8002bb8:	221f      	movs	r2, #31
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	4019      	ands	r1, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	3b1e      	subs	r3, #30
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
 8002be0:	e040      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b0e      	cmp	r3, #14
 8002be8:	d81e      	bhi.n	8002c28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	3b3c      	subs	r3, #60	; 0x3c
 8002bfe:	221f      	movs	r2, #31
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	3b3c      	subs	r3, #60	; 0x3c
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
 8002c26:	e01d      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	3b5a      	subs	r3, #90	; 0x5a
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4019      	ands	r1, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	3b5a      	subs	r3, #90	; 0x5a
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 80e5 	bne.w	8002e3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d91c      	bls.n	8002cb6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b1e      	subs	r3, #30
 8002c8e:	2207      	movs	r2, #7
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4019      	ands	r1, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b1e      	subs	r3, #30
 8002ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	e019      	b.n	8002cea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6959      	ldr	r1, [r3, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4019      	ands	r1, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6898      	ldr	r0, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d84f      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x28c>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002d47 	.word	0x08002d47
 8002d1c:	08002d69 	.word	0x08002d69
 8002d20:	08002d8b 	.word	0x08002d8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d2a:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <HAL_ADC_ConfigChannel+0x470>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	0691      	lsls	r1, r2, #26
 8002d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d36:	430a      	orrs	r2, r1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d42:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d44:	e07e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d4c:	4b90      	ldr	r3, [pc, #576]	; (8002f90 <HAL_ADC_ConfigChannel+0x470>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	0691      	lsls	r1, r2, #26
 8002d56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d64:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d66:	e06d      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d6e:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_ADC_ConfigChannel+0x470>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	0691      	lsls	r1, r2, #26
 8002d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d86:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d88:	e05c      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d90:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_ADC_ConfigChannel+0x470>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	0691      	lsls	r1, r2, #26
 8002d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002da8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002daa:	e04b      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e3c:	e001      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002e42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x344>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x344>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x346>
 8002e64:	2300      	movs	r3, #0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 80ff 	bne.w	800306a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d00f      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e92:	e049      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d91c      	bls.n	8002ef0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6999      	ldr	r1, [r3, #24]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b1b      	subs	r3, #27
 8002ec8:	2207      	movs	r2, #7
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	4019      	ands	r1, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6898      	ldr	r0, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b1b      	subs	r3, #27
 8002ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	e01b      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6959      	ldr	r1, [r3, #20]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	2207      	movs	r2, #7
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	4019      	ands	r1, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6898      	ldr	r0, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_ADC_ConfigChannel+0x474>)
 8002f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d014      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f44:	2b11      	cmp	r3, #17
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f58:	2b12      	cmp	r3, #18
 8002f5a:	f040 8086 	bne.w	800306a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d17f      	bne.n	800306a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d10d      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x478>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x478>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e005      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x47a>
 8002f8e:	bf00      	nop
 8002f90:	83fff000 	.word	0x83fff000
 8002f94:	50000300 	.word	0x50000300
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d150      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x4a0>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x4a0>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x4a2>
 8002fc0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d13c      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d11d      	bne.n	800300a <HAL_ADC_ConfigChannel+0x4ea>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd6:	d118      	bne.n	800300a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_ADC_ConfigChannel+0x564>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_ADC_ConfigChannel+0x568>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9a      	lsrs	r2, r3, #18
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003008:	e02e      	b.n	8003068 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b11      	cmp	r3, #17
 8003010:	d10b      	bne.n	800302a <HAL_ADC_ConfigChannel+0x50a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301a:	d106      	bne.n	800302a <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003026:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003028:	e01e      	b.n	8003068 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b12      	cmp	r3, #18
 8003030:	d11a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800303a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800303e:	e013      	b.n	8003068 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003052:	e00a      	b.n	800306a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003066:	e000      	b.n	800306a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003068:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003076:	4618      	mov	r0, r3
 8003078:	376c      	adds	r7, #108	; 0x6c
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000008 	.word	0x20000008
 8003088:	431bde83 	.word	0x431bde83

0800308c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d126      	bne.n	80030f4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d115      	bne.n	80030ec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d111      	bne.n	80030ec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fa6d 	bl	80025cc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030f2:	e004      	b.n	80030fe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fa63 	bl	80025e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff fa53 	bl	80025f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d108      	bne.n	8003184 <ADC_Enable+0x2c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <ADC_Enable+0x2c>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <ADC_Enable+0x2e>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d13c      	bne.n	8003204 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <ADC_Enable+0xb8>)
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e028      	b.n	8003206 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80031c4:	f7ff f9d4 	bl	8002570 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031ca:	e014      	b.n	80031f6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031cc:	f7ff f9d0 	bl	8002570 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d90d      	bls.n	80031f6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d1e3      	bne.n	80031cc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	8000003f 	.word	0x8000003f

08003214 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <ADC_Disable+0x2c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <ADC_Disable+0x2c>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <ADC_Disable+0x2e>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d040      	beq.n	80032c8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030d 	and.w	r3, r3, #13
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10f      	bne.n	8003274 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0202 	orr.w	r2, r2, #2
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2203      	movs	r2, #3
 800326a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800326c:	f7ff f980 	bl	8002570 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003272:	e022      	b.n	80032ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e01c      	b.n	80032ca <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003290:	f7ff f96e 	bl	8002570 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d90d      	bls.n	80032ba <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d0e3      	beq.n	8003290 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0ed      	b.n	80034c0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fe fdf1 	bl	8001ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0202 	bic.w	r2, r2, #2
 8003304:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003306:	f7ff f933 	bl	8002570 <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800330c:	e012      	b.n	8003334 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800330e:	f7ff f92f 	bl	8002570 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b0a      	cmp	r3, #10
 800331a:	d90b      	bls.n	8003334 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2205      	movs	r2, #5
 800332c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0c5      	b.n	80034c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e5      	bne.n	800330e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003352:	f7ff f90d 	bl	8002570 <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003358:	e012      	b.n	8003380 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800335a:	f7ff f909 	bl	8002570 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b0a      	cmp	r3, #10
 8003366:	d90b      	bls.n	8003380 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2205      	movs	r2, #5
 8003378:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e09f      	b.n	80034c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0e5      	beq.n	800335a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7e1b      	ldrb	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d108      	bne.n	80033a8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e007      	b.n	80033b8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7e5b      	ldrb	r3, [r3, #25]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d108      	bne.n	80033d2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e007      	b.n	80033e2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7e9b      	ldrb	r3, [r3, #26]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e007      	b.n	800340c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7edb      	ldrb	r3, [r3, #27]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d108      	bne.n	8003426 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0210 	bic.w	r2, r2, #16
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e007      	b.n	8003436 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0210 	orr.w	r2, r2, #16
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7f1b      	ldrb	r3, [r3, #28]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d108      	bne.n	8003450 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0208 	orr.w	r2, r2, #8
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e007      	b.n	8003460 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0208 	bic.w	r2, r2, #8
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7f5b      	ldrb	r3, [r3, #29]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d108      	bne.n	800347a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0204 	orr.w	r2, r2, #4
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e007      	b.n	800348a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0204 	bic.w	r2, r2, #4
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	ea42 0103 	orr.w	r1, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	1e5a      	subs	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <HAL_CAN_ConfigFilter+0x26>
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f040 80aa 	bne.w	8003642 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	401a      	ands	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d123      	bne.n	8003570 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800354a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3248      	adds	r2, #72	; 0x48
 8003550:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003564:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	3348      	adds	r3, #72	; 0x48
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d122      	bne.n	80035be <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	431a      	orrs	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003598:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3248      	adds	r2, #72	; 0x48
 800359e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035b4:	6979      	ldr	r1, [r7, #20]
 80035b6:	3348      	adds	r3, #72	; 0x48
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	401a      	ands	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035d8:	e007      	b.n	80035ea <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	401a      	ands	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003604:	e007      	b.n	8003616 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	431a      	orrs	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003634:	f023 0201 	bic.w	r2, r3, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e006      	b.n	8003650 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d12e      	bne.n	80036ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003688:	f7fe ff72 	bl	8002570 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800368e:	e012      	b.n	80036b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003690:	f7fe ff6e 	bl	8002570 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b0a      	cmp	r3, #10
 800369c:	d90b      	bls.n	80036b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2205      	movs	r2, #5
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e012      	b.n	80036dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e006      	b.n	80036dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d003      	beq.n	8003710 <HAL_CAN_AddTxMessage+0x2c>
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b02      	cmp	r3, #2
 800370c:	f040 80b8 	bne.w	8003880 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80a0 	beq.w	8003870 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	0e1b      	lsrs	r3, r3, #24
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d907      	bls.n	8003750 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e09e      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003750:	2201      	movs	r2, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	409a      	lsls	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	431a      	orrs	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3318      	adds	r3, #24
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	440b      	add	r3, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e00f      	b.n	800379e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003788:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003792:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3318      	adds	r3, #24
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	440b      	add	r3, r1
 800379c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3318      	adds	r3, #24
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	440b      	add	r3, r1
 80037ae:	3304      	adds	r3, #4
 80037b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	7d1b      	ldrb	r3, [r3, #20]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d111      	bne.n	80037de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3318      	adds	r3, #24
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4413      	add	r3, r2
 80037c6:	3304      	adds	r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6811      	ldr	r1, [r2, #0]
 80037ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3318      	adds	r3, #24
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	3304      	adds	r3, #4
 80037dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3307      	adds	r3, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	061a      	lsls	r2, r3, #24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3306      	adds	r3, #6
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3305      	adds	r3, #5
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	3204      	adds	r2, #4
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	4610      	mov	r0, r2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	ea43 0200 	orr.w	r2, r3, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	440b      	add	r3, r1
 8003810:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003814:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3303      	adds	r3, #3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3302      	adds	r3, #2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4610      	mov	r0, r2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	6811      	ldr	r1, [r2, #0]
 800383c:	ea43 0200 	orr.w	r2, r3, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	440b      	add	r3, r1
 8003846:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800384a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3318      	adds	r3, #24
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	3318      	adds	r3, #24
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	440b      	add	r3, r1
 800386a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e00e      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e006      	b.n	800388e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800389a:	b480      	push	{r7}
 800389c:	b087      	sub	sp, #28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <HAL_CAN_GetRxMessage+0x24>
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f040 80f3 	bne.w	8003aa4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0e7      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0d8      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	331b      	adds	r3, #27
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	4413      	add	r3, r2
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0204 	and.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	331b      	adds	r3, #27
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0d5b      	lsrs	r3, r3, #21
 800392e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00b      	b.n	8003950 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	331b      	adds	r3, #27
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	331b      	adds	r3, #27
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0202 	and.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	331b      	adds	r3, #27
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	331b      	adds	r3, #27
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	b2da      	uxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	331b      	adds	r3, #27
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0a1a      	lsrs	r2, r3, #8
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0c1a      	lsrs	r2, r3, #16
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3302      	adds	r3, #2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e1a      	lsrs	r2, r3, #24
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3303      	adds	r3, #3
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0a1a      	lsrs	r2, r3, #8
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	3305      	adds	r3, #5
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0c1a      	lsrs	r2, r3, #16
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	3306      	adds	r3, #6
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0e1a      	lsrs	r2, r3, #24
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3307      	adds	r3, #7
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0220 	orr.w	r2, r2, #32
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e007      	b.n	8003aa0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e006      	b.n	8003ab2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ace:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d002      	beq.n	8003adc <HAL_CAN_ActivateNotification+0x1e>
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d109      	bne.n	8003af0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e006      	b.n	8003afe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07c      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d023      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f97d 	bl	8003e6c <HAL_CAN_TxMailbox0CompleteCallback>
 8003b72:	e016      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e00c      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e002      	b.n	8003ba2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f983 	bl	8003ea8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d024      	beq.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f95d 	bl	8003e80 <HAL_CAN_TxMailbox1CompleteCallback>
 8003bc6:	e016      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e00c      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e002      	b.n	8003bf6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f963 	bl	8003ebc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d024      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f93d 	bl	8003e94 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c1a:	e016      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e00c      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	e002      	b.n	8003c4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f943 	bl	8003ed0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2208      	movs	r2, #8
 8003c88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f92a 	bl	8003ee4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd f839 	bl	8000d20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2208      	movs	r2, #8
 8003cec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f90c 	bl	8003f0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8f3 	bl	8003ef8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8f6 	bl	8003f20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8ef 	bl	8003f34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d075      	beq.n	8003e4c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06c      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d03d      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d038      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d017      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x302>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d804      	bhi.n	8003dea <HAL_CAN_IRQHandler+0x2e0>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d009      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x2ee>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d00c      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003de8:	e024      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003dea:	2b50      	cmp	r3, #80	; 0x50
 8003dec:	d018      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x316>
 8003dee:	2b60      	cmp	r3, #96	; 0x60
 8003df0:	d01b      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x320>
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d00f      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003df6:	e01d      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e00:	e018      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0310 	orr.w	r3, r3, #16
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e0a:	e013      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e14:	e00e      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e1e:	e009      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e28:	e004      	b.n	8003e34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f872 	bl	8003f48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e64:	bf00      	nop
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	60d3      	str	r3, [r2, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <__NVIC_GetPriorityGrouping+0x18>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 0307 	and.w	r3, r3, #7
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	db0b      	blt.n	8003fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f003 021f 	and.w	r2, r3, #31
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <__NVIC_EnableIRQ+0x38>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000e100 	.word	0xe000e100

08003ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db0a      	blt.n	8004026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	490c      	ldr	r1, [pc, #48]	; (8004048 <__NVIC_SetPriority+0x4c>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	0112      	lsls	r2, r2, #4
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	440b      	add	r3, r1
 8004020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004024:	e00a      	b.n	800403c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <__NVIC_SetPriority+0x50>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	3b04      	subs	r3, #4
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	440b      	add	r3, r1
 800403a:	761a      	strb	r2, [r3, #24]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f1c3 0307 	rsb	r3, r3, #7
 800406a:	2b04      	cmp	r3, #4
 800406c:	bf28      	it	cs
 800406e:	2304      	movcs	r3, #4
 8004070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3304      	adds	r3, #4
 8004076:	2b06      	cmp	r3, #6
 8004078:	d902      	bls.n	8004080 <NVIC_EncodePriority+0x30>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3b03      	subs	r3, #3
 800407e:	e000      	b.n	8004082 <NVIC_EncodePriority+0x32>
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	f04f 32ff 	mov.w	r2, #4294967295
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	401a      	ands	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004098:	f04f 31ff 	mov.w	r1, #4294967295
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	43d9      	mvns	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a8:	4313      	orrs	r3, r2
         );
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c8:	d301      	bcc.n	80040ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00f      	b.n	80040ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <SysTick_Config+0x40>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d6:	210f      	movs	r1, #15
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	f7ff ff8e 	bl	8003ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <SysTick_Config+0x40>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <SysTick_Config+0x40>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	e000e010 	.word	0xe000e010

080040fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff29 	bl	8003f5c <__NVIC_SetPriorityGrouping>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004124:	f7ff ff3e 	bl	8003fa4 <__NVIC_GetPriorityGrouping>
 8004128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7ff ff8e 	bl	8004050 <NVIC_EncodePriority>
 8004134:	4602      	mov	r2, r0
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff5d 	bl	8003ffc <__NVIC_SetPriority>
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff31 	bl	8003fc0 <__NVIC_EnableIRQ>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffa2 	bl	80040b8 <SysTick_Config>
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e014      	b.n	80041ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fd fee5 	bl	8001f70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	795b      	ldrb	r3, [r3, #5]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_DAC_Start+0x16>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e025      	b.n	8004224 <HAL_DAC_Start+0x62>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	409a      	lsls	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004202:	2b3c      	cmp	r3, #60	; 0x3c
 8004204:	d107      	bne.n	8004216 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	795b      	ldrb	r3, [r3, #5]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_DAC_ConfigChannel+0x20>
 800424c:	2302      	movs	r3, #2
 800424e:	e036      	b.n	80042be <HAL_DAC_ConfigChannel+0x8e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004264:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4013      	ands	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	22c0      	movs	r2, #192	; 0xc0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	400a      	ands	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e037      	b.n	8004350 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f89e 	bl	8004474 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}  
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_DMA_Start_IT+0x20>
 8004374:	2302      	movs	r3, #2
 8004376:	e04a      	b.n	800440e <HAL_DMA_Start_IT+0xb6>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004386:	2b01      	cmp	r3, #1
 8004388:	d13a      	bne.n	8004400 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f831 	bl	8004416 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 020e 	orr.w	r2, r2, #14
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e00f      	b.n	80043ee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 020a 	orr.w	r2, r2, #10
 80043dc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e005      	b.n	800440c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800440c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b10      	cmp	r3, #16
 8004442:	d108      	bne.n	8004456 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004454:	e007      	b.n	8004466 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <DMA_CalcBaseAndBitshift+0x34>)
 8004484:	4413      	add	r3, r2
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <DMA_CalcBaseAndBitshift+0x38>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	bffdfff8 	.word	0xbffdfff8
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020000 	.word	0x40020000

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c2:	e14e      	b.n	8004762 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8140 	beq.w	800475c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d00b      	beq.n	80044fc <HAL_GPIO_Init+0x48>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d007      	beq.n	80044fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044f0:	2b11      	cmp	r3, #17
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b12      	cmp	r3, #18
 80044fa:	d130      	bne.n	800455e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	2203      	movs	r2, #3
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4013      	ands	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004532:	2201      	movs	r2, #1
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0201 	and.w	r2, r3, #1
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0xea>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b12      	cmp	r3, #18
 800459c:	d123      	bne.n	80045e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	08da      	lsrs	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3208      	adds	r2, #8
 80045a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	08da      	lsrs	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3208      	adds	r2, #8
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 809a 	beq.w	800475c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004628:	4b55      	ldr	r3, [pc, #340]	; (8004780 <HAL_GPIO_Init+0x2cc>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4a54      	ldr	r2, [pc, #336]	; (8004780 <HAL_GPIO_Init+0x2cc>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6193      	str	r3, [r2, #24]
 8004634:	4b52      	ldr	r3, [pc, #328]	; (8004780 <HAL_GPIO_Init+0x2cc>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004640:	4a50      	ldr	r2, [pc, #320]	; (8004784 <HAL_GPIO_Init+0x2d0>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	220f      	movs	r2, #15
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800466a:	d013      	beq.n	8004694 <HAL_GPIO_Init+0x1e0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a46      	ldr	r2, [pc, #280]	; (8004788 <HAL_GPIO_Init+0x2d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00d      	beq.n	8004690 <HAL_GPIO_Init+0x1dc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a45      	ldr	r2, [pc, #276]	; (800478c <HAL_GPIO_Init+0x2d8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <HAL_GPIO_Init+0x1d8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a44      	ldr	r2, [pc, #272]	; (8004790 <HAL_GPIO_Init+0x2dc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_GPIO_Init+0x1d4>
 8004684:	2303      	movs	r3, #3
 8004686:	e006      	b.n	8004696 <HAL_GPIO_Init+0x1e2>
 8004688:	2305      	movs	r3, #5
 800468a:	e004      	b.n	8004696 <HAL_GPIO_Init+0x1e2>
 800468c:	2302      	movs	r3, #2
 800468e:	e002      	b.n	8004696 <HAL_GPIO_Init+0x1e2>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_GPIO_Init+0x1e2>
 8004694:	2300      	movs	r3, #0
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	f002 0203 	and.w	r2, r2, #3
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	4093      	lsls	r3, r2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046a6:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_GPIO_Init+0x2d0>)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b4:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80046d8:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046de:	4b2d      	ldr	r3, [pc, #180]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004702:	4a24      	ldr	r2, [pc, #144]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004756:	4a0f      	ldr	r2, [pc, #60]	; (8004794 <HAL_GPIO_Init+0x2e0>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f aea9 	bne.w	80044c4 <HAL_GPIO_Init+0x10>
  }
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	40010000 	.word	0x40010000
 8004788:	48000400 	.word	0x48000400
 800478c:	48000800 	.word	0x48000800
 8004790:	48000c00 	.word	0x48000c00
 8004794:	40010400 	.word	0x40010400

08004798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e001      	b.n	80047ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
 80047d4:	4613      	mov	r3, r2
 80047d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047d8:	787b      	ldrb	r3, [r7, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047e4:	e002      	b.n	80047ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e081      	b.n	800490e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fbe4 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e006      	b.n	8004880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800487e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d104      	bne.n	8004892 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	ea42 0103 	orr.w	r1, r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d138      	bne.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004936:	2302      	movs	r3, #2
 8004938:	e032      	b.n	80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	; 0x24
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004968:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d139      	bne.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e033      	b.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	; 0x24
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f000 bef4 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 816a 	beq.w	8004d42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a6e:	4bb3      	ldr	r3, [pc, #716]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a7a:	4bb0      	ldr	r3, [pc, #704]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d159      	bne.n	8004b3a <HAL_RCC_OscConfig+0xf6>
 8004a86:	4bad      	ldr	r3, [pc, #692]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d152      	bne.n	8004b3a <HAL_RCC_OscConfig+0xf6>
 8004a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aa8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x82>
 8004ac0:	4b9e      	ldr	r3, [pc, #632]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0xae>
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ade:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ae2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004aee:	4b93      	ldr	r3, [pc, #588]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004af6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004afa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004afe:	fa92 f2a2 	rbit	r2, r2
 8004b02:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004b06:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004b0a:	fab2 f282 	clz	r2, r2
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f002 021f 	and.w	r2, r2, #31
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 810c 	beq.w	8004d40 <HAL_RCC_OscConfig+0x2fc>
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 8106 	bne.w	8004d40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f000 be86 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x110>
 8004b46:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7c      	ldr	r2, [pc, #496]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e030      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x134>
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a76      	ldr	r2, [pc, #472]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a73      	ldr	r2, [pc, #460]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01e      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCC_OscConfig+0x15a>
 8004b84:	4b6d      	ldr	r3, [pc, #436]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6c      	ldr	r2, [pc, #432]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a69      	ldr	r2, [pc, #420]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b9e:	4b67      	ldr	r3, [pc, #412]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a66      	ldr	r2, [pc, #408]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b64      	ldr	r3, [pc, #400]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a63      	ldr	r2, [pc, #396]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bb6:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f023 020f 	bic.w	r2, r3, #15
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	495d      	ldr	r1, [pc, #372]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d059      	beq.n	8004c88 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fd fccc 	bl	8002570 <HAL_GetTick>
 8004bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bde:	f7fd fcc7 	bl	8002570 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d902      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	f000 be29 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
 8004bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004c08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_OscConfig+0x1e2>
 8004c20:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x20e>
 8004c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c2a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c3e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c46:	fa93 f3a3 	rbit	r3, r3
 8004c4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c56:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c5a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c5e:	fa92 f2a2 	rbit	r2, r2
 8004c62:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c66:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c6a:	fab2 f282 	clz	r2, r2
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	f042 0220 	orr.w	r2, r2, #32
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	f002 021f 	and.w	r2, r2, #31
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ab      	beq.n	8004bde <HAL_RCC_OscConfig+0x19a>
 8004c86:	e05c      	b.n	8004d42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd fc72 	bl	8002570 <HAL_GetTick>
 8004c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c92:	f7fd fc6d 	bl	8002570 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d902      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	f000 bdcf 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
 8004ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004cbc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <HAL_RCC_OscConfig+0x296>
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x2c2>
 8004cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cde:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cf6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004d02:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <HAL_RCC_OscConfig+0x2f8>)
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004d0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d12:	fa92 f2a2 	rbit	r2, r2
 8004d16:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004d1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d1e:	fab2 f282 	clz	r2, r2
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f042 0220 	orr.w	r2, r2, #32
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	f002 021f 	and.w	r2, r2, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ab      	bne.n	8004c92 <HAL_RCC_OscConfig+0x24e>
 8004d3a:	e002      	b.n	8004d42 <HAL_RCC_OscConfig+0x2fe>
 8004d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	1d3b      	adds	r3, r7, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 816f 	beq.w	8005030 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d52:	4bd0      	ldr	r3, [pc, #832]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d5e:	4bcd      	ldr	r3, [pc, #820]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d16c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x400>
 8004d6a:	4bca      	ldr	r3, [pc, #808]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d166      	bne.n	8004e44 <HAL_RCC_OscConfig+0x400>
 8004d76:	2302      	movs	r3, #2
 8004d78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_OscConfig+0x362>
 8004da0:	4bbc      	ldr	r3, [pc, #752]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e013      	b.n	8004dce <HAL_RCC_OscConfig+0x38a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004dca:	4bb2      	ldr	r3, [pc, #712]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004dd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dd8:	fa92 f2a2 	rbit	r2, r2
 8004ddc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004de0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f042 0220 	orr.w	r2, r2, #32
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f002 021f 	and.w	r2, r2, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_RCC_OscConfig+0x3cc>
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d002      	beq.n	8004e10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f000 bd1b 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e10:	4ba0      	ldr	r3, [pc, #640]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	21f8      	movs	r1, #248	; 0xf8
 8004e20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e28:	fa91 f1a1 	rbit	r1, r1
 8004e2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e34:	fab1 f181 	clz	r1, r1
 8004e38:	b2c9      	uxtb	r1, r1
 8004e3a:	408b      	lsls	r3, r1
 8004e3c:	4995      	ldr	r1, [pc, #596]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e0f5      	b.n	8005030 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	1d3b      	adds	r3, r7, #4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8085 	beq.w	8004f5a <HAL_RCC_OscConfig+0x516>
 8004e50:	2301      	movs	r3, #1
 8004e52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	461a      	mov	r2, r3
 8004e78:	2301      	movs	r3, #1
 8004e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fb78 	bl	8002570 <HAL_GetTick>
 8004e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fd fb73 	bl	8002570 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	f000 bcd5 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004eae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_RCC_OscConfig+0x488>
 8004ec6:	4b73      	ldr	r3, [pc, #460]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e013      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4b0>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ee4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004efa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004efe:	fa92 f2a2 	rbit	r2, r2
 8004f02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f0a:	fab2 f282 	clz	r2, r2
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	f042 0220 	orr.w	r2, r2, #32
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	f002 021f 	and.w	r2, r2, #31
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0af      	beq.n	8004e86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	21f8      	movs	r1, #248	; 0xf8
 8004f36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f3e:	fa91 f1a1 	rbit	r1, r1
 8004f42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f4a:	fab1 f181 	clz	r1, r1
 8004f4e:	b2c9      	uxtb	r1, r1
 8004f50:	408b      	lsls	r3, r1
 8004f52:	4950      	ldr	r1, [pc, #320]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
 8004f58:	e06a      	b.n	8005030 <HAL_RCC_OscConfig+0x5ec>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	461a      	mov	r2, r3
 8004f82:	2300      	movs	r3, #0
 8004f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fd faf3 	bl	8002570 <HAL_GetTick>
 8004f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f90:	f7fd faee 	bl	8002570 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d902      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	f000 bc50 	b.w	8005846 <HAL_RCC_OscConfig+0xe02>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x592>
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	e013      	b.n	8004ffe <HAL_RCC_OscConfig+0x5ba>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fe0:	fa93 f3a3 	rbit	r3, r3
 8004fe4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ffa:	4b26      	ldr	r3, [pc, #152]	; (8005094 <HAL_RCC_OscConfig+0x650>)
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2202      	movs	r2, #2
 8005000:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005004:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005008:	fa92 f2a2 	rbit	r2, r2
 800500c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005010:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005014:	fab2 f282 	clz	r2, r2
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	f042 0220 	orr.w	r2, r2, #32
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	f002 021f 	and.w	r2, r2, #31
 8005024:	2101      	movs	r1, #1
 8005026:	fa01 f202 	lsl.w	r2, r1, r2
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1af      	bne.n	8004f90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80da 	beq.w	80051f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d069      	beq.n	800511e <HAL_RCC_OscConfig+0x6da>
 800504a:	2301      	movs	r3, #1
 800504c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800505c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005060:	fab3 f383 	clz	r3, r3
 8005064:	b2db      	uxtb	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x654>)
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	461a      	mov	r2, r3
 8005070:	2301      	movs	r3, #1
 8005072:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fd fa7c 	bl	8002570 <HAL_GetTick>
 8005078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507c:	e00e      	b.n	800509c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800507e:	f7fd fa77 	bl	8002570 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d906      	bls.n	800509c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e3d9      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	10908120 	.word	0x10908120
 800509c:	2302      	movs	r3, #2
 800509e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80050b2:	2202      	movs	r2, #2
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	fa93 f2a3 	rbit	r2, r3
 80050c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050ca:	2202      	movs	r2, #2
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	fa93 f2a3 	rbit	r2, r3
 80050d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80050dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	4ba5      	ldr	r3, [pc, #660]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050e6:	2102      	movs	r1, #2
 80050e8:	6019      	str	r1, [r3, #0]
 80050ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fa93 f1a3 	rbit	r1, r3
 80050f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050f8:	6019      	str	r1, [r3, #0]
  return result;
 80050fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0b0      	beq.n	800507e <HAL_RCC_OscConfig+0x63a>
 800511c:	e06a      	b.n	80051f4 <HAL_RCC_OscConfig+0x7b0>
 800511e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fa93 f2a3 	rbit	r2, r3
 8005130:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005134:	601a      	str	r2, [r3, #0]
  return result;
 8005136:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800513a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	4b8c      	ldr	r3, [pc, #560]	; (8005378 <HAL_RCC_OscConfig+0x934>)
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005150:	f7fd fa0e 	bl	8002570 <HAL_GetTick>
 8005154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	e009      	b.n	800516e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515a:	f7fd fa09 	bl	8002570 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e36b      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 800516e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f2a3 	rbit	r2, r3
 8005180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800518a:	2202      	movs	r2, #2
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	fa93 f2a3 	rbit	r2, r3
 8005198:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80051a2:	2202      	movs	r2, #2
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	fa93 f2a3 	rbit	r2, r3
 80051b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b6:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80051b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051be:	2102      	movs	r1, #2
 80051c0:	6019      	str	r1, [r3, #0]
 80051c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f1a3 	rbit	r1, r3
 80051cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051d0:	6019      	str	r1, [r3, #0]
  return result;
 80051d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fab3 f383 	clz	r3, r3
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	2101      	movs	r1, #1
 80051ea:	fa01 f303 	lsl.w	r3, r1, r3
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1b2      	bne.n	800515a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8158 	beq.w	80054b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520a:	4b5a      	ldr	r3, [pc, #360]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d112      	bne.n	800523c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	4b57      	ldr	r3, [pc, #348]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4a56      	ldr	r2, [pc, #344]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 800521c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005220:	61d3      	str	r3, [r2, #28]
 8005222:	4b54      	ldr	r3, [pc, #336]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f107 0308 	add.w	r3, r7, #8
 8005234:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	4b4f      	ldr	r3, [pc, #316]	; (800537c <HAL_RCC_OscConfig+0x938>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005248:	4b4c      	ldr	r3, [pc, #304]	; (800537c <HAL_RCC_OscConfig+0x938>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a4b      	ldr	r2, [pc, #300]	; (800537c <HAL_RCC_OscConfig+0x938>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005254:	f7fd f98c 	bl	8002570 <HAL_GetTick>
 8005258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	e009      	b.n	8005272 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525e:	f7fd f987 	bl	8002570 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	; 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e2e9      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	4b42      	ldr	r3, [pc, #264]	; (800537c <HAL_RCC_OscConfig+0x938>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ef      	beq.n	800525e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <HAL_RCC_OscConfig+0x852>
 8005288:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4a39      	ldr	r2, [pc, #228]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6213      	str	r3, [r2, #32]
 8005294:	e02f      	b.n	80052f6 <HAL_RCC_OscConfig+0x8b2>
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10c      	bne.n	80052ba <HAL_RCC_OscConfig+0x876>
 80052a0:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4a33      	ldr	r2, [pc, #204]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6213      	str	r3, [r2, #32]
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6213      	str	r3, [r2, #32]
 80052b8:	e01d      	b.n	80052f6 <HAL_RCC_OscConfig+0x8b2>
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_OscConfig+0x89a>
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	6213      	str	r3, [r2, #32]
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	e00b      	b.n	80052f6 <HAL_RCC_OscConfig+0x8b2>
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a24      	ldr	r2, [pc, #144]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6213      	str	r3, [r2, #32]
 80052ea:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f6:	1d3b      	adds	r3, r7, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d06b      	beq.n	80053d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005300:	f7fd f936 	bl	8002570 <HAL_GetTick>
 8005304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005308:	e00b      	b.n	8005322 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fd f931 	bl	8002570 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e291      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 8005322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005326:	2202      	movs	r2, #2
 8005328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	fa93 f2a3 	rbit	r2, r3
 8005334:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800533e:	2202      	movs	r2, #2
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	fa93 f2a3 	rbit	r2, r3
 800534c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005350:	601a      	str	r2, [r3, #0]
  return result;
 8005352:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005356:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d109      	bne.n	8005380 <HAL_RCC_OscConfig+0x93c>
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <HAL_RCC_OscConfig+0x930>)
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	e014      	b.n	800539c <HAL_RCC_OscConfig+0x958>
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
 8005378:	10908120 	.word	0x10908120
 800537c:	40007000 	.word	0x40007000
 8005380:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005384:	2202      	movs	r2, #2
 8005386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	fa93 f2a3 	rbit	r2, r3
 8005392:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	4bbb      	ldr	r3, [pc, #748]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80053a0:	2102      	movs	r1, #2
 80053a2:	6011      	str	r1, [r2, #0]
 80053a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	fa92 f1a2 	rbit	r1, r2
 80053ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80053b2:	6011      	str	r1, [r2, #0]
  return result;
 80053b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	fab2 f282 	clz	r2, r2
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	f002 021f 	and.w	r2, r2, #31
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f202 	lsl.w	r2, r1, r2
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d099      	beq.n	800530a <HAL_RCC_OscConfig+0x8c6>
 80053d6:	e063      	b.n	80054a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d8:	f7fd f8ca 	bl	8002570 <HAL_GetTick>
 80053dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e0:	e00b      	b.n	80053fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fd f8c5 	bl	8002570 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e225      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 80053fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053fe:	2202      	movs	r2, #2
 8005400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	fa93 f2a3 	rbit	r2, r3
 800540c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005416:	2202      	movs	r2, #2
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	fa93 f2a3 	rbit	r2, r3
 8005424:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005428:	601a      	str	r2, [r3, #0]
  return result;
 800542a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800542e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f043 0302 	orr.w	r3, r3, #2
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d102      	bne.n	800544a <HAL_RCC_OscConfig+0xa06>
 8005444:	4b90      	ldr	r3, [pc, #576]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	e00d      	b.n	8005466 <HAL_RCC_OscConfig+0xa22>
 800544a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800544e:	2202      	movs	r2, #2
 8005450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fa93 f2a3 	rbit	r2, r3
 800545c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	4b89      	ldr	r3, [pc, #548]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800546a:	2102      	movs	r1, #2
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	fa92 f1a2 	rbit	r1, r2
 8005478:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800547c:	6011      	str	r1, [r2, #0]
  return result;
 800547e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	fab2 f282 	clz	r2, r2
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	f002 021f 	and.w	r2, r2, #31
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f202 	lsl.w	r2, r1, r2
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1a0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d105      	bne.n	80054b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a8:	4b77      	ldr	r3, [pc, #476]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4a76      	ldr	r2, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 81c2 	beq.w	8005844 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c0:	4b71      	ldr	r3, [pc, #452]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	f000 819c 	beq.w	8005806 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f040 8114 	bne.w	8005702 <HAL_RCC_OscConfig+0xcbe>
 80054da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054f2:	601a      	str	r2, [r3, #0]
  return result;
 80054f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	461a      	mov	r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fd f82e 	bl	8002570 <HAL_GetTick>
 8005514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005518:	e009      	b.n	800552e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800551a:	f7fd f829 	bl	8002570 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e18b      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 800552e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	fa93 f2a3 	rbit	r2, r3
 8005542:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005546:	601a      	str	r2, [r3, #0]
  return result;
 8005548:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800554c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <HAL_RCC_OscConfig+0xb24>
 8005562:	4b49      	ldr	r3, [pc, #292]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	e01b      	b.n	80055a0 <HAL_RCC_OscConfig+0xb5c>
 8005568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800556c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	fa93 f2a3 	rbit	r2, r3
 800557c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	fa93 f2a3 	rbit	r2, r3
 8005596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	fa92 f1a2 	rbit	r1, r2
 80055b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055b8:	6011      	str	r1, [r2, #0]
  return result;
 80055ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	fab2 f282 	clz	r2, r2
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	f042 0220 	orr.w	r2, r2, #32
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	f002 021f 	and.w	r2, r2, #31
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f202 	lsl.w	r2, r1, r2
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d19e      	bne.n	800551a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	430b      	orrs	r3, r1
 80055f2:	4925      	ldr	r1, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f2a3 	rbit	r2, r3
 800560c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005610:	601a      	str	r2, [r3, #0]
  return result;
 8005612:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005616:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005622:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	461a      	mov	r2, r3
 800562a:	2301      	movs	r3, #1
 800562c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562e:	f7fc ff9f 	bl	8002570 <HAL_GetTick>
 8005632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005636:	e009      	b.n	800564c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc ff9a 	bl	8002570 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0fc      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 800564c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	fa93 f2a3 	rbit	r2, r3
 8005660:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005664:	601a      	str	r2, [r3, #0]
  return result;
 8005666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800566a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCC_OscConfig+0xc48>
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	e01e      	b.n	80056c4 <HAL_RCC_OscConfig+0xc80>
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	fa93 f2a3 	rbit	r2, r3
 80056a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	fa93 f2a3 	rbit	r2, r3
 80056ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	4b63      	ldr	r3, [pc, #396]	; (8005850 <HAL_RCC_OscConfig+0xe0c>)
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	fa92 f1a2 	rbit	r1, r2
 80056d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056dc:	6011      	str	r1, [r2, #0]
  return result;
 80056de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	fab2 f282 	clz	r2, r2
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f042 0220 	orr.w	r2, r2, #32
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	f002 021f 	and.w	r2, r2, #31
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d09b      	beq.n	8005638 <HAL_RCC_OscConfig+0xbf4>
 8005700:	e0a0      	b.n	8005844 <HAL_RCC_OscConfig+0xe00>
 8005702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800570a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	fa93 f2a3 	rbit	r2, r3
 8005716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800571a:	601a      	str	r2, [r3, #0]
  return result;
 800571c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005720:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800572c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fc ff1a 	bl	8002570 <HAL_GetTick>
 800573c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005740:	e009      	b.n	8005756 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005742:	f7fc ff15 	bl	8002570 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e077      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
 8005756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800575e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	fa93 f2a3 	rbit	r2, r3
 800576a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576e:	601a      	str	r2, [r3, #0]
  return result;
 8005770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0xd4c>
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_RCC_OscConfig+0xe0c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	e01b      	b.n	80057c8 <HAL_RCC_OscConfig+0xd84>
 8005790:	f107 0320 	add.w	r3, r7, #32
 8005794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	f107 0320 	add.w	r3, r7, #32
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	fa93 f2a3 	rbit	r2, r3
 80057a4:	f107 031c 	add.w	r3, r7, #28
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f107 0318 	add.w	r3, r7, #24
 80057ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f107 0318 	add.w	r3, r7, #24
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	fa93 f2a3 	rbit	r2, r3
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	4b22      	ldr	r3, [pc, #136]	; (8005850 <HAL_RCC_OscConfig+0xe0c>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f107 0210 	add.w	r2, r7, #16
 80057cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057d0:	6011      	str	r1, [r2, #0]
 80057d2:	f107 0210 	add.w	r2, r7, #16
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	fa92 f1a2 	rbit	r1, r2
 80057dc:	f107 020c 	add.w	r2, r7, #12
 80057e0:	6011      	str	r1, [r2, #0]
  return result;
 80057e2:	f107 020c 	add.w	r2, r7, #12
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	fab2 f282 	clz	r2, r2
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f042 0220 	orr.w	r2, r2, #32
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	f002 021f 	and.w	r2, r2, #31
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f202 	lsl.w	r2, r1, r2
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d19e      	bne.n	8005742 <HAL_RCC_OscConfig+0xcfe>
 8005804:	e01e      	b.n	8005844 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e018      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_RCC_OscConfig+0xe0c>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800581c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	429a      	cmp	r2, r3
 800582c:	d108      	bne.n	8005840 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800582e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000

08005854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b09e      	sub	sp, #120	; 0x78
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e162      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b90      	ldr	r3, [pc, #576]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d910      	bls.n	800589c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b8d      	ldr	r3, [pc, #564]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	498b      	ldr	r1, [pc, #556]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b89      	ldr	r3, [pc, #548]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e14a      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a8:	4b82      	ldr	r3, [pc, #520]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	497f      	ldr	r1, [pc, #508]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80dc 	beq.w	8005a80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d13c      	bne.n	800594a <HAL_RCC_ClockConfig+0xf6>
 80058d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d8:	fa93 f3a3 	rbit	r3, r3
 80058dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d102      	bne.n	80058fa <HAL_RCC_ClockConfig+0xa6>
 80058f4:	4b6f      	ldr	r3, [pc, #444]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	e00f      	b.n	800591a <HAL_RCC_ClockConfig+0xc6>
 80058fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	667b      	str	r3, [r7, #100]	; 0x64
 8005908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800590c:	663b      	str	r3, [r7, #96]	; 0x60
 800590e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005916:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800591e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005922:	fa92 f2a2 	rbit	r2, r2
 8005926:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800592a:	fab2 f282 	clz	r2, r2
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	f042 0220 	orr.w	r2, r2, #32
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	f002 021f 	and.w	r2, r2, #31
 800593a:	2101      	movs	r1, #1
 800593c:	fa01 f202 	lsl.w	r2, r1, r2
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d17b      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e0f3      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d13c      	bne.n	80059cc <HAL_RCC_ClockConfig+0x178>
 8005952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d102      	bne.n	800597c <HAL_RCC_ClockConfig+0x128>
 8005976:	4b4f      	ldr	r3, [pc, #316]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	e00f      	b.n	800599c <HAL_RCC_ClockConfig+0x148>
 800597c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005980:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005984:	fa93 f3a3 	rbit	r3, r3
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
 800598a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800598e:	643b      	str	r3, [r7, #64]	; 0x40
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	fa93 f3a3 	rbit	r3, r3
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	4b46      	ldr	r3, [pc, #280]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80059a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a4:	fa92 f2a2 	rbit	r2, r2
 80059a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80059aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ac:	fab2 f282 	clz	r2, r2
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	f042 0220 	orr.w	r2, r2, #32
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	f002 021f 	and.w	r2, r2, #31
 80059bc:	2101      	movs	r1, #1
 80059be:	fa01 f202 	lsl.w	r2, r1, r2
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d13a      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0b2      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
 80059cc:	2302      	movs	r3, #2
 80059ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d102      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x1a0>
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	e00d      	b.n	8005a10 <HAL_RCC_ClockConfig+0x1bc>
 80059f4:	2302      	movs	r3, #2
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	2302      	movs	r3, #2
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	fa93 f3a3 	rbit	r3, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2202      	movs	r2, #2
 8005a12:	61ba      	str	r2, [r7, #24]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	fa92 f2a2 	rbit	r2, r2
 8005a1a:	617a      	str	r2, [r7, #20]
  return result;
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	fab2 f282 	clz	r2, r2
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	f042 0220 	orr.w	r2, r2, #32
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	f002 021f 	and.w	r2, r2, #31
 8005a2e:	2101      	movs	r1, #1
 8005a30:	fa01 f202 	lsl.w	r2, r1, r2
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e079      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f023 0203 	bic.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	491a      	ldr	r1, [pc, #104]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fc fd8e 	bl	8002570 <HAL_GetTick>
 8005a54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a58:	f7fc fd8a 	bl	8002570 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e061      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <HAL_RCC_ClockConfig+0x260>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 020c 	and.w	r2, r3, #12
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1eb      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d214      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f023 0207 	bic.w	r2, r3, #7
 8005a96:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_RCC_ClockConfig+0x25c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e040      	b.n	8005b32 <HAL_RCC_ClockConfig+0x2de>
 8005ab0:	40022000 	.word	0x40022000
 8005ab4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <HAL_RCC_ClockConfig+0x2e8>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	491a      	ldr	r1, [pc, #104]	; (8005b3c <HAL_RCC_ClockConfig+0x2e8>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_RCC_ClockConfig+0x2e8>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4912      	ldr	r1, [pc, #72]	; (8005b3c <HAL_RCC_ClockConfig+0x2e8>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005af6:	f000 f829 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 8005afa:	4601      	mov	r1, r0
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <HAL_RCC_ClockConfig+0x2e8>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b04:	22f0      	movs	r2, #240	; 0xf0
 8005b06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	fa92 f2a2 	rbit	r2, r2
 8005b0e:	60fa      	str	r2, [r7, #12]
  return result;
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	fab2 f282 	clz	r2, r2
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	40d3      	lsrs	r3, r2
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x2ec>)
 8005b1c:	5cd3      	ldrb	r3, [r2, r3]
 8005b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b22:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <HAL_RCC_ClockConfig+0x2f0>)
 8005b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <HAL_RCC_ClockConfig+0x2f4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fc fcdc 	bl	80024e8 <HAL_InitTick>
  
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3778      	adds	r7, #120	; 0x78
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	08007654 	.word	0x08007654
 8005b44:	20000008 	.word	0x20000008
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b08b      	sub	sp, #44	; 0x2c
 8005b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x30>
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x36>
 8005b7a:	e03c      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b7c:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b7e:	623b      	str	r3, [r7, #32]
      break;
 8005b80:	e03c      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	fa92 f2a2 	rbit	r2, r2
 8005b94:	607a      	str	r2, [r7, #4]
  return result;
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	fab2 f282 	clz	r2, r2
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	40d3      	lsrs	r3, r2
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	220f      	movs	r2, #15
 8005bb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	fa92 f2a2 	rbit	r2, r2
 8005bb8:	60fa      	str	r2, [r7, #12]
  return result;
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	fab2 f282 	clz	r2, r2
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	40d3      	lsrs	r3, r2
 8005bc4:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bc6:	5cd3      	ldrb	r3, [r2, r3]
 8005bc8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	e004      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	623b      	str	r3, [r7, #32]
      break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bf8:	623b      	str	r3, [r7, #32]
      break;
 8005bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	372c      	adds	r7, #44	; 0x2c
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	007a1200 	.word	0x007a1200
 8005c14:	0800766c 	.word	0x0800766c
 8005c18:	0800767c 	.word	0x0800767c
 8005c1c:	003d0900 	.word	0x003d0900

08005c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c24:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c26:	681b      	ldr	r3, [r3, #0]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000008 	.word	0x20000008

08005c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c3e:	f7ff ffef 	bl	8005c20 <HAL_RCC_GetHCLKFreq>
 8005c42:	4601      	mov	r1, r0
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	fa92 f2a2 	rbit	r2, r2
 8005c58:	603a      	str	r2, [r7, #0]
  return result;
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	fab2 f282 	clz	r2, r2
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	40d3      	lsrs	r3, r2
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	08007664 	.word	0x08007664

08005c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c82:	f7ff ffcd 	bl	8005c20 <HAL_RCC_GetHCLKFreq>
 8005c86:	4601      	mov	r1, r0
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	fa92 f2a2 	rbit	r2, r2
 8005c9c:	603a      	str	r2, [r7, #0]
  return result;
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	fab2 f282 	clz	r2, r2
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	40d3      	lsrs	r3, r2
 8005ca8:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8005caa:	5cd3      	ldrb	r3, [r2, r3]
 8005cac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	08007664 	.word	0x08007664

08005cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b092      	sub	sp, #72	; 0x48
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80d4 	beq.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce4:	4b4e      	ldr	r3, [pc, #312]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10e      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf0:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4a4a      	ldr	r2, [pc, #296]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	61d3      	str	r3, [r2, #28]
 8005cfc:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0e:	4b45      	ldr	r3, [pc, #276]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d118      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1a:	4b42      	ldr	r3, [pc, #264]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a41      	ldr	r2, [pc, #260]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d26:	f7fc fc23 	bl	8002570 <HAL_GetTick>
 8005d2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	e008      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fc fc1f 	bl	8002570 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	; 0x64
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e14b      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d40:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d4c:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8084 	beq.w	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d07c      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6c:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	fa93 f3a3 	rbit	r3, r3
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	461a      	mov	r2, r3
 8005d96:	2301      	movs	r3, #1
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	fa93 f3a3 	rbit	r3, r3
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005daa:	fab3 f383 	clz	r3, r3
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	461a      	mov	r2, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04b      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dce:	f7fc fbcf 	bl	8002570 <HAL_GetTick>
 8005dd2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd4:	e00a      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd6:	f7fc fbcb 	bl	8002570 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0f5      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005dec:	2302      	movs	r3, #2
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
 8005df8:	2302      	movs	r3, #2
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	fa93 f3a3 	rbit	r3, r3
 8005e02:	61fb      	str	r3, [r7, #28]
  return result;
 8005e04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e06:	fab3 f383 	clz	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d108      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e1a:	4b01      	ldr	r3, [pc, #4]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	e00d      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e20:	40021000 	.word	0x40021000
 8005e24:	40007000 	.word	0x40007000
 8005e28:	10908100 	.word	0x10908100
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	4b69      	ldr	r3, [pc, #420]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	613a      	str	r2, [r7, #16]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	fa92 f2a2 	rbit	r2, r2
 8005e46:	60fa      	str	r2, [r7, #12]
  return result;
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	fab2 f282 	clz	r2, r2
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	f002 021f 	and.w	r2, r2, #31
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0b7      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e66:	4b5e      	ldr	r3, [pc, #376]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	495b      	ldr	r1, [pc, #364]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e80:	4b57      	ldr	r3, [pc, #348]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e98:	4b51      	ldr	r3, [pc, #324]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	f023 0203 	bic.w	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	494e      	ldr	r1, [pc, #312]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb6:	4b4a      	ldr	r3, [pc, #296]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	4947      	ldr	r1, [pc, #284]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ed4:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	493f      	ldr	r1, [pc, #252]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef2:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f023 0220 	bic.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4938      	ldr	r1, [pc, #224]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f10:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	4930      	ldr	r1, [pc, #192]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f2e:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4929      	ldr	r1, [pc, #164]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005f4c:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	4921      	ldr	r1, [pc, #132]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	491a      	ldr	r1, [pc, #104]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d008      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	490b      	ldr	r1, [pc, #44]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3748      	adds	r7, #72	; 0x48
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e049      	b.n	800608a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc f850 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f000 fb3c 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e049      	b.n	8006138 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fc f893 	bl	80021e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 fae5 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e03c      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e02f      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e022      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d109      	bne.n	80061b2 <HAL_TIM_PWM_Start+0x72>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	e015      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d109      	bne.n	80061cc <HAL_TIM_PWM_Start+0x8c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e008      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e083      	b.n	80062ee <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0xb6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xc6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	e01b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d104      	bne.n	8006216 <HAL_TIM_PWM_Start+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006214:	e013      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PWM_Start+0xe6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006224:	e00b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b10      	cmp	r3, #16
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0xf6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	e003      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fdd8 	bl	8006dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a29      	ldr	r2, [pc, #164]	; (80062f8 <HAL_TIM_PWM_Start+0x1b8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_TIM_PWM_Start+0x1bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <HAL_TIM_PWM_Start+0x1c0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a25      	ldr	r2, [pc, #148]	; (8006304 <HAL_TIM_PWM_Start+0x1c4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_TIM_PWM_Start+0x138>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_TIM_PWM_Start+0x13a>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <HAL_TIM_PWM_Start+0x1b8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_TIM_PWM_Start+0x16c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d004      	beq.n	80062ac <HAL_TIM_PWM_Start+0x16c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_TIM_PWM_Start+0x1bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d115      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <HAL_TIM_PWM_Start+0x1c8>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d015      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1aa>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d011      	beq.n	80062ea <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	e008      	b.n	80062ea <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e000      	b.n	80062ec <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800
 8006308:	00010007 	.word	0x00010007

0800630c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006322:	2302      	movs	r3, #2
 8006324:	e0fd      	b.n	8006522 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b14      	cmp	r3, #20
 8006332:	f200 80f0 	bhi.w	8006516 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006391 	.word	0x08006391
 8006340:	08006517 	.word	0x08006517
 8006344:	08006517 	.word	0x08006517
 8006348:	08006517 	.word	0x08006517
 800634c:	080063d1 	.word	0x080063d1
 8006350:	08006517 	.word	0x08006517
 8006354:	08006517 	.word	0x08006517
 8006358:	08006517 	.word	0x08006517
 800635c:	08006413 	.word	0x08006413
 8006360:	08006517 	.word	0x08006517
 8006364:	08006517 	.word	0x08006517
 8006368:	08006517 	.word	0x08006517
 800636c:	08006453 	.word	0x08006453
 8006370:	08006517 	.word	0x08006517
 8006374:	08006517 	.word	0x08006517
 8006378:	08006517 	.word	0x08006517
 800637c:	08006495 	.word	0x08006495
 8006380:	08006517 	.word	0x08006517
 8006384:	08006517 	.word	0x08006517
 8006388:	08006517 	.word	0x08006517
 800638c:	080064d5 	.word	0x080064d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f9f0 	bl	800677c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e0a3      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa56 	bl	8006888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e082      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fab5 	bl	8006988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e062      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fb13 	bl	8006a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e041      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fb56 	bl	8006b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064d2:	e021      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fb94 	bl	8006c08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006514:	e000      	b.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop

0800652c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_TIM_ConfigClockSource+0x18>
 8006540:	2302      	movs	r3, #2
 8006542:	e0a8      	b.n	8006696 <HAL_TIM_ConfigClockSource+0x16a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800656e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d067      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0x124>
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d80b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x70>
 8006584:	2b10      	cmp	r3, #16
 8006586:	d073      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x144>
 8006588:	2b10      	cmp	r3, #16
 800658a:	d802      	bhi.n	8006592 <HAL_TIM_ConfigClockSource+0x66>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d06f      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006590:	e078      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006592:	2b20      	cmp	r3, #32
 8006594:	d06c      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x144>
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d06a      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800659a:	e073      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800659c:	2b70      	cmp	r3, #112	; 0x70
 800659e:	d00d      	beq.n	80065bc <HAL_TIM_ConfigClockSource+0x90>
 80065a0:	2b70      	cmp	r3, #112	; 0x70
 80065a2:	d804      	bhi.n	80065ae <HAL_TIM_ConfigClockSource+0x82>
 80065a4:	2b50      	cmp	r3, #80	; 0x50
 80065a6:	d033      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0xe4>
 80065a8:	2b60      	cmp	r3, #96	; 0x60
 80065aa:	d041      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80065ac:	e06a      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	d066      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0x156>
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d017      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80065ba:	e063      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6899      	ldr	r1, [r3, #8]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f000 fbf6 	bl	8006dbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	609a      	str	r2, [r3, #8]
      break;
 80065e8:	e04c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6899      	ldr	r1, [r3, #8]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f000 fbdf 	bl	8006dbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660c:	609a      	str	r2, [r3, #8]
      break;
 800660e:	e039      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	461a      	mov	r2, r3
 800661e:	f000 fb53 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2150      	movs	r1, #80	; 0x50
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fbac 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 800662e:	e029      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	461a      	mov	r2, r3
 800663e:	f000 fb72 	bl	8006d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2160      	movs	r1, #96	; 0x60
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fb9c 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 800664e:	e019      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	461a      	mov	r2, r3
 800665e:	f000 fb33 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2140      	movs	r1, #64	; 0x40
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fb8c 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 800666e:	e009      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f000 fb83 	bl	8006d86 <TIM_ITRx_SetConfig>
        break;
 8006680:	e000      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a2e      	ldr	r2, [pc, #184]	; (800676c <TIM_Base_SetConfig+0xcc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0x20>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066be:	d108      	bne.n	80066d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <TIM_Base_SetConfig+0xcc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0x5a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0x5a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a22      	ldr	r2, [pc, #136]	; (8006770 <TIM_Base_SetConfig+0xd0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0x5a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a21      	ldr	r2, [pc, #132]	; (8006774 <TIM_Base_SetConfig+0xd4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0x5a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <TIM_Base_SetConfig+0xd8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0e      	ldr	r2, [pc, #56]	; (800676c <TIM_Base_SetConfig+0xcc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00b      	beq.n	8006750 <TIM_Base_SetConfig+0xb0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0d      	ldr	r2, [pc, #52]	; (8006770 <TIM_Base_SetConfig+0xd0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_Base_SetConfig+0xb0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <TIM_Base_SetConfig+0xd4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0xb0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <TIM_Base_SetConfig+0xd8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	615a      	str	r2, [r3, #20]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800

0800677c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0201 	bic.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0302 	bic.w	r3, r3, #2
 80067c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a28      	ldr	r2, [pc, #160]	; (8006878 <TIM_OC1_SetConfig+0xfc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00b      	beq.n	80067f4 <TIM_OC1_SetConfig+0x78>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a27      	ldr	r2, [pc, #156]	; (800687c <TIM_OC1_SetConfig+0x100>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_OC1_SetConfig+0x78>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a26      	ldr	r2, [pc, #152]	; (8006880 <TIM_OC1_SetConfig+0x104>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC1_SetConfig+0x78>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a25      	ldr	r2, [pc, #148]	; (8006884 <TIM_OC1_SetConfig+0x108>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10c      	bne.n	800680e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0308 	bic.w	r3, r3, #8
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <TIM_OC1_SetConfig+0xfc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00b      	beq.n	800682e <TIM_OC1_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a18      	ldr	r2, [pc, #96]	; (800687c <TIM_OC1_SetConfig+0x100>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <TIM_OC1_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <TIM_OC1_SetConfig+0x104>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC1_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <TIM_OC1_SetConfig+0x108>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d111      	bne.n	8006852 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0210 	bic.w	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0320 	bic.w	r3, r3, #32
 80068d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <TIM_OC2_SetConfig+0xf0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10d      	bne.n	8006908 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <TIM_OC2_SetConfig+0xf0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_OC2_SetConfig+0xa0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1a      	ldr	r2, [pc, #104]	; (800697c <TIM_OC2_SetConfig+0xf4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC2_SetConfig+0xa0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <TIM_OC2_SetConfig+0xf8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC2_SetConfig+0xa0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	; (8006984 <TIM_OC2_SetConfig+0xfc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d113      	bne.n	8006950 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800692e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006936:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800

08006988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a23      	ldr	r2, [pc, #140]	; (8006a74 <TIM_OC3_SetConfig+0xec>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d10d      	bne.n	8006a06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1a      	ldr	r2, [pc, #104]	; (8006a74 <TIM_OC3_SetConfig+0xec>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_OC3_SetConfig+0x9e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a19      	ldr	r2, [pc, #100]	; (8006a78 <TIM_OC3_SetConfig+0xf0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_OC3_SetConfig+0x9e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <TIM_OC3_SetConfig+0xf4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC3_SetConfig+0x9e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <TIM_OC3_SetConfig+0xf8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d113      	bne.n	8006a4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	031b      	lsls	r3, r3, #12
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <TIM_OC4_SetConfig+0xb8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00b      	beq.n	8006b00 <TIM_OC4_SetConfig+0x7c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <TIM_OC4_SetConfig+0xbc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <TIM_OC4_SetConfig+0x7c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC4_SetConfig+0xc0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC4_SetConfig+0x7c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <TIM_OC4_SetConfig+0xc4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d109      	bne.n	8006b14 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40014400 	.word	0x40014400
 8006b48:	40014800 	.word	0x40014800

08006b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <TIM_OC5_SetConfig+0xac>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <TIM_OC5_SetConfig+0x72>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	; (8006bfc <TIM_OC5_SetConfig+0xb0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_OC5_SetConfig+0x72>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a13      	ldr	r2, [pc, #76]	; (8006c00 <TIM_OC5_SetConfig+0xb4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC5_SetConfig+0x72>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <TIM_OC5_SetConfig+0xb8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d109      	bne.n	8006bd2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	051b      	lsls	r3, r3, #20
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <TIM_OC6_SetConfig+0xb0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <TIM_OC6_SetConfig+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <TIM_OC6_SetConfig+0xb4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d007      	beq.n	8006c7c <TIM_OC6_SetConfig+0x74>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <TIM_OC6_SetConfig+0xb8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC6_SetConfig+0x74>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <TIM_OC6_SetConfig+0xbc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 030a 	bic.w	r3, r3, #10
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0210 	bic.w	r2, r3, #16
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f043 0307 	orr.w	r3, r3, #7
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2201      	movs	r2, #1
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1a      	ldr	r2, [r3, #32]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e04f      	b.n	8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a14      	ldr	r2, [pc, #80]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10c      	bne.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40014000 	.word	0x40014000

08006f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e060      	b.n	8006ff2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d115      	bne.n	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	051b      	lsls	r3, r3, #20
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00

08007004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e040      	b.n	8007098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fb f976 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2224      	movs	r2, #36	; 0x24
 8007030:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f82c 	bl	80070a0 <UART_SetConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e022      	b.n	8007098 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f958 	bl	8007310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f9df 	bl	8007454 <UART_CheckIdleState>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b8b      	ldr	r3, [pc, #556]	; (80072f8 <UART_SetConfig+0x258>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	430b      	orrs	r3, r1
 80070d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a79      	ldr	r2, [pc, #484]	; (80072fc <UART_SetConfig+0x25c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d121      	bne.n	8007160 <UART_SetConfig+0xc0>
 800711c:	4b78      	ldr	r3, [pc, #480]	; (8007300 <UART_SetConfig+0x260>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	2b03      	cmp	r3, #3
 8007126:	d817      	bhi.n	8007158 <UART_SetConfig+0xb8>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x90>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007141 	.word	0x08007141
 8007134:	0800714d 	.word	0x0800714d
 8007138:	08007153 	.word	0x08007153
 800713c:	08007147 	.word	0x08007147
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e01e      	b.n	8007184 <UART_SetConfig+0xe4>
 8007146:	2302      	movs	r3, #2
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e01b      	b.n	8007184 <UART_SetConfig+0xe4>
 800714c:	2304      	movs	r3, #4
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e018      	b.n	8007184 <UART_SetConfig+0xe4>
 8007152:	2308      	movs	r3, #8
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e015      	b.n	8007184 <UART_SetConfig+0xe4>
 8007158:	2310      	movs	r3, #16
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	bf00      	nop
 800715e:	e011      	b.n	8007184 <UART_SetConfig+0xe4>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a67      	ldr	r2, [pc, #412]	; (8007304 <UART_SetConfig+0x264>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d102      	bne.n	8007170 <UART_SetConfig+0xd0>
 800716a:	2300      	movs	r3, #0
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e009      	b.n	8007184 <UART_SetConfig+0xe4>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a64      	ldr	r2, [pc, #400]	; (8007308 <UART_SetConfig+0x268>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d102      	bne.n	8007180 <UART_SetConfig+0xe0>
 800717a:	2300      	movs	r3, #0
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e001      	b.n	8007184 <UART_SetConfig+0xe4>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718c:	d15c      	bne.n	8007248 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d828      	bhi.n	80071e6 <UART_SetConfig+0x146>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0xfc>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	080071e7 	.word	0x080071e7
 80071ac:	080071d7 	.word	0x080071d7
 80071b0:	080071e7 	.word	0x080071e7
 80071b4:	080071e7 	.word	0x080071e7
 80071b8:	080071e7 	.word	0x080071e7
 80071bc:	080071df 	.word	0x080071df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c0:	f7fe fd3a 	bl	8005c38 <HAL_RCC_GetPCLK1Freq>
 80071c4:	61b8      	str	r0, [r7, #24]
        break;
 80071c6:	e013      	b.n	80071f0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c8:	f7fe fd58 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 80071cc:	61b8      	str	r0, [r7, #24]
        break;
 80071ce:	e00f      	b.n	80071f0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071d0:	4b4e      	ldr	r3, [pc, #312]	; (800730c <UART_SetConfig+0x26c>)
 80071d2:	61bb      	str	r3, [r7, #24]
        break;
 80071d4:	e00c      	b.n	80071f0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d6:	f7fe fcb9 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 80071da:	61b8      	str	r0, [r7, #24]
        break;
 80071dc:	e008      	b.n	80071f0 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e2:	61bb      	str	r3, [r7, #24]
        break;
 80071e4:	e004      	b.n	80071f0 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	77bb      	strb	r3, [r7, #30]
        break;
 80071ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d074      	beq.n	80072e0 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	005a      	lsls	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	fbb2 f3f3 	udiv	r3, r2, r3
 800720a:	b29b      	uxth	r3, r3
 800720c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b0f      	cmp	r3, #15
 8007212:	d916      	bls.n	8007242 <UART_SetConfig+0x1a2>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721a:	d212      	bcs.n	8007242 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	b29b      	uxth	r3, r3
 8007220:	f023 030f 	bic.w	r3, r3, #15
 8007224:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	b29a      	uxth	r2, r3
 8007232:	89fb      	ldrh	r3, [r7, #14]
 8007234:	4313      	orrs	r3, r2
 8007236:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	89fa      	ldrh	r2, [r7, #14]
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	e04e      	b.n	80072e0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	77bb      	strb	r3, [r7, #30]
 8007246:	e04b      	b.n	80072e0 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007248:	7ffb      	ldrb	r3, [r7, #31]
 800724a:	2b08      	cmp	r3, #8
 800724c:	d827      	bhi.n	800729e <UART_SetConfig+0x1fe>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x1b4>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	0800729f 	.word	0x0800729f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800729f 	.word	0x0800729f
 800726c:	0800729f 	.word	0x0800729f
 8007270:	0800729f 	.word	0x0800729f
 8007274:	08007297 	.word	0x08007297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fe fcde 	bl	8005c38 <HAL_RCC_GetPCLK1Freq>
 800727c:	61b8      	str	r0, [r7, #24]
        break;
 800727e:	e013      	b.n	80072a8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007280:	f7fe fcfc 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8007284:	61b8      	str	r0, [r7, #24]
        break;
 8007286:	e00f      	b.n	80072a8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007288:	4b20      	ldr	r3, [pc, #128]	; (800730c <UART_SetConfig+0x26c>)
 800728a:	61bb      	str	r3, [r7, #24]
        break;
 800728c:	e00c      	b.n	80072a8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728e:	f7fe fc5d 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 8007292:	61b8      	str	r0, [r7, #24]
        break;
 8007294:	e008      	b.n	80072a8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729a:	61bb      	str	r3, [r7, #24]
        break;
 800729c:	e004      	b.n	80072a8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	77bb      	strb	r3, [r7, #30]
        break;
 80072a6:	bf00      	nop
    }

    if (pclk != 0U)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	085a      	lsrs	r2, r3, #1
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d908      	bls.n	80072dc <UART_SetConfig+0x23c>
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d204      	bcs.n	80072dc <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e001      	b.n	80072e0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	efff69f3 	.word	0xefff69f3
 80072fc:	40013800 	.word	0x40013800
 8007300:	40021000 	.word	0x40021000
 8007304:	40004400 	.word	0x40004400
 8007308:	40004800 	.word	0x40004800
 800730c:	007a1200 	.word	0x007a1200

08007310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01a      	beq.n	8007426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800740e:	d10a      	bne.n	8007426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
  }
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007464:	f7fb f884 	bl	8002570 <HAL_GetTick>
 8007468:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d10e      	bne.n	8007496 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f82d 	bl	80074e6 <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e023      	b.n	80074de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d10e      	bne.n	80074c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f817 	bl	80074e6 <UART_WaitOnFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e00d      	b.n	80074de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f6:	e05e      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d05a      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007500:	f7fb f836 	bl	8002570 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <UART_WaitOnFlagUntilTimeout+0x30>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d11b      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007524:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e043      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d02c      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756a:	d124      	bne.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007574:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007584:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e00f      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4013      	ands	r3, r2
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bf0c      	ite	eq
 80075c6:	2301      	moveq	r3, #1
 80075c8:	2300      	movne	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d091      	beq.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <__libc_init_array>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4e0d      	ldr	r6, [pc, #52]	; (8007618 <__libc_init_array+0x38>)
 80075e4:	4c0d      	ldr	r4, [pc, #52]	; (800761c <__libc_init_array+0x3c>)
 80075e6:	1ba4      	subs	r4, r4, r6
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	2500      	movs	r5, #0
 80075ec:	42a5      	cmp	r5, r4
 80075ee:	d109      	bne.n	8007604 <__libc_init_array+0x24>
 80075f0:	4e0b      	ldr	r6, [pc, #44]	; (8007620 <__libc_init_array+0x40>)
 80075f2:	4c0c      	ldr	r4, [pc, #48]	; (8007624 <__libc_init_array+0x44>)
 80075f4:	f000 f820 	bl	8007638 <_init>
 80075f8:	1ba4      	subs	r4, r4, r6
 80075fa:	10a4      	asrs	r4, r4, #2
 80075fc:	2500      	movs	r5, #0
 80075fe:	42a5      	cmp	r5, r4
 8007600:	d105      	bne.n	800760e <__libc_init_array+0x2e>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007608:	4798      	blx	r3
 800760a:	3501      	adds	r5, #1
 800760c:	e7ee      	b.n	80075ec <__libc_init_array+0xc>
 800760e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007612:	4798      	blx	r3
 8007614:	3501      	adds	r5, #1
 8007616:	e7f2      	b.n	80075fe <__libc_init_array+0x1e>
 8007618:	0800768c 	.word	0x0800768c
 800761c:	0800768c 	.word	0x0800768c
 8007620:	0800768c 	.word	0x0800768c
 8007624:	08007690 	.word	0x08007690

08007628 <memset>:
 8007628:	4402      	add	r2, r0
 800762a:	4603      	mov	r3, r0
 800762c:	4293      	cmp	r3, r2
 800762e:	d100      	bne.n	8007632 <memset+0xa>
 8007630:	4770      	bx	lr
 8007632:	f803 1b01 	strb.w	r1, [r3], #1
 8007636:	e7f9      	b.n	800762c <memset+0x4>

08007638 <_init>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr

08007644 <_fini>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	bf00      	nop
 8007648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764a:	bc08      	pop	{r3}
 800764c:	469e      	mov	lr, r3
 800764e:	4770      	bx	lr
