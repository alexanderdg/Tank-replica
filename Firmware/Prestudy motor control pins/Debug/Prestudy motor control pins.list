
Prestudy motor control pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080075c0  080075c0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c0  080075c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000014  080075dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080075dc  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014afa  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002833  00000000  00000000  00034b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce09  00000000  00000000  00039af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bb4  00000000  00000000  000568f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad7bd  00000000  00000000  000674ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114c6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005860  00000000  00000000  00114ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800756c 	.word	0x0800756c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800756c 	.word	0x0800756c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <sendACK>:
}
*/


void sendACK()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	uint32_t mb;
	uint8_t data[] = {1, 1, 1, 1};
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <sendACK+0x6c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	603b      	str	r3, [r7, #0]
	TxMessage.StdId = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <sendACK+0x70>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <sendACK+0x70>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <sendACK+0x70>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = 4;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <sendACK+0x70>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	611a      	str	r2, [r3, #16]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <sendACK+0x70>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	751a      	strb	r2, [r3, #20]
	data[1] = adcBuffer[0] >> 8;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <sendACK+0x74>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	707b      	strb	r3, [r7, #1]
	data[2] = adcBuffer[1] >> 8;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <sendACK+0x74>)
 8000a3c:	885b      	ldrh	r3, [r3, #2]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	70bb      	strb	r3, [r7, #2]
	data[3] = adcBuffer[2] >> 8;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <sendACK+0x74>)
 8000a48:	889b      	ldrh	r3, [r3, #4]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	70fb      	strb	r3, [r7, #3]
	if (HAL_CAN_AddTxMessage(&hcan, &TxMessage, data, &mb) != HAL_OK) {
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	463a      	mov	r2, r7
 8000a56:	4907      	ldr	r1, [pc, #28]	; (8000a74 <sendACK+0x70>)
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <sendACK+0x78>)
 8000a5a:	f002 fd53 	bl	8003504 <HAL_CAN_AddTxMessage>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <sendACK+0x64>
	    Error_Handler();
 8000a64:	f001 f8ac 	bl	8001bc0 <Error_Handler>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08007584 	.word	0x08007584
 8000a74:	20000348 	.word	0x20000348
 8000a78:	2000005c 	.word	0x2000005c
 8000a7c:	20000148 	.word	0x20000148

08000a80 <setPWMLeft>:
	}
}


void setPWMLeft(int PWM)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <setPWMLeft+0x80>)
 8000a8e:	701a      	strb	r2, [r3, #0]
	uint8_t PWM_local = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <setPWMLeft+0x84>)
 8000a9a:	f003 fe2f 	bl	80046fc <HAL_GPIO_WritePin>
	if(PWM >= 100)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b63      	cmp	r3, #99	; 0x63
 8000aa2:	dd0a      	ble.n	8000aba <setPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f003 fe26 	bl	80046fc <HAL_GPIO_WritePin>
		PWM_local = PWM - 100;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	3b64      	subs	r3, #100	; 0x64
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e00d      	b.n	8000ad6 <setPWMLeft+0x56>
	}
	else if(PWM < 100)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b63      	cmp	r3, #99	; 0x63
 8000abe:	dc0a      	bgt.n	8000ad6 <setPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	; 0x40
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f003 fe18 	bl	80046fc <HAL_GPIO_WritePin>
		PWM_local = 100 - PWM;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000ad4:	73fb      	strb	r3, [r7, #15]
	}
	int temp = PWM_local * 32 + 1;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	015b      	lsls	r3, r3, #5
 8000ada:	3301      	adds	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
	if(temp > 3300)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	dd02      	ble.n	8000aee <setPWMLeft+0x6e>
	{
		temp = 3300;
 8000ae8:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000aec:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, temp);
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <setPWMLeft+0x88>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000003 	.word	0x20000003
 8000b04:	48000800 	.word	0x48000800
 8000b08:	200000b0 	.word	0x200000b0

08000b0c <setPWMRight>:

void setPWMRight(int PWM)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <setPWMRight+0x80>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	uint8_t PWM_local = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <setPWMRight+0x84>)
 8000b26:	f003 fde9 	bl	80046fc <HAL_GPIO_WritePin>
	if(PWM >= 100)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b63      	cmp	r3, #99	; 0x63
 8000b2e:	dd0a      	ble.n	8000b46 <setPWMRight+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f003 fde0 	bl	80046fc <HAL_GPIO_WritePin>
		PWM_local = PWM - 100;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	3b64      	subs	r3, #100	; 0x64
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e00d      	b.n	8000b62 <setPWMRight+0x56>
	}
	else if(PWM < 100)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b63      	cmp	r3, #99	; 0x63
 8000b4a:	dc0a      	bgt.n	8000b62 <setPWMRight+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f003 fdd2 	bl	80046fc <HAL_GPIO_WritePin>
		PWM_local = 100 - PWM;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000b60:	73fb      	strb	r3, [r7, #15]
	}
	int temp = PWM_local * 32 + 1;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
	if(temp > 3300)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000b70:	4293      	cmp	r3, r2
 8000b72:	dd02      	ble.n	8000b7a <setPWMRight+0x6e>
	{
		temp = 3300;
 8000b74:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000b78:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, temp);
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <setPWMRight+0x88>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	48000800 	.word	0x48000800
 8000b94:	200000b0 	.word	0x200000b0

08000b98 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b08b      	sub	sp, #44	; 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  //HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8000ba0:	4bce      	ldr	r3, [pc, #824]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000ba2:	4acf      	ldr	r2, [pc, #828]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f002 fd87 	bl	80036ba <HAL_CAN_GetRxMessage>
  uint32_t mb;
  uint32_t shuntVoltage;
  uint8_t currentLSB, currentMSB, voltageLSB, voltageMSB;
  float current, voltage;
  uint8_t data[] = {1,0,0,0,0,0,0,0};
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	723b      	strb	r3, [r7, #8]
  switch(RxData[0])
 8000bba:	4bc8      	ldr	r3, [pc, #800]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b66      	cmp	r3, #102	; 0x66
 8000bc0:	f200 82c1 	bhi.w	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000d69 	.word	0x08000d69
 8000bd0:	08000db3 	.word	0x08000db3
 8000bd4:	08000df1 	.word	0x08000df1
 8000bd8:	08000e03 	.word	0x08000e03
 8000bdc:	08000e39 	.word	0x08000e39
 8000be0:	08000e6f 	.word	0x08000e6f
 8000be4:	08000e8d 	.word	0x08000e8d
 8000be8:	08001147 	.word	0x08001147
 8000bec:	08001147 	.word	0x08001147
 8000bf0:	08001147 	.word	0x08001147
 8000bf4:	08000eab 	.word	0x08000eab
 8000bf8:	08000ec9 	.word	0x08000ec9
 8000bfc:	08001147 	.word	0x08001147
 8000c00:	08001147 	.word	0x08001147
 8000c04:	08001147 	.word	0x08001147
 8000c08:	08001147 	.word	0x08001147
 8000c0c:	08001147 	.word	0x08001147
 8000c10:	08001147 	.word	0x08001147
 8000c14:	08001147 	.word	0x08001147
 8000c18:	08001147 	.word	0x08001147
 8000c1c:	08001147 	.word	0x08001147
 8000c20:	08001147 	.word	0x08001147
 8000c24:	08001147 	.word	0x08001147
 8000c28:	08001147 	.word	0x08001147
 8000c2c:	08001147 	.word	0x08001147
 8000c30:	08001147 	.word	0x08001147
 8000c34:	08001147 	.word	0x08001147
 8000c38:	08001147 	.word	0x08001147
 8000c3c:	08001147 	.word	0x08001147
 8000c40:	08001147 	.word	0x08001147
 8000c44:	08001147 	.word	0x08001147
 8000c48:	08001147 	.word	0x08001147
 8000c4c:	08001147 	.word	0x08001147
 8000c50:	08001147 	.word	0x08001147
 8000c54:	08001147 	.word	0x08001147
 8000c58:	08001147 	.word	0x08001147
 8000c5c:	08001147 	.word	0x08001147
 8000c60:	08001147 	.word	0x08001147
 8000c64:	08001147 	.word	0x08001147
 8000c68:	08001147 	.word	0x08001147
 8000c6c:	08001147 	.word	0x08001147
 8000c70:	08001147 	.word	0x08001147
 8000c74:	08001147 	.word	0x08001147
 8000c78:	08001147 	.word	0x08001147
 8000c7c:	08001147 	.word	0x08001147
 8000c80:	08001147 	.word	0x08001147
 8000c84:	08001147 	.word	0x08001147
 8000c88:	08001147 	.word	0x08001147
 8000c8c:	08001147 	.word	0x08001147
 8000c90:	08001147 	.word	0x08001147
 8000c94:	08001147 	.word	0x08001147
 8000c98:	08001147 	.word	0x08001147
 8000c9c:	08001147 	.word	0x08001147
 8000ca0:	08001147 	.word	0x08001147
 8000ca4:	08001147 	.word	0x08001147
 8000ca8:	08001147 	.word	0x08001147
 8000cac:	08001147 	.word	0x08001147
 8000cb0:	08001147 	.word	0x08001147
 8000cb4:	08001147 	.word	0x08001147
 8000cb8:	08001147 	.word	0x08001147
 8000cbc:	08001147 	.word	0x08001147
 8000cc0:	08001147 	.word	0x08001147
 8000cc4:	08001147 	.word	0x08001147
 8000cc8:	08001147 	.word	0x08001147
 8000ccc:	08001147 	.word	0x08001147
 8000cd0:	08001147 	.word	0x08001147
 8000cd4:	08001147 	.word	0x08001147
 8000cd8:	08001147 	.word	0x08001147
 8000cdc:	08001147 	.word	0x08001147
 8000ce0:	08001147 	.word	0x08001147
 8000ce4:	08001147 	.word	0x08001147
 8000ce8:	08001147 	.word	0x08001147
 8000cec:	08001147 	.word	0x08001147
 8000cf0:	08001147 	.word	0x08001147
 8000cf4:	08001147 	.word	0x08001147
 8000cf8:	08001147 	.word	0x08001147
 8000cfc:	08001147 	.word	0x08001147
 8000d00:	08001147 	.word	0x08001147
 8000d04:	08001147 	.word	0x08001147
 8000d08:	08001147 	.word	0x08001147
 8000d0c:	08001147 	.word	0x08001147
 8000d10:	08001147 	.word	0x08001147
 8000d14:	08001147 	.word	0x08001147
 8000d18:	08001147 	.word	0x08001147
 8000d1c:	08001147 	.word	0x08001147
 8000d20:	08001147 	.word	0x08001147
 8000d24:	08001147 	.word	0x08001147
 8000d28:	08001147 	.word	0x08001147
 8000d2c:	08001147 	.word	0x08001147
 8000d30:	08001147 	.word	0x08001147
 8000d34:	08001147 	.word	0x08001147
 8000d38:	08001147 	.word	0x08001147
 8000d3c:	08001147 	.word	0x08001147
 8000d40:	08001147 	.word	0x08001147
 8000d44:	08001147 	.word	0x08001147
 8000d48:	08001147 	.word	0x08001147
 8000d4c:	08001147 	.word	0x08001147
 8000d50:	08001147 	.word	0x08001147
 8000d54:	08001147 	.word	0x08001147
 8000d58:	08001147 	.word	0x08001147
 8000d5c:	08000f1b 	.word	0x08000f1b
 8000d60:	08000fcf 	.word	0x08000fcf
 8000d64:	08001081 	.word	0x08001081
  {
  	  case 0:
  		  //----------- Coast Brake -----------//
  		  //Set sleep pins low
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	485d      	ldr	r0, [pc, #372]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000d6e:	f003 fcc5 	bl	80046fc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000d78:	f003 fcc0 	bl	80046fc <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f003 fcba 	bl	80046fc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f003 fcb4 	bl	80046fc <HAL_GPIO_WritePin>
  		  pwm_left = 100;
 8000d94:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8000d96:	2264      	movs	r2, #100	; 0x64
 8000d98:	701a      	strb	r2, [r3, #0]
  		  pwm_target_left = 100;
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000d9c:	2264      	movs	r2, #100	; 0x64
 8000d9e:	701a      	strb	r2, [r3, #0]
  		  pwm_right = 100;
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	701a      	strb	r2, [r3, #0]
  		  pwm_target_right = 100;
 8000da6:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000da8:	2264      	movs	r2, #100	; 0x64
 8000daa:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000dac:	f7ff fe2a 	bl	8000a04 <sendACK>
  		  break;
 8000db0:	e1c9      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 1:
  		  //----------- Dynamic Brake (slow brake) -----------//
  		  //Set sleep pins high
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000db8:	f003 fca0 	bl	80046fc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	4848      	ldr	r0, [pc, #288]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 8000dc2:	f003 fc9b 	bl	80046fc <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2140      	movs	r1, #64	; 0x40
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f003 fc95 	bl	80046fc <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f003 fc8f 	bl	80046fc <HAL_GPIO_WritePin>
  		  setPWMLeft(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f7ff fe4e 	bl	8000a80 <setPWMLeft>
  		  setPWMRight(100);
 8000de4:	2064      	movs	r0, #100	; 0x64
 8000de6:	f7ff fe91 	bl	8000b0c <setPWMRight>
  		  sendACK();
 8000dea:	f7ff fe0b 	bl	8000a04 <sendACK>
  		  break;
 8000dee:	e1aa      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 2:
  		  //----------- Regenerative brake -----------//
  		  pwm_target_right = 100;
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000df2:	2264      	movs	r2, #100	; 0x64
 8000df4:	701a      	strb	r2, [r3, #0]
		  pwm_target_left = 100;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000df8:	2264      	movs	r2, #100	; 0x64
 8000dfa:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000dfc:	f7ff fe02 	bl	8000a04 <sendACK>
  		  break;
 8000e00:	e1a1      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 3:
  		  //----------- Forward drive -----------//
  		  if(RxData[1] > 100)
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d906      	bls.n	8000e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>
  		  {
  			  pwm_target_left = 200;
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e0c:	22c8      	movs	r2, #200	; 0xc8
 8000e0e:	701a      	strb	r2, [r3, #0]
  			  pwm_target_right = 0;
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e00c      	b.n	8000e32 <HAL_CAN_RxFifo0MsgPendingCallback+0x29a>
  		  }
  		  else
  		  {
  			  pwm_target_left = 100 + RxData[1];
 8000e18:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	3364      	adds	r3, #100	; 0x64
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e22:	701a      	strb	r2, [r3, #0]
  			  pwm_target_right = 100 - RxData[1];
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000e30:	701a      	strb	r2, [r3, #0]
  		  }
  		  sendACK();
 8000e32:	f7ff fde7 	bl	8000a04 <sendACK>
  		  break;
 8000e36:	e186      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 4:
  		  //----------- Reverse drive -----------//
  		  if(RxData[1] > 100)
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d906      	bls.n	8000e4e <HAL_CAN_RxFifo0MsgPendingCallback+0x2b6>
  		  {
  		  	  pwm_target_left = 0;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  		  	  pwm_target_right = 200;
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000e48:	22c8      	movs	r2, #200	; 0xc8
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e00c      	b.n	8000e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>
  		  }
  		  else
  		  {
  			  pwm_target_left = 100 - RxData[1];
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e5a:	701a      	strb	r2, [r3, #0]
  		  	  pwm_target_right = 100 + RxData[1];
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	3364      	adds	r3, #100	; 0x64
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000e66:	701a      	strb	r2, [r3, #0]
  		  }
  		  sendACK();
 8000e68:	f7ff fdcc 	bl	8000a04 <sendACK>
  		  break;
 8000e6c:	e16b      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 5:
  		  //----------- Manual left motor -----------//
  		  if(RxData[1] > 200) pwm_target_left = 200;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	2bc8      	cmp	r3, #200	; 0xc8
 8000e74:	d903      	bls.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e6>
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e78:	22c8      	movs	r2, #200	; 0xc8
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e003      	b.n	8000e86 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ee>
  		  else pwm_target_left = RxData[1];
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e80:	785a      	ldrb	r2, [r3, #1]
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_CAN_RxFifo0MsgPendingCallback+0x354>)
 8000e84:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000e86:	f7ff fdbd 	bl	8000a04 <sendACK>
  		  break;
 8000e8a:	e15c      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 6:
  		  //----------- Manual right motor -----------//
  		  if(RxData[1] > 200) pwm_target_right = 200;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	2bc8      	cmp	r3, #200	; 0xc8
 8000e92:	d903      	bls.n	8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000e96:	22c8      	movs	r2, #200	; 0xc8
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e003      	b.n	8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>
  		  else pwm_target_right = RxData[1];
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000e9e:	785a      	ldrb	r2, [r3, #1]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000ea4:	f7ff fdae 	bl	8000a04 <sendACK>
  		  break;
 8000ea8:	e14d      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 10:
  		  if(RxData[1] > 100) accl = 100;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d903      	bls.n	8000eba <HAL_CAN_RxFifo0MsgPendingCallback+0x322>
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e003      	b.n	8000ec2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
  		  else accl = RxData[1];
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000ebc:	785a      	ldrb	r2, [r3, #1]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 8000ec2:	f7ff fd9f 	bl	8000a04 <sendACK>
  		  break;
 8000ec6:	e13e      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 11:
  		  if(RxData[1] > 100) DAC1->DHR12R1 = 4024;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 8000eca:	785b      	ldrb	r3, [r3, #1]
 8000ecc:	2b64      	cmp	r3, #100	; 0x64
 8000ece:	d917      	bls.n	8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8000ed2:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	e01c      	b.n	8000f14 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>
 8000eda:	bf00      	nop
 8000edc:	200002f4 	.word	0x200002f4
 8000ee0:	200003ac 	.word	0x200003ac
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	20000003 	.word	0x20000003
 8000eec:	20000001 	.word	0x20000001
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	20000002 	.word	0x20000002
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	40007400 	.word	0x40007400
  		  else DAC1->DHR12R1 = RxData[1] * 40;
 8000f00:	4b9d      	ldr	r3, [pc, #628]	; (8001178 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b9a      	ldr	r3, [pc, #616]	; (800117c <HAL_CAN_RxFifo0MsgPendingCallback+0x5e4>)
 8000f12:	609a      	str	r2, [r3, #8]
  		  sendACK();
 8000f14:	f7ff fd76 	bl	8000a04 <sendACK>
  		  break;
 8000f18:	e115      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  	  case 100:
  		  //----------- Left current -----------//
  		  mb = adcBuffer[1];
 8000f1a:	4b99      	ldr	r3, [pc, #612]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e8>)
 8000f1c:	885b      	ldrh	r3, [r3, #2]
 8000f1e:	613b      	str	r3, [r7, #16]
  		  shuntVoltage = (801 * mb) / 20;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	f240 3221 	movw	r2, #801	; 0x321
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	4a96      	ldr	r2, [pc, #600]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ec>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  		  current = (shuntVoltage / 10000.0);
 8000f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f36:	f7ff fa89 	bl	800044c <__aeabi_ui2d>
 8000f3a:	a389      	add	r3, pc, #548	; (adr r3, 8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c8>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fc28 	bl	8000794 <__aeabi_ddiv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	f7ff fd0a 	bl	8000964 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	61bb      	str	r3, [r7, #24]
  		  currentMSB = current;
 8000f54:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5c:	edc7 7a00 	vstr	s15, [r7]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	75fb      	strb	r3, [r7, #23]
  		  currentLSB = (current - currentMSB)*100;
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f0>
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	edc7 7a00 	vstr	s15, [r7]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	75bb      	strb	r3, [r7, #22]
  	  	  data[1] = currentMSB;
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	727b      	strb	r3, [r7, #9]
  	  	  data[2] = currentLSB;
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	72bb      	strb	r3, [r7, #10]
  	  	  TxMessage.StdId = 0;
 8000f92:	4b7e      	ldr	r3, [pc, #504]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 8000f98:	4b7c      	ldr	r3, [pc, #496]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 8000fa4:	4b79      	ldr	r3, [pc, #484]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 8000faa:	4b78      	ldr	r3, [pc, #480]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	4974      	ldr	r1, [pc, #464]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f002 faa2 	bl	8003504 <HAL_CAN_AddTxMessage>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80ba 	beq.w	800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x5a4>
  	  		  Error_Handler();
 8000fc8:	f000 fdfa 	bl	8001bc0 <Error_Handler>
  	  	  }
  		  break;
 8000fcc:	e0b6      	b.n	800113c <HAL_CAN_RxFifo0MsgPendingCallback+0x5a4>
  	  case 101:
  		  //----------- Right current -----------//
  		  mb = adcBuffer[2];
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e8>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
  		  shuntVoltage = (801 * mb) / 20;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f240 3221 	movw	r2, #801	; 0x321
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	4a69      	ldr	r2, [pc, #420]	; (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ec>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  		  current = (shuntVoltage / 10000.0);
 8000fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fea:	f7ff fa2f 	bl	800044c <__aeabi_ui2d>
 8000fee:	a35c      	add	r3, pc, #368	; (adr r3, 8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c8>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fbce 	bl	8000794 <__aeabi_ddiv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4621      	mov	r1, r4
 8001000:	f7ff fcb0 	bl	8000964 <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	61bb      	str	r3, [r7, #24]
  		  currentMSB = current;
 8001008:	edd7 7a06 	vldr	s15, [r7, #24]
 800100c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001010:	edc7 7a00 	vstr	s15, [r7]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	75fb      	strb	r3, [r7, #23]
  		  currentLSB = (current - currentMSB)*100;
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	ed97 7a06 	vldr	s14, [r7, #24]
 8001026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f0>
 800102e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001036:	edc7 7a00 	vstr	s15, [r7]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	75bb      	strb	r3, [r7, #22]
  		  data[1] = currentMSB;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	727b      	strb	r3, [r7, #9]
  		  data[2] = currentLSB;
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	72bb      	strb	r3, [r7, #10]
  	  	  TxMessage.StdId = 0;
 8001046:	4b51      	ldr	r3, [pc, #324]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 8001052:	4b4e      	ldr	r3, [pc, #312]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 8001058:	4b4c      	ldr	r3, [pc, #304]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800105a:	2203      	movs	r2, #3
 800105c:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001060:	2200      	movs	r2, #0
 8001062:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	4947      	ldr	r1, [pc, #284]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fa48 	bl	8003504 <HAL_CAN_AddTxMessage>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d062      	beq.n	8001140 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a8>
  	  		  Error_Handler();
 800107a:	f000 fda1 	bl	8001bc0 <Error_Handler>
  	  	  }
  		  break;
 800107e:	e05f      	b.n	8001140 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a8>
  	  case 102:
  		  //----------- Battery voltage -----------//
  		  mb = adcBuffer[0];
 8001080:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e8>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	613b      	str	r3, [r7, #16]
  		  shuntVoltage = (801 * mb);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f240 3221 	movw	r2, #801	; 0x321
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  		  voltage = (shuntVoltage * 18.414) / 1000000;
 8001092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001094:	f7ff f9da 	bl	800044c <__aeabi_ui2d>
 8001098:	a333      	add	r3, pc, #204	; (adr r3, 8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0x5d0>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fa4f 	bl	8000540 <__aeabi_dmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	a331      	add	r3, pc, #196	; (adr r3, 8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0x5d8>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fb70 	bl	8000794 <__aeabi_ddiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f7ff fc52 	bl	8000964 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	623b      	str	r3, [r7, #32]
  		  voltageMSB = voltage;
 80010c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	edc7 7a00 	vstr	s15, [r7]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	77fb      	strb	r3, [r7, #31]
  		  voltageLSB = (voltage - voltageMSB) * 100;
 80010d4:	7ffb      	ldrb	r3, [r7, #31]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ed97 7a08 	vldr	s14, [r7, #32]
 80010e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f0>
 80010ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	77bb      	strb	r3, [r7, #30]
  		  data[1] = voltageMSB;
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	727b      	strb	r3, [r7, #9]
  		  data[2] = voltageLSB;
 80010fe:	7fbb      	ldrb	r3, [r7, #30]
 8001100:	72bb      	strb	r3, [r7, #10]
  		  TxMessage.StdId = 0;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 3;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 8001116:	2203      	movs	r2, #3
 8001118:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800111c:	2200      	movs	r2, #0
 800111e:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	f107 0208 	add.w	r2, r7, #8
 8001128:	4918      	ldr	r1, [pc, #96]	; (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f002 f9ea 	bl	8003504 <HAL_CAN_AddTxMessage>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ac>
  			  Error_Handler();
 8001136:	f000 fd43 	bl	8001bc0 <Error_Handler>
  		  }
  		  break;
 800113a:	e003      	b.n	8001144 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ac>
  		  break;
 800113c:	bf00      	nop
 800113e:	e002      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  		  break;
 8001140:	bf00      	nop
 8001142:	e000      	b.n	8001146 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ae>
  		  break;
 8001144:	bf00      	nop
  };
  counter ++;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f8>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f8>)
 8001150:	801a      	strh	r2, [r3, #0]

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	; 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	00000000 	.word	0x00000000
 8001164:	40c38800 	.word	0x40c38800
 8001168:	e76c8b44 	.word	0xe76c8b44
 800116c:	403269fb 	.word	0x403269fb
 8001170:	00000000 	.word	0x00000000
 8001174:	412e8480 	.word	0x412e8480
 8001178:	200002f4 	.word	0x200002f4
 800117c:	40007400 	.word	0x40007400
 8001180:	2000005c 	.word	0x2000005c
 8001184:	cccccccd 	.word	0xcccccccd
 8001188:	42c80000 	.word	0x42c80000
 800118c:	20000348 	.word	0x20000348
 8001190:	20000030 	.word	0x20000030

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f001 f8a0 	bl	80022dc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f892 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f000 fc72 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a4:	f000 fc52 	bl	8001a4c <MX_DMA_Init>
  MX_ADC1_Init();
 80011a8:	f000 f8f0 	bl	800138c <MX_ADC1_Init>
  MX_CAN_Init();
 80011ac:	f000 f96a 	bl	8001484 <MX_CAN_Init>
  MX_DAC_Init();
 80011b0:	f000 f9ce 	bl	8001550 <MX_DAC_Init>
  MX_TIM1_Init();
 80011b4:	f000 fa36 	bl	8001624 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011b8:	f000 fa8e 	bl	80016d8 <MX_TIM2_Init>
  MX_TIM15_Init();
 80011bc:	f000 fae0 	bl	8001780 <MX_TIM15_Init>
  MX_TIM16_Init();
 80011c0:	f000 fb74 	bl	80018ac <MX_TIM16_Init>
  MX_TIM17_Init();
 80011c4:	f000 fb98 	bl	80018f8 <MX_TIM17_Init>
  MX_I2C1_Init();
 80011c8:	f000 f9ec 	bl	80015a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011cc:	f000 fc0e 	bl	80019ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	4832      	ldr	r0, [pc, #200]	; (800129c <main+0x108>)
 80011d4:	f002 ff05 	bl	8003fe2 <HAL_DAC_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	4831      	ldr	r0, [pc, #196]	; (80012a0 <main+0x10c>)
 80011dc:	f004 ff4a 	bl	8006074 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	482f      	ldr	r0, [pc, #188]	; (80012a0 <main+0x10c>)
 80011e4:	f004 ff46 	bl	8006074 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011e8:	2100      	movs	r1, #0
 80011ea:	482e      	ldr	r0, [pc, #184]	; (80012a4 <main+0x110>)
 80011ec:	f001 fb3e 	bl	800286c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 3);
 80011f0:	2203      	movs	r2, #3
 80011f2:	492d      	ldr	r1, [pc, #180]	; (80012a8 <main+0x114>)
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <main+0x110>)
 80011f6:	f001 fa9d 	bl	8002734 <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2014      	movs	r0, #20
 8001200:	f002 fe97 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001204:	2014      	movs	r0, #20
 8001206:	f002 feb0 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  DAC1->DHR12R1 = 3000;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <main+0x118>)
 800120c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001210:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(pwm_target_left != pwm_left || pwm_target_right != pwm_right)
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <main+0x11c>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <main+0x120>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d105      	bne.n	800122a <main+0x96>
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <main+0x124>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <main+0x128>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d031      	beq.n	800128e <main+0xfa>
	  {
		  if(pwm_target_left > pwm_left)
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <main+0x11c>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <main+0x120>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d906      	bls.n	8001244 <main+0xb0>
		  {
			  setPWMLeft(pwm_left + 1);
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <main+0x120>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fc1f 	bl	8000a80 <setPWMLeft>
 8001242:	e00b      	b.n	800125c <main+0xc8>
		  }
		  else if(pwm_target_left < pwm_left)
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <main+0x11c>)
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <main+0x120>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d205      	bcs.n	800125c <main+0xc8>
		  {
			  setPWMLeft(pwm_left - 1);
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <main+0x120>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc12 	bl	8000a80 <setPWMLeft>
		  }
		  if(pwm_target_right > pwm_right)
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <main+0x124>)
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <main+0x128>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d906      	bls.n	8001276 <main+0xe2>
		  {
		  	  setPWMRight(pwm_right + 1);
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <main+0x128>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fc4c 	bl	8000b0c <setPWMRight>
 8001274:	e00b      	b.n	800128e <main+0xfa>
		  }
		  else if(pwm_target_right < pwm_right)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <main+0x124>)
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <main+0x128>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d205      	bcs.n	800128e <main+0xfa>
		  {
		  	  setPWMRight(pwm_right - 1);
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <main+0x128>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fc3f 	bl	8000b0c <setPWMRight>
		  }
	  }
	  HAL_Delay(accl);
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <main+0x12c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f888 	bl	80023a8 <HAL_Delay>
	  if(pwm_target_left != pwm_left || pwm_target_right != pwm_right)
 8001298:	e7bb      	b.n	8001212 <main+0x7e>
 800129a:	bf00      	nop
 800129c:	20000244 	.word	0x20000244
 80012a0:	200000b0 	.word	0x200000b0
 80012a4:	20000170 	.word	0x20000170
 80012a8:	2000005c 	.word	0x2000005c
 80012ac:	40007400 	.word	0x40007400
 80012b0:	20000001 	.word	0x20000001
 80012b4:	20000003 	.word	0x20000003
 80012b8:	20000002 	.word	0x20000002
 80012bc:	20000004 	.word	0x20000004
 80012c0:	20000000 	.word	0x20000000

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09c      	sub	sp, #112	; 0x70
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ce:	2228      	movs	r2, #40	; 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 f942 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2234      	movs	r2, #52	; 0x34
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 f934 	bl	800755c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001304:	2300      	movs	r3, #0
 8001306:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001308:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800130c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fb30 	bl	8004978 <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800131e:	f000 fc4f 	bl	8001bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001326:	2300      	movs	r3, #0
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fa23 	bl	8005788 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001348:	f000 fc3a 	bl	8001bc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <SystemClock_Config+0xc4>)
 800134e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4618      	mov	r0, r3
 8001372:	f004 fc3f 	bl	8005bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800137c:	f000 fc20 	bl	8001bc0 <Error_Handler>
  }
}
 8001380:	bf00      	nop
 8001382:	3770      	adds	r7, #112	; 0x70
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	001c10a1 	.word	0x001c10a1

0800138c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b33      	ldr	r3, [pc, #204]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013d4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013e2:	2203      	movs	r2, #3
 80013e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC1_Init+0xf4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <MX_ADC1_Init+0xf4>)
 8001402:	f001 f811 	bl	8002428 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 800140c:	f000 fbd8 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001410:	2308      	movs	r3, #8
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800141c:	2305      	movs	r3, #5
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	; (8001480 <MX_ADC1_Init+0xf4>)
 800142e:	f001 fa87 	bl	8002940 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001438:	f000 fbc2 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800143c:	2307      	movs	r3, #7
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001440:	2302      	movs	r3, #2
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001444:	2304      	movs	r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_ADC1_Init+0xf4>)
 800144e:	f001 fa77 	bl	8002940 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001458:	f000 fbb2 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800145c:	2306      	movs	r3, #6
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001460:	2303      	movs	r3, #3
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_ADC1_Init+0xf4>)
 800146a:	f001 fa69 	bl	8002940 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001474:	f000 fba4 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000170 	.word	0x20000170

08001484 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <MX_CAN_Init+0xc4>)
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <MX_CAN_Init+0xc8>)
 800148e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <MX_CAN_Init+0xc4>)
 8001492:	2204      	movs	r2, #4
 8001494:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MX_CAN_Init+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <MX_CAN_Init+0xc4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <MX_CAN_Init+0xc4>)
 80014a4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80014a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <MX_CAN_Init+0xc4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_CAN_Init+0xc4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <MX_CAN_Init+0xc4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MX_CAN_Init+0xc4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_CAN_Init+0xc4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <MX_CAN_Init+0xc4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <MX_CAN_Init+0xc4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014d4:	481c      	ldr	r0, [pc, #112]	; (8001548 <MX_CAN_Init+0xc4>)
 80014d6:	f001 fe0c 	bl	80030f2 <HAL_CAN_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014e0:	f000 fb6e 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sf;
    sf.FilterMaskIdHigh = 0xFFFF;
 80014e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e8:	60bb      	str	r3, [r7, #8]
    sf.FilterMaskIdLow = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
    sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
    sf.FilterBank = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
    sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
    sf.FilterScale = CAN_FILTERSCALE_32BIT;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61fb      	str	r3, [r7, #28]
    sf.FilterActivation = CAN_FILTER_ENABLE;
 80014fe:	2301      	movs	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
    sf.FilterIdLow= 0;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
    sf.FilterIdHigh = 0x001 << 5;
 8001506:	2320      	movs	r3, #32
 8001508:	603b      	str	r3, [r7, #0]
    if (HAL_CAN_ConfigFilter(&hcan, &sf) != HAL_OK) {
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_CAN_Init+0xc4>)
 8001510:	f001 feea 	bl	80032e8 <HAL_CAN_ConfigFilter>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_CAN_Init+0x9a>
      Error_Handler();
 800151a:	f000 fb51 	bl	8001bc0 <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800151e:	2102      	movs	r1, #2
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_CAN_Init+0xc4>)
 8001522:	f002 f9dc 	bl	80038de <HAL_CAN_ActivateNotification>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_CAN_Init+0xac>
        Error_Handler();
 800152c:	f000 fb48 	bl	8001bc0 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_CAN_Init+0xc4>)
 8001532:	f001 ffa3 	bl	800347c <HAL_CAN_Start>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_CAN_Init+0xbc>
      Error_Handler();
 800153c:	f000 fb40 	bl	8001bc0 <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000148 	.word	0x20000148
 800154c:	40006400 	.word	0x40006400

08001550 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_DAC_Init+0x4c>)
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <MX_DAC_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_DAC_Init+0x4c>)
 8001568:	f002 fd19 	bl	8003f9e <HAL_DAC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001572:	f000 fb25 	bl	8001bc0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_DAC_Init+0x4c>)
 8001586:	f002 fd63 	bl	8004050 <HAL_DAC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001590:	f000 fb16 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000244 	.word	0x20000244
 80015a0:	40007400 	.word	0x40007400

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_I2C1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_I2C1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_I2C1_Init+0x74>)
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <MX_I2C1_Init+0x7c>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_I2C1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_I2C1_Init+0x74>)
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_I2C1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_I2C1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_I2C1_Init+0x74>)
 80015e0:	f003 f8a4 	bl	800472c <HAL_I2C_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ea:	f000 fae9 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <MX_I2C1_Init+0x74>)
 80015f2:	f003 f92a 	bl	800484a <HAL_I2CEx_ConfigAnalogFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 fae0 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_I2C1_Init+0x74>)
 8001604:	f003 f96c 	bl	80048e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 fad7 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000064 	.word	0x20000064
 800161c:	40005400 	.word	0x40005400
 8001620:	2000090e 	.word	0x2000090e

08001624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <MX_TIM1_Init+0xb0>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_TIM1_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_TIM1_Init+0xac>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_TIM1_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001670:	f004 fc52 	bl	8005f18 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800167a:	f000 faa1 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001698:	f004 fee2 	bl	8006460 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016a2:	f000 fa8d 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_TIM1_Init+0xac>)
 80016b8:	f005 fb60 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80016c2:	f000 fa7d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002a4 	.word	0x200002a4
 80016d4:	40012c00 	.word	0x40012c00

080016d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_TIM2_Init+0xa4>)
 80016f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_TIM2_Init+0xa4>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_TIM2_Init+0xa4>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_TIM2_Init+0xa4>)
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_TIM2_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_TIM2_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <MX_TIM2_Init+0xa4>)
 8001720:	f004 fbfa 	bl	8005f18 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800172a:	f000 fa49 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800172e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001732:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_TIM2_Init+0xa4>)
 8001748:	f004 fe8a 	bl	8006460 <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 fa35 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_TIM2_Init+0xa4>)
 8001764:	f005 fb0a 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800176e:	f000 fa27 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002fc 	.word	0x200002fc

08001780 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b096      	sub	sp, #88	; 0x58
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001786:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	222c      	movs	r2, #44	; 0x2c
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 fed5 	bl	800755c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017b4:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <MX_TIM15_Init+0x128>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017b8:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3200;
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017c6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80017ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017de:	4831      	ldr	r0, [pc, #196]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017e0:	f004 fbf1 	bl	8005fc6 <HAL_TIM_PWM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 f9e9 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ee:	2320      	movs	r3, #32
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4829      	ldr	r0, [pc, #164]	; (80018a4 <MX_TIM15_Init+0x124>)
 80017fe:	f005 fabd 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001808:	f000 f9da 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180c:	2360      	movs	r3, #96	; 0x60
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1200;
 8001810:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <MX_TIM15_Init+0x124>)
 8001834:	f004 fd04 	bl	8006240 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800183e:	f000 f9bf 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8001842:	23c8      	movs	r3, #200	; 0xc8
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800184a:	2204      	movs	r2, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_TIM15_Init+0x124>)
 8001850:	f004 fcf6 	bl	8006240 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM15_Init+0xde>
  {
    Error_Handler();
 800185a:	f000 f9b1 	bl	8001bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM15_Init+0x124>)
 8001886:	f005 fadf 	bl	8006e48 <HAL_TIMEx_ConfigBreakDeadTime>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 8001890:	f000 f996 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM15_Init+0x124>)
 8001896:	f000 fbcb 	bl	8002030 <HAL_TIM_MspPostInit>

}
 800189a:	bf00      	nop
 800189c:	3758      	adds	r7, #88	; 0x58
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000b0 	.word	0x200000b0
 80018a8:	40014000 	.word	0x40014000

080018ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <MX_TIM16_Init+0x48>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_TIM16_Init+0x44>)
 80018de:	f004 fb1b 	bl	8005f18 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80018e8:	f000 f96a 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000360 	.word	0x20000360
 80018f4:	40014400 	.word	0x40014400

080018f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b092      	sub	sp, #72	; 0x48
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	222c      	movs	r2, #44	; 0x2c
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fe1f 	bl	800755c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <MX_TIM17_Init+0xf0>)
 8001922:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <MX_TIM17_Init+0xec>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_TIM17_Init+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <MX_TIM17_Init+0xec>)
 800194c:	f004 fae4 	bl	8005f18 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001956:	f000 f933 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800195a:	4822      	ldr	r0, [pc, #136]	; (80019e4 <MX_TIM17_Init+0xec>)
 800195c:	f004 fb33 	bl	8005fc6 <HAL_TIM_PWM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001966:	f000 f92b 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	; 0x60
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <MX_TIM17_Init+0xec>)
 8001990:	f004 fc56 	bl	8006240 <HAL_TIM_PWM_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800199a:	f000 f911 	bl	8001bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM17_Init+0xec>)
 80019c6:	f005 fa3f 	bl	8006e48 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80019d0:	f000 f8f6 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM17_Init+0xec>)
 80019d6:	f000 fb2b 	bl	8002030 <HAL_TIM_MspPostInit>

}
 80019da:	bf00      	nop
 80019dc:	3748      	adds	r7, #72	; 0x48
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000fc 	.word	0x200000fc
 80019e8:	40014800 	.word	0x40014800

080019ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <MX_USART1_UART_Init+0x5c>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 80019f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80019fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART1_UART_Init+0x58>)
 8001a30:	f005 fa82 	bl	8006f38 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a3a:	f000 f8c1 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001c0 	.word	0x200001c0
 8001a48:	40013800 	.word	0x40013800

08001a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_DMA_Init+0x38>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <MX_DMA_Init+0x38>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_DMA_Init+0x38>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200b      	movs	r0, #11
 8001a70:	f002 fa5f 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a74:	200b      	movs	r0, #11
 8001a76:	f002 fa78 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	6153      	str	r3, [r2, #20]
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <MX_GPIO_Init+0x12c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	21c0      	movs	r1, #192	; 0xc0
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f002 fe05 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af8:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <MX_GPIO_Init+0x130>)
 8001afa:	f002 fdff 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	21c0      	movs	r1, #192	; 0xc0
 8001b02:	482e      	ldr	r0, [pc, #184]	; (8001bbc <MX_GPIO_Init+0x134>)
 8001b04:	f002 fdfa 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f002 fc7b 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f002 fc6c 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <MX_GPIO_Init+0x130>)
 8001b54:	f002 fc60 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_GPIO_Init+0x130>)
 8001b72:	f002 fc51 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b76:	23c0      	movs	r3, #192	; 0xc0
 8001b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <MX_GPIO_Init+0x134>)
 8001b8e:	f002 fc43 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_GPIO_Init+0x134>)
 8001ba8:	f002 fc36 	bl	8004418 <HAL_GPIO_Init>

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <Error_Handler+0x6>

08001bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_MspInit+0x44>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6193      	str	r3, [r2, #24]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_MspInit+0x44>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_MspInit+0x44>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_MspInit+0x44>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_MspInit+0x44>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c30:	d14c      	bne.n	8001ccc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_ADC_MspInit+0xc4>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c62:	2307      	movs	r3, #7
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <HAL_ADC_MspInit+0xc8>)
 8001c76:	f002 fbcf 	bl	8004418 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_ADC_MspInit+0xd0>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001cb2:	f002 fa1a 	bl	80040ea <HAL_DMA_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001cbc:	f7ff ff80 	bl	8001bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_ADC_MspInit+0xcc>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	20000258 	.word	0x20000258
 8001ce0:	40020008 	.word	0x40020008

08001ce4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_CAN_MspInit+0x90>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d131      	bne.n	8001d6a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_CAN_MspInit+0x94>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001d48:	2309      	movs	r3, #9
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f002 fb5f 	bl	8004418 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f002 f8e7 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001d64:	2014      	movs	r0, #20
 8001d66:	f002 f900 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40006400 	.word	0x40006400
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_DAC_MspInit+0x74>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d124      	bne.n	8001de8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	6153      	str	r3, [r2, #20]
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_DAC_MspInit+0x78>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f002 fb18 	bl	8004418 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40007400 	.word	0x40007400
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_I2C_MspInit+0xb8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d145      	bne.n	8001ea6 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6a:	f002 fad5 	bl	8004418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e72:	2312      	movs	r3, #18
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <HAL_I2C_MspInit+0xc0>)
 8001e8a:	f002 fac5 	bl	8004418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_I2C_MspInit+0xbc>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400

08001ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_TIM_Base_MspInit+0x120>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d128      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee8:	6193      	str	r3, [r2, #24]
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f00:	6153      	str	r3, [r2, #20]
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	482e      	ldr	r0, [pc, #184]	; (8001fe4 <HAL_TIM_Base_MspInit+0x128>)
 8001f2a:	f002 fa75 	bl	8004418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f2e:	e051      	b.n	8001fd4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d129      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f88:	f002 fa46 	bl	8004418 <HAL_GPIO_Init>
}
 8001f8c:	e022      	b.n	8001fd4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_TIM_Base_MspInit+0x12c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10c      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
}
 8001fb0:	e010      	b.n	8001fd4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM17)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_TIM_Base_MspInit+0x130>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10b      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_TIM_Base_MspInit+0x124>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3738      	adds	r7, #56	; 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_TIM_PWM_MspInit+0x38>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_TIM_PWM_MspInit+0x3c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40014000 	.word	0x40014000
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a31      	ldr	r2, [pc, #196]	; (8002114 <HAL_TIM_MspPostInit+0xe4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d13a      	bne.n	80020c8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4a30      	ldr	r2, [pc, #192]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	6153      	str	r3, [r2, #20]
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6153      	str	r3, [r2, #20]
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002082:	2308      	movs	r3, #8
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002092:	2309      	movs	r3, #9
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f002 f9ba 	bl	8004418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80020b6:	2301      	movs	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4816      	ldr	r0, [pc, #88]	; (800211c <HAL_TIM_MspPostInit+0xec>)
 80020c2:	f002 f9a9 	bl	8004418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80020c6:	e021      	b.n	800210c <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM17)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_TIM_MspPostInit+0xf0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d11c      	bne.n	800210c <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6153      	str	r3, [r2, #20]
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_TIM_MspPostInit+0xe8>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80020fc:	2301      	movs	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <HAL_TIM_MspPostInit+0xec>)
 8002108:	f002 f986 	bl	8004418 <HAL_GPIO_Init>
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40014000 	.word	0x40014000
 8002118:	40021000 	.word	0x40021000
 800211c:	48000400 	.word	0x48000400
 8002120:	40014800 	.word	0x40014800

08002124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d145      	bne.n	80021d2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002168:	6153      	str	r3, [r2, #20]
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	6153      	str	r3, [r2, #20]
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800218e:	2320      	movs	r3, #32
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800219e:	2307      	movs	r3, #7
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <HAL_UART_MspInit+0xc0>)
 80021aa:	f002 f935 	bl	8004418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c0:	2307      	movs	r3, #7
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	f002 f923 	bl	8004418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40021000 	.word	0x40021000
 80021e4:	48000800 	.word	0x48000800

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002234:	f000 f898 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA1_Channel1_IRQHandler+0x10>)
 8002242:	f001 fff8 	bl	8004236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000258 	.word	0x20000258

08002250 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002256:	f001 fb68 	bl	800392a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000148 	.word	0x20000148

08002264 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800228c:	480d      	ldr	r0, [pc, #52]	; (80022c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800228e:	490e      	ldr	r1, [pc, #56]	; (80022c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <LoopForever+0xe>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a4:	4c0b      	ldr	r4, [pc, #44]	; (80022d4 <LoopForever+0x16>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022b2:	f7ff ffd7 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f005 f92d 	bl	8007514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ba:	f7fe ff6b 	bl	8001194 <main>

080022be <LoopForever>:

LoopForever:
    b LoopForever
 80022be:	e7fe      	b.n	80022be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80022cc:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 80022d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80022d4:	200003cc 	.word	0x200003cc

080022d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_IRQHandler>
	...

080022dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_Init+0x28>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_Init+0x28>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f001 fe15 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f808 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fc66 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fe2d 	bl	8003f86 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f001 fdf5 	bl	8003f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000008 	.word	0x20000008
 8002360:	20000010 	.word	0x20000010
 8002364:	2000000c 	.word	0x2000000c

08002368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000010 	.word	0x20000010
 800238c:	200003c8 	.word	0x200003c8

08002390 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;  
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200003c8 	.word	0x200003c8

080023a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_Delay+0x40>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000010 	.word	0x20000010

080023ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b09a      	sub	sp, #104	; 0x68
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e169      	b.n	800271c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d176      	bne.n	8002548 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d152      	bne.n	8002508 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fbc7 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d13b      	bne.n	8002508 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fdcf 	bl	8003034 <ADC_Disable>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d12f      	bne.n	8002508 <HAL_ADC_Init+0xe0>
 80024a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d12b      	bne.n	8002508 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b8:	f023 0302 	bic.w	r3, r3, #2
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e4:	4b8f      	ldr	r3, [pc, #572]	; (8002724 <HAL_ADC_Init+0x2fc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a8f      	ldr	r2, [pc, #572]	; (8002728 <HAL_ADC_Init+0x300>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9a      	lsrs	r2, r3, #18
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024fa:	e002      	b.n	8002502 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002524:	d110      	bne.n	8002548 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f023 0312 	bic.w	r3, r3, #18
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 80d6 	bne.w	8002702 <HAL_ADC_Init+0x2da>
 8002556:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80d1 	bne.w	8002702 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80c9 	bne.w	8002702 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002578:	f043 0202 	orr.w	r2, r3, #2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_ADC_Init+0x304>)
 8002582:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <HAL_ADC_Init+0x180>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_Init+0x180>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_ADC_Init+0x182>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11c      	bne.n	80025e8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d010      	beq.n	80025d6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_Init+0x1a8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_Init+0x1a8>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Init+0x1aa>
 80025d0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80025d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e5b      	ldrb	r3, [r3, #25]
 80025ec:	035b      	lsls	r3, r3, #13
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d002      	beq.n	80025fc <HAL_ADC_Init+0x1d4>
 80025f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025fa:	e000      	b.n	80025fe <HAL_ADC_Init+0x1d6>
 80025fc:	2200      	movs	r2, #0
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260e:	4313      	orrs	r3, r2
 8002610:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11b      	bne.n	8002654 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e5b      	ldrb	r3, [r3, #25]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	3b01      	subs	r3, #1
 800262a:	045a      	lsls	r2, r3, #17
 800262c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262e:	4313      	orrs	r3, r2
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	663b      	str	r3, [r7, #96]	; 0x60
 8002636:	e00d      	b.n	8002654 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b01      	cmp	r3, #1
 800265a:	d007      	beq.n	800266c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	4313      	orrs	r3, r2
 8002666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002668:	4313      	orrs	r3, r2
 800266a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d114      	bne.n	80026a4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7e1b      	ldrb	r3, [r3, #24]
 8002692:	039a      	lsls	r2, r3, #14
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4313      	orrs	r3, r2
 800269e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026a0:	4313      	orrs	r3, r2
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_ADC_Init+0x308>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f023 010f 	bic.w	r1, r3, #15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
 80026d8:	e007      	b.n	80026ea <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 020f 	bic.w	r2, r2, #15
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f023 0303 	bic.w	r3, r3, #3
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002700:	e00a      	b.n	8002718 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f023 0312 	bic.w	r3, r3, #18
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800271c:	4618      	mov	r0, r3
 800271e:	3768      	adds	r7, #104	; 0x68
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000008 	.word	0x20000008
 8002728:	431bde83 	.word	0x431bde83
 800272c:	50000300 	.word	0x50000300
 8002730:	fff0c007 	.word	0xfff0c007

08002734 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d17e      	bne.n	8002850 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADC_Start_DMA+0x2c>
 800275c:	2302      	movs	r3, #2
 800275e:	e07a      	b.n	8002856 <HAL_ADC_Start_DMA+0x122>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fc05 	bl	8002f78 <ADC_Enable>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d166      	bne.n	8002846 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f023 0206 	bic.w	r2, r3, #6
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_ADC_Start_DMA+0x12c>)
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_ADC_Start_DMA+0x130>)
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_ADC_Start_DMA+0x134>)
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	221c      	movs	r2, #28
 80027fe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0210 	orr.w	r2, r2, #16
 800280e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	4619      	mov	r1, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f001 fca2 	bl	8004178 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0204 	orr.w	r2, r2, #4
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e006      	b.n	8002854 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800284e:	e001      	b.n	8002854 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002850:	2302      	movs	r3, #2
 8002852:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	08002ead 	.word	0x08002ead
 8002864:	08002f27 	.word	0x08002f27
 8002868:	08002f43 	.word	0x08002f43

0800286c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADCEx_Calibration_Start+0x1c>
 8002884:	2302      	movs	r3, #2
 8002886:	e057      	b.n	8002938 <HAL_ADCEx_Calibration_Start+0xcc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fbcf 	bl	8003034 <ADC_Disable>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d146      	bne.n	800292e <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80028b4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ca:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028da:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80028dc:	f7ff fd58 	bl	8002390 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028e2:	e014      	b.n	800290e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028e4:	f7ff fd54 	bl	8002390 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b0a      	cmp	r3, #10
 80028f0:	d90d      	bls.n	800290e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f023 0312 	bic.w	r3, r3, #18
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e014      	b.n	8002938 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291c:	d0e2      	beq.n	80028e4 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b09b      	sub	sp, #108	; 0x6c
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x22>
 800295e:	2302      	movs	r3, #2
 8002960:	e299      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x556>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 827d 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d81c      	bhi.n	80029bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	461a      	mov	r2, r3
 8002996:	231f      	movs	r3, #31
 8002998:	4093      	lsls	r3, r2
 800299a:	43db      	mvns	r3, r3
 800299c:	4019      	ands	r1, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ba:	e063      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b09      	cmp	r3, #9
 80029c2:	d81e      	bhi.n	8002a02 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	221f      	movs	r2, #31
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	4019      	ands	r1, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	3b1e      	subs	r3, #30
 80029f4:	fa00 f203 	lsl.w	r2, r0, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002a00:	e040      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b0e      	cmp	r3, #14
 8002a08:	d81e      	bhi.n	8002a48 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	3b3c      	subs	r3, #60	; 0x3c
 8002a1e:	221f      	movs	r2, #31
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4019      	ands	r1, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	3b3c      	subs	r3, #60	; 0x3c
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
 8002a46:	e01d      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	3b5a      	subs	r3, #90	; 0x5a
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	4019      	ands	r1, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	3b5a      	subs	r3, #90	; 0x5a
 8002a78:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80e5 	bne.w	8002c5e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d91c      	bls.n	8002ad6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6999      	ldr	r1, [r3, #24]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b1e      	subs	r3, #30
 8002aae:	2207      	movs	r2, #7
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	4019      	ands	r1, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6898      	ldr	r0, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
 8002ad4:	e019      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6959      	ldr	r1, [r3, #20]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4019      	ands	r1, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6898      	ldr	r0, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	fa00 f203 	lsl.w	r2, r0, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d84f      	bhi.n	8002bcc <HAL_ADC_ConfigChannel+0x28c>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002bab 	.word	0x08002bab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b4a:	4b99      	ldr	r3, [pc, #612]	; (8002db0 <HAL_ADC_ConfigChannel+0x470>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	0691      	lsls	r1, r2, #26
 8002b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b56:	430a      	orrs	r2, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b64:	e07e      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b6c:	4b90      	ldr	r3, [pc, #576]	; (8002db0 <HAL_ADC_ConfigChannel+0x470>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	0691      	lsls	r1, r2, #26
 8002b76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b84:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b86:	e06d      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_ADC_ConfigChannel+0x470>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	0691      	lsls	r1, r2, #26
 8002b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ba6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ba8:	e05c      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bb0:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <HAL_ADC_ConfigChannel+0x470>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	0691      	lsls	r1, r2, #26
 8002bba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bc8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bca:	e04b      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c12:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c36:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c5c:	e001      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002c62:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x344>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x344>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x346>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 80ff 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d00f      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002cb2:	e049      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d91c      	bls.n	8002d10 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6999      	ldr	r1, [r3, #24]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3b1b      	subs	r3, #27
 8002ce8:	2207      	movs	r2, #7
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4019      	ands	r1, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6898      	ldr	r0, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1b      	subs	r3, #27
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	619a      	str	r2, [r3, #24]
 8002d0e:	e01b      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6959      	ldr	r1, [r3, #20]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	2207      	movs	r2, #7
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4019      	ands	r1, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6898      	ldr	r0, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_ADC_ConfigChannel+0x474>)
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d014      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d78:	2b12      	cmp	r3, #18
 8002d7a:	f040 8086 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d17f      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10d      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x478>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d106      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x478>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e005      	b.n	8002dba <HAL_ADC_ConfigChannel+0x47a>
 8002dae:	bf00      	nop
 8002db0:	83fff000 	.word	0x83fff000
 8002db4:	50000300 	.word	0x50000300
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d150      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x4a0>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x4a0>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x4a2>
 8002de0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13c      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d11d      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x4ea>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df6:	d118      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e02:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_ADC_ConfigChannel+0x564>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_ADC_ConfigChannel+0x568>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9a      	lsrs	r2, r3, #18
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e1a:	e002      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e28:	e02e      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b11      	cmp	r3, #17
 8002e30:	d10b      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x50a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3a:	d106      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e46:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e48:	e01e      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b12      	cmp	r3, #18
 8002e50:	d11a      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e5e:	e013      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e72:	e00a      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e86:	e000      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e88:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	376c      	adds	r7, #108	; 0x6c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d126      	bne.n	8002f14 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fa6d 	bl	80023ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f12:	e004      	b.n	8002f1e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fa63 	bl	8002400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fa53 	bl	8002414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d108      	bne.n	8002fa4 <ADC_Enable+0x2c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <ADC_Enable+0x2c>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <ADC_Enable+0x2e>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d13c      	bne.n	8003024 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <ADC_Enable+0xb8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0210 	orr.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e028      	b.n	8003026 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fe4:	f7ff f9d4 	bl	8002390 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fea:	e014      	b.n	8003016 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fec:	f7ff f9d0 	bl	8002390 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d90d      	bls.n	8003016 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d1e3      	bne.n	8002fec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	8000003f 	.word	0x8000003f

08003034 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <ADC_Disable+0x2c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <ADC_Disable+0x2c>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <ADC_Disable+0x2e>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d040      	beq.n	80030e8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030d 	and.w	r3, r3, #13
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10f      	bne.n	8003094 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0202 	orr.w	r2, r2, #2
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2203      	movs	r2, #3
 800308a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800308c:	f7ff f980 	bl	8002390 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003092:	e022      	b.n	80030da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01c      	b.n	80030ea <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030b0:	f7ff f96e 	bl	8002390 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d90d      	bls.n	80030da <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0210 	orr.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f043 0201 	orr.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e007      	b.n	80030ea <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d0e3      	beq.n	80030b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0ed      	b.n	80032e0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7fe fde7 	bl	8001ce4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0202 	bic.w	r2, r2, #2
 8003124:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003126:	f7ff f933 	bl	8002390 <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800312c:	e012      	b.n	8003154 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800312e:	f7ff f92f 	bl	8002390 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b0a      	cmp	r3, #10
 800313a:	d90b      	bls.n	8003154 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2205      	movs	r2, #5
 800314c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0c5      	b.n	80032e0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e5      	bne.n	800312e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003172:	f7ff f90d 	bl	8002390 <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003178:	e012      	b.n	80031a0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800317a:	f7ff f909 	bl	8002390 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b0a      	cmp	r3, #10
 8003186:	d90b      	bls.n	80031a0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2205      	movs	r2, #5
 8003198:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e09f      	b.n	80032e0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0e5      	beq.n	800317a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7e1b      	ldrb	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e007      	b.n	80031d8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7e5b      	ldrb	r3, [r3, #25]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e007      	b.n	8003202 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7e9b      	ldrb	r3, [r3, #26]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0220 	orr.w	r2, r2, #32
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0220 	bic.w	r2, r2, #32
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7edb      	ldrb	r3, [r3, #27]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0210 	bic.w	r2, r2, #16
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0210 	orr.w	r2, r2, #16
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7f1b      	ldrb	r3, [r3, #28]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0208 	orr.w	r2, r2, #8
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7f5b      	ldrb	r3, [r3, #29]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0204 	orr.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0204 	bic.w	r2, r2, #4
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	ea42 0103 	orr.w	r1, r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	1e5a      	subs	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d003      	beq.n	800330e <HAL_CAN_ConfigFilter+0x26>
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b02      	cmp	r3, #2
 800330a:	f040 80aa 	bne.w	8003462 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	43db      	mvns	r3, r3
 8003338:	401a      	ands	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d123      	bne.n	8003390 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800336a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3248      	adds	r2, #72	; 0x48
 8003370:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003384:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003386:	6979      	ldr	r1, [r7, #20]
 8003388:	3348      	adds	r3, #72	; 0x48
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d122      	bne.n	80033de <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3248      	adds	r2, #72	; 0x48
 80033be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033d4:	6979      	ldr	r1, [r7, #20]
 80033d6:	3348      	adds	r3, #72	; 0x48
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	401a      	ands	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033f8:	e007      	b.n	800340a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	431a      	orrs	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003424:	e007      	b.n	8003436 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	431a      	orrs	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	431a      	orrs	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003454:	f023 0201 	bic.w	r2, r3, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e006      	b.n	8003470 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d12e      	bne.n	80034ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe ff72 	bl	8002390 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034ae:	e012      	b.n	80034d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034b0:	f7fe ff6e 	bl	8002390 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b0a      	cmp	r3, #10
 80034bc:	d90b      	bls.n	80034d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2205      	movs	r2, #5
 80034ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e012      	b.n	80034fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e006      	b.n	80034fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003518:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003522:	7ffb      	ldrb	r3, [r7, #31]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d003      	beq.n	8003530 <HAL_CAN_AddTxMessage+0x2c>
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	2b02      	cmp	r3, #2
 800352c:	f040 80b8 	bne.w	80036a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a0 	beq.w	8003690 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0e1b      	lsrs	r3, r3, #24
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e09e      	b.n	80036ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003570:	2201      	movs	r2, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	409a      	lsls	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	6809      	ldr	r1, [r1, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3318      	adds	r3, #24
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	440b      	add	r3, r1
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e00f      	b.n	80035be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3318      	adds	r3, #24
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	440b      	add	r3, r1
 80035bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3318      	adds	r3, #24
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	440b      	add	r3, r1
 80035ce:	3304      	adds	r3, #4
 80035d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	7d1b      	ldrb	r3, [r3, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d111      	bne.n	80035fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3318      	adds	r3, #24
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3318      	adds	r3, #24
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	440b      	add	r3, r1
 80035fa:	3304      	adds	r3, #4
 80035fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3307      	adds	r3, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	061a      	lsls	r2, r3, #24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3306      	adds	r3, #6
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3305      	adds	r3, #5
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	3204      	adds	r2, #4
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	4610      	mov	r0, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	ea43 0200 	orr.w	r2, r3, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003634:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3303      	adds	r3, #3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	061a      	lsls	r2, r3, #24
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3302      	adds	r3, #2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3301      	adds	r3, #1
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4313      	orrs	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	4610      	mov	r0, r2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	ea43 0200 	orr.w	r2, r3, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	440b      	add	r3, r1
 8003666:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800366a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3318      	adds	r3, #24
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4413      	add	r3, r2
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3318      	adds	r3, #24
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e00e      	b.n	80036ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e006      	b.n	80036ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d003      	beq.n	80036de <HAL_CAN_GetRxMessage+0x24>
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f040 80f3 	bne.w	80038c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10e      	bne.n	8003702 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0e7      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d8      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	331b      	adds	r3, #27
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	4413      	add	r3, r2
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0204 	and.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	331b      	adds	r3, #27
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4413      	add	r3, r2
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0d5b      	lsrs	r3, r3, #21
 800374e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e00b      	b.n	8003770 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	331b      	adds	r3, #27
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	331b      	adds	r3, #27
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4413      	add	r3, r2
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0202 	and.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	331b      	adds	r3, #27
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	331b      	adds	r3, #27
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	331b      	adds	r3, #27
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0a1a      	lsrs	r2, r3, #8
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0c1a      	lsrs	r2, r3, #16
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3302      	adds	r3, #2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4413      	add	r3, r2
 8003822:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e1a      	lsrs	r2, r3, #24
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	3303      	adds	r3, #3
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4413      	add	r3, r2
 800383c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	4413      	add	r3, r2
 8003854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0a1a      	lsrs	r2, r3, #8
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	3305      	adds	r3, #5
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0c1a      	lsrs	r2, r3, #16
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	3306      	adds	r3, #6
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	4413      	add	r3, r2
 8003888:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e1a      	lsrs	r2, r3, #24
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	3307      	adds	r3, #7
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e007      	b.n	80038c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0220 	orr.w	r2, r2, #32
 80038be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e006      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d002      	beq.n	80038fc <HAL_CAN_ActivateNotification+0x1e>
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d109      	bne.n	8003910 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6959      	ldr	r1, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e006      	b.n	800391e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d07c      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d023      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f97d 	bl	8003c8c <HAL_CAN_TxMailbox0CompleteCallback>
 8003992:	e016      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	e00c      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e002      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f983 	bl	8003cc8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d024      	beq.n	8003a16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f95d 	bl	8003ca0 <HAL_CAN_TxMailbox1CompleteCallback>
 80039e6:	e016      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e00c      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e002      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f963 	bl	8003cdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d024      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f93d 	bl	8003cb4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a3a:	e016      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e00c      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e002      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f943 	bl	8003cf0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f92a 	bl	8003d04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fd f865 	bl	8000b98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f90c 	bl	8003d2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8f3 	bl	8003d18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8f6 	bl	8003d40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8ef 	bl	8003d54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d075      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06c      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d03d      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d038      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d017      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x302>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d804      	bhi.n	8003c0a <HAL_CAN_IRQHandler+0x2e0>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d009      	beq.n	8003c18 <HAL_CAN_IRQHandler+0x2ee>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d00c      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c08:	e024      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003c0a:	2b50      	cmp	r3, #80	; 0x50
 8003c0c:	d018      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x316>
 8003c0e:	2b60      	cmp	r3, #96	; 0x60
 8003c10:	d01b      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x320>
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d00f      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003c16:	e01d      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c20:	e018      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f043 0310 	orr.w	r3, r3, #16
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2a:	e013      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f043 0320 	orr.w	r3, r3, #32
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c34:	e00e      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c3e:	e009      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c48:	e004      	b.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c52:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c62:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f872 	bl	8003d68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c84:	bf00      	nop
 8003c86:	3728      	adds	r7, #40	; 0x28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	; (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff8e 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff29 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff3e 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff8e 	bl	8003e70 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5d 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff31 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa2 	bl	8003ed8 <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e014      	b.n	8003fda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fedb 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	795b      	ldrb	r3, [r3, #5]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_DAC_Start+0x16>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e025      	b.n	8004044 <HAL_DAC_Start+0x62>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	409a      	lsls	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004022:	2b3c      	cmp	r3, #60	; 0x3c
 8004024:	d107      	bne.n	8004036 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	795b      	ldrb	r3, [r3, #5]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_DAC_ConfigChannel+0x20>
 800406c:	2302      	movs	r3, #2
 800406e:	e036      	b.n	80040de <HAL_DAC_ConfigChannel+0x8e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2202      	movs	r2, #2
 800407a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004084:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4013      	ands	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	22c0      	movs	r2, #192	; 0xc0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e037      	b.n	8004170 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004116:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800411a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f940 	bl	80043d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}  
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_DMA_Start_IT+0x20>
 8004194:	2302      	movs	r3, #2
 8004196:	e04a      	b.n	800422e <HAL_DMA_Start_IT+0xb6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d13a      	bne.n	8004220 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f8d4 	bl	800437c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 020e 	orr.w	r2, r2, #14
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e00f      	b.n	800420e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 020a 	orr.w	r2, r2, #10
 80041fc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0204 	bic.w	r2, r2, #4
 800420c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e005      	b.n	800422c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004228:	2302      	movs	r3, #2
 800422a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800422c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2204      	movs	r2, #4
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d024      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x72>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01f      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2104      	movs	r1, #4
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	e065      	b.n	8004374 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2202      	movs	r2, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02c      	beq.n	8004312 <HAL_DMA_IRQHandler+0xdc>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d027      	beq.n	8004312 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020a 	bic.w	r2, r2, #10
 80042de:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	2102      	movs	r1, #2
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d035      	beq.n	8004374 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004310:	e030      	b.n	8004374 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2208      	movs	r2, #8
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d028      	beq.n	8004374 <HAL_DMA_IRQHandler+0x13e>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d023      	beq.n	8004374 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020e 	bic.w	r2, r2, #14
 800433a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
    }
  }
}  
 8004372:	e7ff      	b.n	8004374 <HAL_DMA_IRQHandler+0x13e>
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d108      	bne.n	80043bc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ba:	e007      	b.n	80043cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <DMA_CalcBaseAndBitshift+0x34>)
 80043e8:	4413      	add	r3, r2
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <DMA_CalcBaseAndBitshift+0x38>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <DMA_CalcBaseAndBitshift+0x3c>)
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	bffdfff8 	.word	0xbffdfff8
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020000 	.word	0x40020000

08004418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004426:	e14e      	b.n	80046c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	4013      	ands	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8140 	beq.w	80046c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d00b      	beq.n	8004460 <HAL_GPIO_Init+0x48>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d007      	beq.n	8004460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004454:	2b11      	cmp	r3, #17
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b12      	cmp	r3, #18
 800445e:	d130      	bne.n	80044c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4013      	ands	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004496:	2201      	movs	r2, #1
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0201 	and.w	r2, r3, #1
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0xea>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b12      	cmp	r3, #18
 8004500:	d123      	bne.n	800454a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	08da      	lsrs	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3208      	adds	r2, #8
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	08da      	lsrs	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3208      	adds	r2, #8
 8004544:	6939      	ldr	r1, [r7, #16]
 8004546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0203 	and.w	r2, r3, #3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 809a 	beq.w	80046c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458c:	4b55      	ldr	r3, [pc, #340]	; (80046e4 <HAL_GPIO_Init+0x2cc>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4a54      	ldr	r2, [pc, #336]	; (80046e4 <HAL_GPIO_Init+0x2cc>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6193      	str	r3, [r2, #24]
 8004598:	4b52      	ldr	r3, [pc, #328]	; (80046e4 <HAL_GPIO_Init+0x2cc>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045a4:	4a50      	ldr	r2, [pc, #320]	; (80046e8 <HAL_GPIO_Init+0x2d0>)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	3302      	adds	r3, #2
 80045ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	220f      	movs	r2, #15
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045ce:	d013      	beq.n	80045f8 <HAL_GPIO_Init+0x1e0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a46      	ldr	r2, [pc, #280]	; (80046ec <HAL_GPIO_Init+0x2d4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00d      	beq.n	80045f4 <HAL_GPIO_Init+0x1dc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <HAL_GPIO_Init+0x2d8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <HAL_GPIO_Init+0x1d8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a44      	ldr	r2, [pc, #272]	; (80046f4 <HAL_GPIO_Init+0x2dc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_GPIO_Init+0x1d4>
 80045e8:	2303      	movs	r3, #3
 80045ea:	e006      	b.n	80045fa <HAL_GPIO_Init+0x1e2>
 80045ec:	2305      	movs	r3, #5
 80045ee:	e004      	b.n	80045fa <HAL_GPIO_Init+0x1e2>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e002      	b.n	80045fa <HAL_GPIO_Init+0x1e2>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_GPIO_Init+0x1e2>
 80045f8:	2300      	movs	r3, #0
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	f002 0203 	and.w	r2, r2, #3
 8004600:	0092      	lsls	r2, r2, #2
 8004602:	4093      	lsls	r3, r2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800460a:	4937      	ldr	r1, [pc, #220]	; (80046e8 <HAL_GPIO_Init+0x2d0>)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004618:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800463c:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004642:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004666:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800466c:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	43db      	mvns	r3, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004696:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43db      	mvns	r3, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aea9 	bne.w	8004428 <HAL_GPIO_Init+0x10>
  }
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40010000 	.word	0x40010000
 80046ec:	48000400 	.word	0x48000400
 80046f0:	48000800 	.word	0x48000800
 80046f4:	48000c00 	.word	0x48000c00
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800470c:	787b      	ldrb	r3, [r7, #1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004718:	e002      	b.n	8004720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e081      	b.n	8004842 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fb50 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800477c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800478c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d107      	bne.n	80047a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	e006      	b.n	80047b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d104      	bne.n	80047c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	ea42 0103 	orr.w	r1, r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b20      	cmp	r3, #32
 800485e:	d138      	bne.n	80048d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800486a:	2302      	movs	r3, #2
 800486c:	e032      	b.n	80048d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2224      	movs	r2, #36	; 0x24
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800489c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d139      	bne.n	800496a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004900:	2302      	movs	r3, #2
 8004902:	e033      	b.n	800496c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2224      	movs	r2, #36	; 0x24
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004932:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800497e:	af00      	add	r7, sp, #0
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f000 bef4 	b.w	800577a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 816a 	beq.w	8004c76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049a2:	4bb3      	ldr	r3, [pc, #716]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049ae:	4bb0      	ldr	r3, [pc, #704]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d159      	bne.n	8004a6e <HAL_RCC_OscConfig+0xf6>
 80049ba:	4bad      	ldr	r3, [pc, #692]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c6:	d152      	bne.n	8004a6e <HAL_RCC_OscConfig+0xf6>
 80049c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	fab3 f383 	clz	r3, r3
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d102      	bne.n	80049fa <HAL_RCC_OscConfig+0x82>
 80049f4:	4b9e      	ldr	r3, [pc, #632]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	e015      	b.n	8004a26 <HAL_RCC_OscConfig+0xae>
 80049fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a12:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a22:	4b93      	ldr	r3, [pc, #588]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a32:	fa92 f2a2 	rbit	r2, r2
 8004a36:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a3e:	fab2 f282 	clz	r2, r2
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	f042 0220 	orr.w	r2, r2, #32
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	f002 021f 	and.w	r2, r2, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f202 	lsl.w	r2, r1, r2
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 810c 	beq.w	8004c74 <HAL_RCC_OscConfig+0x2fc>
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 8106 	bne.w	8004c74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f000 be86 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x110>
 8004a7a:	4b7d      	ldr	r3, [pc, #500]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7c      	ldr	r2, [pc, #496]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e030      	b.n	8004aea <HAL_RCC_OscConfig+0x172>
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x134>
 8004a92:	4b77      	ldr	r3, [pc, #476]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a76      	ldr	r2, [pc, #472]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b74      	ldr	r3, [pc, #464]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a73      	ldr	r2, [pc, #460]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01e      	b.n	8004aea <HAL_RCC_OscConfig+0x172>
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x15a>
 8004ab8:	4b6d      	ldr	r3, [pc, #436]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a6c      	ldr	r2, [pc, #432]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a69      	ldr	r2, [pc, #420]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e00b      	b.n	8004aea <HAL_RCC_OscConfig+0x172>
 8004ad2:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a66      	ldr	r2, [pc, #408]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b64      	ldr	r3, [pc, #400]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a63      	ldr	r2, [pc, #396]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aea:	4b61      	ldr	r3, [pc, #388]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f023 020f 	bic.w	r2, r3, #15
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	495d      	ldr	r1, [pc, #372]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d059      	beq.n	8004bbc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fc42 	bl	8002390 <HAL_GetTick>
 8004b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b12:	f7fd fc3d 	bl	8002390 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d902      	bls.n	8004b28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	f000 be29 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
 8004b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_OscConfig+0x1e2>
 8004b54:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	e015      	b.n	8004b86 <HAL_RCC_OscConfig+0x20e>
 8004b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b66:	fa93 f3a3 	rbit	r3, r3
 8004b6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b76:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b92:	fa92 f2a2 	rbit	r2, r2
 8004b96:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b9e:	fab2 f282 	clz	r2, r2
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	f042 0220 	orr.w	r2, r2, #32
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	f002 021f 	and.w	r2, r2, #31
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ab      	beq.n	8004b12 <HAL_RCC_OscConfig+0x19a>
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fbe8 	bl	8002390 <HAL_GetTick>
 8004bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc6:	f7fd fbe3 	bl	8002390 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d902      	bls.n	8004bdc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	f000 bdcf 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
 8004bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004bf0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d102      	bne.n	8004c0e <HAL_RCC_OscConfig+0x296>
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	e015      	b.n	8004c3a <HAL_RCC_OscConfig+0x2c2>
 8004c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <HAL_RCC_OscConfig+0x2f8>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c46:	fa92 f2a2 	rbit	r2, r2
 8004c4a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c52:	fab2 f282 	clz	r2, r2
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	f042 0220 	orr.w	r2, r2, #32
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	f002 021f 	and.w	r2, r2, #31
 8004c62:	2101      	movs	r1, #1
 8004c64:	fa01 f202 	lsl.w	r2, r1, r2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ab      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x24e>
 8004c6e:	e002      	b.n	8004c76 <HAL_RCC_OscConfig+0x2fe>
 8004c70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 816f 	beq.w	8004f64 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c86:	4bd0      	ldr	r3, [pc, #832]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c92:	4bcd      	ldr	r3, [pc, #820]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d16c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x400>
 8004c9e:	4bca      	ldr	r3, [pc, #808]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d166      	bne.n	8004d78 <HAL_RCC_OscConfig+0x400>
 8004caa:	2302      	movs	r3, #2
 8004cac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004cbc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <HAL_RCC_OscConfig+0x362>
 8004cd4:	4bbc      	ldr	r3, [pc, #752]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	e013      	b.n	8004d02 <HAL_RCC_OscConfig+0x38a>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cec:	2302      	movs	r3, #2
 8004cee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cfe:	4bb2      	ldr	r3, [pc, #712]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2202      	movs	r2, #2
 8004d04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d0c:	fa92 f2a2 	rbit	r2, r2
 8004d10:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d14:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f042 0220 	orr.w	r2, r2, #32
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f002 021f 	and.w	r2, r2, #31
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_RCC_OscConfig+0x3cc>
 8004d34:	1d3b      	adds	r3, r7, #4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f000 bd1b 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d44:	4ba0      	ldr	r3, [pc, #640]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	21f8      	movs	r1, #248	; 0xf8
 8004d54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d5c:	fa91 f1a1 	rbit	r1, r1
 8004d60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d68:	fab1 f181 	clz	r1, r1
 8004d6c:	b2c9      	uxtb	r1, r1
 8004d6e:	408b      	lsls	r3, r1
 8004d70:	4995      	ldr	r1, [pc, #596]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	e0f5      	b.n	8004f64 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8085 	beq.w	8004e8e <HAL_RCC_OscConfig+0x516>
 8004d84:	2301      	movs	r3, #1
 8004d86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	461a      	mov	r2, r3
 8004dac:	2301      	movs	r3, #1
 8004dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd faee 	bl	8002390 <HAL_GetTick>
 8004db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fd fae9 	bl	8002390 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	f000 bcd5 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004de2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de6:	fab3 f383 	clz	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_RCC_OscConfig+0x488>
 8004dfa:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	e013      	b.n	8004e28 <HAL_RCC_OscConfig+0x4b0>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e12:	2302      	movs	r3, #2
 8004e14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e32:	fa92 f2a2 	rbit	r2, r2
 8004e36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e3e:	fab2 f282 	clz	r2, r2
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	f042 0220 	orr.w	r2, r2, #32
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	f002 021f 	and.w	r2, r2, #31
 8004e4e:	2101      	movs	r1, #1
 8004e50:	fa01 f202 	lsl.w	r2, r1, r2
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0af      	beq.n	8004dba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	21f8      	movs	r1, #248	; 0xf8
 8004e6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e72:	fa91 f1a1 	rbit	r1, r1
 8004e76:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e7a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e7e:	fab1 f181 	clz	r1, r1
 8004e82:	b2c9      	uxtb	r1, r1
 8004e84:	408b      	lsls	r3, r1
 8004e86:	4950      	ldr	r1, [pc, #320]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	e06a      	b.n	8004f64 <HAL_RCC_OscConfig+0x5ec>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eba:	f7fd fa69 	bl	8002390 <HAL_GetTick>
 8004ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fd fa64 	bl	8002390 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d902      	bls.n	8004eda <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	f000 bc50 	b.w	800577a <HAL_RCC_OscConfig+0xe02>
 8004eda:	2302      	movs	r3, #2
 8004edc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <HAL_RCC_OscConfig+0x592>
 8004f04:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	e013      	b.n	8004f32 <HAL_RCC_OscConfig+0x5ba>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f2e:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <HAL_RCC_OscConfig+0x650>)
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2202      	movs	r2, #2
 8004f34:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f38:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f3c:	fa92 f2a2 	rbit	r2, r2
 8004f40:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	f042 0220 	orr.w	r2, r2, #32
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	f002 021f 	and.w	r2, r2, #31
 8004f58:	2101      	movs	r1, #1
 8004f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1af      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f64:	1d3b      	adds	r3, r7, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80da 	beq.w	8005128 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d069      	beq.n	8005052 <HAL_RCC_OscConfig+0x6da>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_OscConfig+0x654>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa8:	f7fd f9f2 	bl	8002390 <HAL_GetTick>
 8004fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb0:	e00e      	b.n	8004fd0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fd f9ed 	bl	8002390 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d906      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e3d9      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	10908120 	.word	0x10908120
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fe2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fa93 f2a3 	rbit	r2, r3
 8004ff4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ffe:	2202      	movs	r2, #2
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	fa93 f2a3 	rbit	r2, r3
 800500c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005010:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	4ba5      	ldr	r3, [pc, #660]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005016:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800501a:	2102      	movs	r1, #2
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	fa93 f1a3 	rbit	r1, r3
 8005028:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800502c:	6019      	str	r1, [r3, #0]
  return result;
 800502e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	2101      	movs	r1, #1
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0b0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x63a>
 8005050:	e06a      	b.n	8005128 <HAL_RCC_OscConfig+0x7b0>
 8005052:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	fa93 f2a3 	rbit	r2, r3
 8005064:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005068:	601a      	str	r2, [r3, #0]
  return result;
 800506a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800506e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	4b8c      	ldr	r3, [pc, #560]	; (80052ac <HAL_RCC_OscConfig+0x934>)
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005084:	f7fd f984 	bl	8002390 <HAL_GetTick>
 8005088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	e009      	b.n	80050a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508e:	f7fd f97f 	bl	8002390 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e36b      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 80050a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050a6:	2202      	movs	r2, #2
 80050a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	fa93 f2a3 	rbit	r2, r3
 80050b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80050be:	2202      	movs	r2, #2
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fa93 f2a3 	rbit	r2, r3
 80050cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050d6:	2202      	movs	r2, #2
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f2a3 	rbit	r2, r3
 80050e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80050e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ea:	4b6f      	ldr	r3, [pc, #444]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80050ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050f2:	2102      	movs	r1, #2
 80050f4:	6019      	str	r1, [r3, #0]
 80050f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	fa93 f1a3 	rbit	r1, r3
 8005100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005104:	6019      	str	r1, [r3, #0]
  return result;
 8005106:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1b2      	bne.n	800508e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8158 	beq.w	80053e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513e:	4b5a      	ldr	r3, [pc, #360]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d112      	bne.n	8005170 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4a56      	ldr	r2, [pc, #344]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	61d3      	str	r3, [r2, #28]
 8005156:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f107 0308 	add.w	r3, r7, #8
 8005168:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_RCC_OscConfig+0x938>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11a      	bne.n	80051b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x938>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4b      	ldr	r2, [pc, #300]	; (80052b0 <HAL_RCC_OscConfig+0x938>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005188:	f7fd f902 	bl	8002390 <HAL_GetTick>
 800518c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	e009      	b.n	80051a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7fd f8fd 	bl	8002390 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e2e9      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCC_OscConfig+0x938>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x852>
 80051bc:	4b3a      	ldr	r3, [pc, #232]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	4a39      	ldr	r2, [pc, #228]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6213      	str	r3, [r2, #32]
 80051c8:	e02f      	b.n	800522a <HAL_RCC_OscConfig+0x8b2>
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10c      	bne.n	80051ee <HAL_RCC_OscConfig+0x876>
 80051d4:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	6213      	str	r3, [r2, #32]
 80051e0:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051e6:	f023 0304 	bic.w	r3, r3, #4
 80051ea:	6213      	str	r3, [r2, #32]
 80051ec:	e01d      	b.n	800522a <HAL_RCC_OscConfig+0x8b2>
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d10c      	bne.n	8005212 <HAL_RCC_OscConfig+0x89a>
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	e00b      	b.n	800522a <HAL_RCC_OscConfig+0x8b2>
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	6213      	str	r3, [r2, #32]
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d06b      	beq.n	800530c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005234:	f7fd f8ac 	bl	8002390 <HAL_GetTick>
 8005238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523c:	e00b      	b.n	8005256 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fd f8a7 	bl	8002390 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e291      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 8005256:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800525a:	2202      	movs	r2, #2
 800525c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fa93 f2a3 	rbit	r2, r3
 8005268:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005272:	2202      	movs	r2, #2
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	fa93 f2a3 	rbit	r2, r3
 8005280:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005284:	601a      	str	r2, [r3, #0]
  return result;
 8005286:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800528a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f043 0302 	orr.w	r3, r3, #2
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d109      	bne.n	80052b4 <HAL_RCC_OscConfig+0x93c>
 80052a0:	4b01      	ldr	r3, [pc, #4]	; (80052a8 <HAL_RCC_OscConfig+0x930>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	e014      	b.n	80052d0 <HAL_RCC_OscConfig+0x958>
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	10908120 	.word	0x10908120
 80052b0:	40007000 	.word	0x40007000
 80052b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052b8:	2202      	movs	r2, #2
 80052ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	fa93 f2a3 	rbit	r2, r3
 80052c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	4bbb      	ldr	r3, [pc, #748]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052d4:	2102      	movs	r1, #2
 80052d6:	6011      	str	r1, [r2, #0]
 80052d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	fa92 f1a2 	rbit	r1, r2
 80052e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052e6:	6011      	str	r1, [r2, #0]
  return result;
 80052e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	fab2 f282 	clz	r2, r2
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	f002 021f 	and.w	r2, r2, #31
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d099      	beq.n	800523e <HAL_RCC_OscConfig+0x8c6>
 800530a:	e063      	b.n	80053d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530c:	f7fd f840 	bl	8002390 <HAL_GetTick>
 8005310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005314:	e00b      	b.n	800532e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fd f83b 	bl	8002390 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e225      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 800532e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005332:	2202      	movs	r2, #2
 8005334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800534a:	2202      	movs	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	fa93 f2a3 	rbit	r2, r3
 8005358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800535c:	601a      	str	r2, [r3, #0]
  return result;
 800535e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005362:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	fab3 f383 	clz	r3, r3
 8005368:	b2db      	uxtb	r3, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f043 0302 	orr.w	r3, r3, #2
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d102      	bne.n	800537e <HAL_RCC_OscConfig+0xa06>
 8005378:	4b90      	ldr	r3, [pc, #576]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	e00d      	b.n	800539a <HAL_RCC_OscConfig+0xa22>
 800537e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005382:	2202      	movs	r2, #2
 8005384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005386:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fa93 f2a3 	rbit	r2, r3
 8005390:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	4b89      	ldr	r3, [pc, #548]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800539e:	2102      	movs	r1, #2
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	fa92 f1a2 	rbit	r1, r2
 80053ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80053b0:	6011      	str	r1, [r2, #0]
  return result;
 80053b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	fab2 f282 	clz	r2, r2
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	f002 021f 	and.w	r2, r2, #31
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f202 	lsl.w	r2, r1, r2
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1a0      	bne.n	8005316 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b77      	ldr	r3, [pc, #476]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	4a76      	ldr	r2, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 81c2 	beq.w	8005778 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f4:	4b71      	ldr	r3, [pc, #452]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	f000 819c 	beq.w	800573a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b02      	cmp	r3, #2
 800540a:	f040 8114 	bne.w	8005636 <HAL_RCC_OscConfig+0xcbe>
 800540e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	fa93 f2a3 	rbit	r2, r3
 8005422:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005426:	601a      	str	r2, [r3, #0]
  return result;
 8005428:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800542c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005438:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	461a      	mov	r2, r3
 8005440:	2300      	movs	r3, #0
 8005442:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fc ffa4 	bl	8002390 <HAL_GetTick>
 8005448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800544c:	e009      	b.n	8005462 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544e:	f7fc ff9f 	bl	8002390 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e18b      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 8005462:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800546a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	fa93 f2a3 	rbit	r2, r3
 8005476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800547a:	601a      	str	r2, [r3, #0]
  return result;
 800547c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005480:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d102      	bne.n	800549c <HAL_RCC_OscConfig+0xb24>
 8005496:	4b49      	ldr	r3, [pc, #292]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	e01b      	b.n	80054d4 <HAL_RCC_OscConfig+0xb5c>
 800549c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	fa93 f2a3 	rbit	r2, r3
 80054b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fa93 f2a3 	rbit	r2, r3
 80054ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	4b3a      	ldr	r3, [pc, #232]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	fa92 f1a2 	rbit	r1, r2
 80054e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054ec:	6011      	str	r1, [r2, #0]
  return result;
 80054ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	fab2 f282 	clz	r2, r2
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	f042 0220 	orr.w	r2, r2, #32
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	f002 021f 	and.w	r2, r2, #31
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f202 	lsl.w	r2, r1, r2
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d19e      	bne.n	800544e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005510:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005518:	1d3b      	adds	r3, r7, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	430b      	orrs	r3, r1
 8005526:	4925      	ldr	r1, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 8005528:	4313      	orrs	r3, r2
 800552a:	604b      	str	r3, [r1, #4]
 800552c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	fa93 f2a3 	rbit	r2, r3
 8005540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005544:	601a      	str	r2, [r3, #0]
  return result;
 8005546:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800554a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005556:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	2301      	movs	r3, #1
 8005560:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fc ff15 	bl	8002390 <HAL_GetTick>
 8005566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800556a:	e009      	b.n	8005580 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800556c:	f7fc ff10 	bl	8002390 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e0fc      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 8005580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fa93 f2a3 	rbit	r2, r3
 8005594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005598:	601a      	str	r2, [r3, #0]
  return result;
 800559a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800559e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0xc48>
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <HAL_RCC_OscConfig+0xc44>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	e01e      	b.n	80055f8 <HAL_RCC_OscConfig+0xc80>
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
 80055c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	fa93 f2a3 	rbit	r2, r3
 80055d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	fa93 f2a3 	rbit	r2, r3
 80055ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	4b63      	ldr	r3, [pc, #396]	; (8005784 <HAL_RCC_OscConfig+0xe0c>)
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	fa92 f1a2 	rbit	r1, r2
 800560c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005610:	6011      	str	r1, [r2, #0]
  return result;
 8005612:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	fab2 f282 	clz	r2, r2
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	f042 0220 	orr.w	r2, r2, #32
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	f002 021f 	and.w	r2, r2, #31
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d09b      	beq.n	800556c <HAL_RCC_OscConfig+0xbf4>
 8005634:	e0a0      	b.n	8005778 <HAL_RCC_OscConfig+0xe00>
 8005636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800563a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800563e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	fa93 f2a3 	rbit	r2, r3
 800564a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564e:	601a      	str	r2, [r3, #0]
  return result;
 8005650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005654:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	461a      	mov	r2, r3
 8005668:	2300      	movs	r3, #0
 800566a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fc fe90 	bl	8002390 <HAL_GetTick>
 8005670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005674:	e009      	b.n	800568a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005676:	f7fc fe8b 	bl	8002390 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e077      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
 800568a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800568e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	fa93 f2a3 	rbit	r2, r3
 800569e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a2:	601a      	str	r2, [r3, #0]
  return result;
 80056a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d102      	bne.n	80056c4 <HAL_RCC_OscConfig+0xd4c>
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <HAL_RCC_OscConfig+0xe0c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	e01b      	b.n	80056fc <HAL_RCC_OscConfig+0xd84>
 80056c4:	f107 0320 	add.w	r3, r7, #32
 80056c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	f107 0320 	add.w	r3, r7, #32
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	fa93 f2a3 	rbit	r2, r3
 80056d8:	f107 031c 	add.w	r3, r7, #28
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f107 0318 	add.w	r3, r7, #24
 80056e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	fa93 f2a3 	rbit	r2, r3
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	4b22      	ldr	r3, [pc, #136]	; (8005784 <HAL_RCC_OscConfig+0xe0c>)
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f107 0210 	add.w	r2, r7, #16
 8005700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005704:	6011      	str	r1, [r2, #0]
 8005706:	f107 0210 	add.w	r2, r7, #16
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	fa92 f1a2 	rbit	r1, r2
 8005710:	f107 020c 	add.w	r2, r7, #12
 8005714:	6011      	str	r1, [r2, #0]
  return result;
 8005716:	f107 020c 	add.w	r2, r7, #12
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	fab2 f282 	clz	r2, r2
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f042 0220 	orr.w	r2, r2, #32
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	f002 021f 	and.w	r2, r2, #31
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f202 	lsl.w	r2, r1, r2
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d19e      	bne.n	8005676 <HAL_RCC_OscConfig+0xcfe>
 8005738:	e01e      	b.n	8005778 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_RCC_OscConfig+0xe0c>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005750:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	429a      	cmp	r2, r3
 8005760:	d108      	bne.n	8005774 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005762:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000

08005788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b09e      	sub	sp, #120	; 0x78
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e162      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a0:	4b90      	ldr	r3, [pc, #576]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d910      	bls.n	80057d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b8d      	ldr	r3, [pc, #564]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 0207 	bic.w	r2, r3, #7
 80057b6:	498b      	ldr	r1, [pc, #556]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b89      	ldr	r3, [pc, #548]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e14a      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057dc:	4b82      	ldr	r3, [pc, #520]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	497f      	ldr	r1, [pc, #508]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80dc 	beq.w	80059b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d13c      	bne.n	800587e <HAL_RCC_ClockConfig+0xf6>
 8005804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005808:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800580c:	fa93 f3a3 	rbit	r3, r3
 8005810:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005814:	fab3 f383 	clz	r3, r3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d102      	bne.n	800582e <HAL_RCC_ClockConfig+0xa6>
 8005828:	4b6f      	ldr	r3, [pc, #444]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	e00f      	b.n	800584e <HAL_RCC_ClockConfig+0xc6>
 800582e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005832:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005836:	fa93 f3a3 	rbit	r3, r3
 800583a:	667b      	str	r3, [r7, #100]	; 0x64
 800583c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005840:	663b      	str	r3, [r7, #96]	; 0x60
 8005842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005844:	fa93 f3a3 	rbit	r3, r3
 8005848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800584a:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005852:	65ba      	str	r2, [r7, #88]	; 0x58
 8005854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005856:	fa92 f2a2 	rbit	r2, r2
 800585a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800585c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800585e:	fab2 f282 	clz	r2, r2
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	f042 0220 	orr.w	r2, r2, #32
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	f002 021f 	and.w	r2, r2, #31
 800586e:	2101      	movs	r1, #1
 8005870:	fa01 f202 	lsl.w	r2, r1, r2
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d17b      	bne.n	8005972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0f3      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d13c      	bne.n	8005900 <HAL_RCC_ClockConfig+0x178>
 8005886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800588a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	fa93 f3a3 	rbit	r3, r3
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d102      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x128>
 80058aa:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	e00f      	b.n	80058d0 <HAL_RCC_ClockConfig+0x148>
 80058b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b8:	fa93 f3a3 	rbit	r3, r3
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
 80058be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058cc:	4b46      	ldr	r3, [pc, #280]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80058d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d8:	fa92 f2a2 	rbit	r2, r2
 80058dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e0:	fab2 f282 	clz	r2, r2
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	f042 0220 	orr.w	r2, r2, #32
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	f002 021f 	and.w	r2, r2, #31
 80058f0:	2101      	movs	r1, #1
 80058f2:	fa01 f202 	lsl.w	r2, r1, r2
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d13a      	bne.n	8005972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0b2      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
 8005900:	2302      	movs	r3, #2
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
 8005922:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	e00d      	b.n	8005944 <HAL_RCC_ClockConfig+0x1bc>
 8005928:	2302      	movs	r3, #2
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
 8005934:	2302      	movs	r3, #2
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	fa93 f3a3 	rbit	r3, r3
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2202      	movs	r2, #2
 8005946:	61ba      	str	r2, [r7, #24]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	fa92 f2a2 	rbit	r2, r2
 800594e:	617a      	str	r2, [r7, #20]
  return result;
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	fab2 f282 	clz	r2, r2
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	f042 0220 	orr.w	r2, r2, #32
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	f002 021f 	and.w	r2, r2, #31
 8005962:	2101      	movs	r1, #1
 8005964:	fa01 f202 	lsl.w	r2, r1, r2
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e079      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	491a      	ldr	r1, [pc, #104]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005984:	f7fc fd04 	bl	8002390 <HAL_GetTick>
 8005988:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fc fd00 	bl	8002390 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e061      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <HAL_RCC_ClockConfig+0x260>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 020c 	and.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1eb      	bne.n	800598c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d214      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 0207 	bic.w	r2, r3, #7
 80059ca:	4906      	ldr	r1, [pc, #24]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <HAL_RCC_ClockConfig+0x25c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e040      	b.n	8005a66 <HAL_RCC_ClockConfig+0x2de>
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <HAL_RCC_ClockConfig+0x2e8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	491a      	ldr	r1, [pc, #104]	; (8005a70 <HAL_RCC_ClockConfig+0x2e8>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <HAL_RCC_ClockConfig+0x2e8>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4912      	ldr	r1, [pc, #72]	; (8005a70 <HAL_RCC_ClockConfig+0x2e8>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a2a:	f000 f829 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCC_ClockConfig+0x2e8>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a38:	22f0      	movs	r2, #240	; 0xf0
 8005a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	fa92 f2a2 	rbit	r2, r2
 8005a42:	60fa      	str	r2, [r7, #12]
  return result;
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	fab2 f282 	clz	r2, r2
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	40d3      	lsrs	r3, r2
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x2ec>)
 8005a50:	5cd3      	ldrb	r3, [r2, r3]
 8005a52:	fa21 f303 	lsr.w	r3, r1, r3
 8005a56:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <HAL_RCC_ClockConfig+0x2f0>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCC_ClockConfig+0x2f4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fc fc52 	bl	8002308 <HAL_InitTick>
  
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3778      	adds	r7, #120	; 0x78
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	08007588 	.word	0x08007588
 8005a78:	20000008 	.word	0x20000008
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b08b      	sub	sp, #44	; 0x2c
 8005a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8005aae:	e03c      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ab0:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ab2:	623b      	str	r3, [r7, #32]
      break;
 8005ab4:	e03c      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005abc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ac0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	fa92 f2a2 	rbit	r2, r2
 8005ac8:	607a      	str	r2, [r7, #4]
  return result;
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	fab2 f282 	clz	r2, r2
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	40d3      	lsrs	r3, r2
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ad6:	5cd3      	ldrb	r3, [r2, r3]
 8005ad8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	220f      	movs	r2, #15
 8005ae4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	fa92 f2a2 	rbit	r2, r2
 8005aec:	60fa      	str	r2, [r7, #12]
  return result;
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	fab2 f282 	clz	r2, r2
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	40d3      	lsrs	r3, r2
 8005af8:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005afa:	5cd3      	ldrb	r3, [r2, r3]
 8005afc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b08:	4a0e      	ldr	r2, [pc, #56]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
 8005b18:	e004      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	623b      	str	r3, [r7, #32]
      break;
 8005b28:	e002      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b2c:	623b      	str	r3, [r7, #32]
      break;
 8005b2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b30:	6a3b      	ldr	r3, [r7, #32]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	372c      	adds	r7, #44	; 0x2c
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	007a1200 	.word	0x007a1200
 8005b48:	080075a0 	.word	0x080075a0
 8005b4c:	080075b0 	.word	0x080075b0
 8005b50:	003d0900 	.word	0x003d0900

08005b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000008 	.word	0x20000008

08005b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b72:	f7ff ffef 	bl	8005b54 <HAL_RCC_GetHCLKFreq>
 8005b76:	4601      	mov	r1, r0
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	fa92 f2a2 	rbit	r2, r2
 8005b8c:	603a      	str	r2, [r7, #0]
  return result;
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	fab2 f282 	clz	r2, r2
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	40d3      	lsrs	r3, r2
 8005b98:	4a04      	ldr	r2, [pc, #16]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	08007598 	.word	0x08007598

08005bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bb6:	f7ff ffcd 	bl	8005b54 <HAL_RCC_GetHCLKFreq>
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bc4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	fa92 f2a2 	rbit	r2, r2
 8005bd0:	603a      	str	r2, [r7, #0]
  return result;
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	fab2 f282 	clz	r2, r2
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	40d3      	lsrs	r3, r2
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bde:	5cd3      	ldrb	r3, [r2, r3]
 8005be0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	08007598 	.word	0x08007598

08005bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b092      	sub	sp, #72	; 0x48
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80d4 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c18:	4b4e      	ldr	r3, [pc, #312]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	4a4a      	ldr	r2, [pc, #296]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	61d3      	str	r3, [r2, #28]
 8005c30:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c42:	4b45      	ldr	r3, [pc, #276]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d118      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c4e:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a41      	ldr	r2, [pc, #260]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c5a:	f7fc fb99 	bl	8002390 <HAL_GetTick>
 8005c5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c60:	e008      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c62:	f7fc fb95 	bl	8002390 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b64      	cmp	r3, #100	; 0x64
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e14b      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c74:	4b38      	ldr	r3, [pc, #224]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8084 	beq.w	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d07c      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca0:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	fa93 f3a3 	rbit	r3, r3
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2301      	movs	r3, #1
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d04b      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d02:	f7fc fb45 	bl	8002390 <HAL_GetTick>
 8005d06:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fc fb41 	bl	8002390 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e0f5      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005d20:	2302      	movs	r3, #2
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	fa93 f3a3 	rbit	r3, r3
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	623b      	str	r3, [r7, #32]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	fa93 f3a3 	rbit	r3, r3
 8005d36:	61fb      	str	r3, [r7, #28]
  return result;
 8005d38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3a:	fab3 f383 	clz	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f043 0302 	orr.w	r3, r3, #2
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d108      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d4e:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	e00d      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d54:	40021000 	.word	0x40021000
 8005d58:	40007000 	.word	0x40007000
 8005d5c:	10908100 	.word	0x10908100
 8005d60:	2302      	movs	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	4b69      	ldr	r3, [pc, #420]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2202      	movs	r2, #2
 8005d72:	613a      	str	r2, [r7, #16]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	fa92 f2a2 	rbit	r2, r2
 8005d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	fab2 f282 	clz	r2, r2
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	f002 021f 	and.w	r2, r2, #31
 8005d8e:	2101      	movs	r1, #1
 8005d90:	fa01 f202 	lsl.w	r2, r1, r2
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0b7      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d9a:	4b5e      	ldr	r3, [pc, #376]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	495b      	ldr	r1, [pc, #364]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db4:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4a56      	ldr	r2, [pc, #344]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f023 0203 	bic.w	r2, r3, #3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	494e      	ldr	r1, [pc, #312]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dea:	4b4a      	ldr	r3, [pc, #296]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f023 0210 	bic.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4947      	ldr	r1, [pc, #284]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	493f      	ldr	r1, [pc, #252]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e26:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	f023 0220 	bic.w	r2, r3, #32
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	4938      	ldr	r1, [pc, #224]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e44:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	4930      	ldr	r1, [pc, #192]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e62:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	4929      	ldr	r1, [pc, #164]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	4921      	ldr	r1, [pc, #132]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	491a      	ldr	r1, [pc, #104]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	4912      	ldr	r1, [pc, #72]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005eda:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	490b      	ldr	r1, [pc, #44]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4903      	ldr	r1, [pc, #12]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3748      	adds	r7, #72	; 0x48
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40021000 	.word	0x40021000

08005f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e049      	b.n	8005fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb ffbc 	bl	8001ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f000 fb3c 	bl	80065d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e049      	b.n	800606c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fb ffff 	bl	8001ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 fae5 	bl	80065d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <HAL_TIM_PWM_Start+0x24>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e03c      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b04      	cmp	r3, #4
 800609c:	d109      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x3e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	bf14      	ite	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	2300      	moveq	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	e02f      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d109      	bne.n	80060cc <HAL_TIM_PWM_Start+0x58>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e022      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b0c      	cmp	r3, #12
 80060d0:	d109      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x72>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e015      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d109      	bne.n	8006100 <HAL_TIM_PWM_Start+0x8c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e008      	b.n	8006112 <HAL_TIM_PWM_Start+0x9e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e083      	b.n	8006222 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0xb6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	e023      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b04      	cmp	r3, #4
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Start+0xc6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006138:	e01b      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006148:	e013      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0xe6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006158:	e00b      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b10      	cmp	r3, #16
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0xf6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006168:	e003      	b.n	8006172 <HAL_TIM_PWM_Start+0xfe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fdd8 	bl	8006d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a29      	ldr	r2, [pc, #164]	; (800622c <HAL_TIM_PWM_Start+0x1b8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x134>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a28      	ldr	r2, [pc, #160]	; (8006230 <HAL_TIM_PWM_Start+0x1bc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x134>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a26      	ldr	r2, [pc, #152]	; (8006234 <HAL_TIM_PWM_Start+0x1c0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIM_PWM_Start+0x134>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a25      	ldr	r2, [pc, #148]	; (8006238 <HAL_TIM_PWM_Start+0x1c4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_PWM_Start+0x138>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <HAL_TIM_PWM_Start+0x13a>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a19      	ldr	r2, [pc, #100]	; (800622c <HAL_TIM_PWM_Start+0x1b8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x16c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x16c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a15      	ldr	r2, [pc, #84]	; (8006230 <HAL_TIM_PWM_Start+0x1bc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d115      	bne.n	800620c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <HAL_TIM_PWM_Start+0x1c8>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d015      	beq.n	800621e <HAL_TIM_PWM_Start+0x1aa>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f8:	d011      	beq.n	800621e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	e008      	b.n	800621e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	e000      	b.n	8006220 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800
 800623c:	00010007 	.word	0x00010007

08006240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006256:	2302      	movs	r3, #2
 8006258:	e0fd      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x216>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b14      	cmp	r3, #20
 8006266:	f200 80f0 	bhi.w	800644a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	080062c5 	.word	0x080062c5
 8006274:	0800644b 	.word	0x0800644b
 8006278:	0800644b 	.word	0x0800644b
 800627c:	0800644b 	.word	0x0800644b
 8006280:	08006305 	.word	0x08006305
 8006284:	0800644b 	.word	0x0800644b
 8006288:	0800644b 	.word	0x0800644b
 800628c:	0800644b 	.word	0x0800644b
 8006290:	08006347 	.word	0x08006347
 8006294:	0800644b 	.word	0x0800644b
 8006298:	0800644b 	.word	0x0800644b
 800629c:	0800644b 	.word	0x0800644b
 80062a0:	08006387 	.word	0x08006387
 80062a4:	0800644b 	.word	0x0800644b
 80062a8:	0800644b 	.word	0x0800644b
 80062ac:	0800644b 	.word	0x0800644b
 80062b0:	080063c9 	.word	0x080063c9
 80062b4:	0800644b 	.word	0x0800644b
 80062b8:	0800644b 	.word	0x0800644b
 80062bc:	0800644b 	.word	0x0800644b
 80062c0:	08006409 	.word	0x08006409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f9f0 	bl	80066b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0208 	orr.w	r2, r2, #8
 80062de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0204 	bic.w	r2, r2, #4
 80062ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6999      	ldr	r1, [r3, #24]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	619a      	str	r2, [r3, #24]
      break;
 8006302:	e0a3      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fa56 	bl	80067bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6999      	ldr	r1, [r3, #24]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	021a      	lsls	r2, r3, #8
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	619a      	str	r2, [r3, #24]
      break;
 8006344:	e082      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fab5 	bl	80068bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0208 	orr.w	r2, r2, #8
 8006360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0204 	bic.w	r2, r2, #4
 8006370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	61da      	str	r2, [r3, #28]
      break;
 8006384:	e062      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fb13 	bl	80069b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69d9      	ldr	r1, [r3, #28]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	021a      	lsls	r2, r3, #8
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	61da      	str	r2, [r3, #28]
      break;
 80063c6:	e041      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fb56 	bl	8006a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006406:	e021      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fb94 	bl	8006b3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006448:	e000      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800644a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop

08006460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIM_ConfigClockSource+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e0a8      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800649a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d067      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x124>
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d80b      	bhi.n	80064d0 <HAL_TIM_ConfigClockSource+0x70>
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d073      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0x144>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d802      	bhi.n	80064c6 <HAL_TIM_ConfigClockSource+0x66>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d06f      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064c4:	e078      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d06c      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0x144>
 80064ca:	2b30      	cmp	r3, #48	; 0x30
 80064cc:	d06a      	beq.n	80065a4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80064ce:	e073      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064d0:	2b70      	cmp	r3, #112	; 0x70
 80064d2:	d00d      	beq.n	80064f0 <HAL_TIM_ConfigClockSource+0x90>
 80064d4:	2b70      	cmp	r3, #112	; 0x70
 80064d6:	d804      	bhi.n	80064e2 <HAL_TIM_ConfigClockSource+0x82>
 80064d8:	2b50      	cmp	r3, #80	; 0x50
 80064da:	d033      	beq.n	8006544 <HAL_TIM_ConfigClockSource+0xe4>
 80064dc:	2b60      	cmp	r3, #96	; 0x60
 80064de:	d041      	beq.n	8006564 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80064e0:	e06a      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d066      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x156>
 80064e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ec:	d017      	beq.n	800651e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80064ee:	e063      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6899      	ldr	r1, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f000 fbf6 	bl	8006cf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006512:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
      break;
 800651c:	e04c      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6899      	ldr	r1, [r3, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f000 fbdf 	bl	8006cf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006540:	609a      	str	r2, [r3, #8]
      break;
 8006542:	e039      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	461a      	mov	r2, r3
 8006552:	f000 fb53 	bl	8006bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2150      	movs	r1, #80	; 0x50
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fbac 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006562:	e029      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	461a      	mov	r2, r3
 8006572:	f000 fb72 	bl	8006c5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2160      	movs	r1, #96	; 0x60
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fb9c 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 8006582:	e019      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6859      	ldr	r1, [r3, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	461a      	mov	r2, r3
 8006592:	f000 fb33 	bl	8006bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2140      	movs	r1, #64	; 0x40
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fb8c 	bl	8006cba <TIM_ITRx_SetConfig>
      break;
 80065a2:	e009      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f000 fb83 	bl	8006cba <TIM_ITRx_SetConfig>
        break;
 80065b4:	e000      	b.n	80065b8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80065b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <TIM_Base_SetConfig+0xcc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0x20>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f2:	d108      	bne.n	8006606 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <TIM_Base_SetConfig+0xcc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <TIM_Base_SetConfig+0x5a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d00b      	beq.n	800662e <TIM_Base_SetConfig+0x5a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <TIM_Base_SetConfig+0xd0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <TIM_Base_SetConfig+0x5a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <TIM_Base_SetConfig+0xd4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_Base_SetConfig+0x5a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a20      	ldr	r2, [pc, #128]	; (80066ac <TIM_Base_SetConfig+0xd8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d108      	bne.n	8006640 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <TIM_Base_SetConfig+0xcc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_Base_SetConfig+0xb0>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <TIM_Base_SetConfig+0xd0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_Base_SetConfig+0xb0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <TIM_Base_SetConfig+0xd4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0xb0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a0b      	ldr	r2, [pc, #44]	; (80066ac <TIM_Base_SetConfig+0xd8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	615a      	str	r2, [r3, #20]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0302 	bic.w	r3, r3, #2
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a28      	ldr	r2, [pc, #160]	; (80067ac <TIM_OC1_SetConfig+0xfc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_OC1_SetConfig+0x78>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a27      	ldr	r2, [pc, #156]	; (80067b0 <TIM_OC1_SetConfig+0x100>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_OC1_SetConfig+0x78>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <TIM_OC1_SetConfig+0x104>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_OC1_SetConfig+0x78>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a25      	ldr	r2, [pc, #148]	; (80067b8 <TIM_OC1_SetConfig+0x108>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d10c      	bne.n	8006742 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0308 	bic.w	r3, r3, #8
 800672e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 0304 	bic.w	r3, r3, #4
 8006740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <TIM_OC1_SetConfig+0xfc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_OC1_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <TIM_OC1_SetConfig+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <TIM_OC1_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <TIM_OC1_SetConfig+0x104>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_OC1_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <TIM_OC1_SetConfig+0x108>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d111      	bne.n	8006786 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	621a      	str	r2, [r3, #32]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800

080067bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0210 	bic.w	r2, r3, #16
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0320 	bic.w	r3, r3, #32
 800680a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a24      	ldr	r2, [pc, #144]	; (80068ac <TIM_OC2_SetConfig+0xf0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10d      	bne.n	800683c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a1b      	ldr	r2, [pc, #108]	; (80068ac <TIM_OC2_SetConfig+0xf0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_OC2_SetConfig+0xa0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <TIM_OC2_SetConfig+0xf4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_OC2_SetConfig+0xa0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <TIM_OC2_SetConfig+0xf8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC2_SetConfig+0xa0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <TIM_OC2_SetConfig+0xfc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d113      	bne.n	8006884 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006862:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <TIM_OC3_SetConfig+0xec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d10d      	bne.n	800693a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006938:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <TIM_OC3_SetConfig+0xec>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00b      	beq.n	800695a <TIM_OC3_SetConfig+0x9e>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <TIM_OC3_SetConfig+0xf0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_OC3_SetConfig+0x9e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <TIM_OC3_SetConfig+0xf4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC3_SetConfig+0x9e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <TIM_OC3_SetConfig+0xf8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d113      	bne.n	8006982 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	621a      	str	r2, [r3, #32]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40014400 	.word	0x40014400
 80069b4:	40014800 	.word	0x40014800

080069b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <TIM_OC4_SetConfig+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <TIM_OC4_SetConfig+0x7c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <TIM_OC4_SetConfig+0xbc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_OC4_SetConfig+0x7c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <TIM_OC4_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC4_SetConfig+0x7c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <TIM_OC4_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d109      	bne.n	8006a48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <TIM_OC5_SetConfig+0xac>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_OC5_SetConfig+0x72>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <TIM_OC5_SetConfig+0xb0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_OC5_SetConfig+0x72>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <TIM_OC5_SetConfig+0xb4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC5_SetConfig+0x72>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a12      	ldr	r2, [pc, #72]	; (8006b38 <TIM_OC5_SetConfig+0xb8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d109      	bne.n	8006b06 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	621a      	str	r2, [r3, #32]
}
 8006b20:	bf00      	nop
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800

08006b3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	051b      	lsls	r3, r3, #20
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a16      	ldr	r2, [pc, #88]	; (8006bec <TIM_OC6_SetConfig+0xb0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x74>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a15      	ldr	r2, [pc, #84]	; (8006bf0 <TIM_OC6_SetConfig+0xb4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x74>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <TIM_OC6_SetConfig+0xb8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_OC6_SetConfig+0x74>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <TIM_OC6_SetConfig+0xbc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	029b      	lsls	r3, r3, #10
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800

08006bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 030a 	bic.w	r3, r3, #10
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b087      	sub	sp, #28
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0210 	bic.w	r2, r3, #16
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f043 0307 	orr.w	r3, r3, #7
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	609a      	str	r2, [r3, #8]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2201      	movs	r2, #1
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1a      	ldr	r2, [r3, #32]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	43db      	mvns	r3, r3
 8006d52:	401a      	ands	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	fa01 f303 	lsl.w	r3, r1, r3
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	621a      	str	r2, [r3, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e04f      	b.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d108      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d009      	beq.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfc:	d004      	beq.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10c      	bne.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40014000 	.word	0x40014000

08006e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e060      	b.n	8006f26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a14      	ldr	r2, [pc, #80]	; (8006f34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d115      	bne.n	8006f14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	051b      	lsls	r3, r3, #20
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40012c00 	.word	0x40012c00

08006f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e040      	b.n	8006fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fb f8e2 	bl	8002124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2224      	movs	r2, #36	; 0x24
 8006f64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f82c 	bl	8006fd4 <UART_SetConfig>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e022      	b.n	8006fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f958 	bl	8007244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f9df 	bl	8007388 <UART_CheckIdleState>
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b8b      	ldr	r3, [pc, #556]	; (800722c <UART_SetConfig+0x258>)
 8007000:	4013      	ands	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	430b      	orrs	r3, r1
 800700a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a79      	ldr	r2, [pc, #484]	; (8007230 <UART_SetConfig+0x25c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d121      	bne.n	8007094 <UART_SetConfig+0xc0>
 8007050:	4b78      	ldr	r3, [pc, #480]	; (8007234 <UART_SetConfig+0x260>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d817      	bhi.n	800708c <UART_SetConfig+0xb8>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x90>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	08007081 	.word	0x08007081
 800706c:	08007087 	.word	0x08007087
 8007070:	0800707b 	.word	0x0800707b
 8007074:	2300      	movs	r3, #0
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e01e      	b.n	80070b8 <UART_SetConfig+0xe4>
 800707a:	2302      	movs	r3, #2
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e01b      	b.n	80070b8 <UART_SetConfig+0xe4>
 8007080:	2304      	movs	r3, #4
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e018      	b.n	80070b8 <UART_SetConfig+0xe4>
 8007086:	2308      	movs	r3, #8
 8007088:	77fb      	strb	r3, [r7, #31]
 800708a:	e015      	b.n	80070b8 <UART_SetConfig+0xe4>
 800708c:	2310      	movs	r3, #16
 800708e:	77fb      	strb	r3, [r7, #31]
 8007090:	bf00      	nop
 8007092:	e011      	b.n	80070b8 <UART_SetConfig+0xe4>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a67      	ldr	r2, [pc, #412]	; (8007238 <UART_SetConfig+0x264>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d102      	bne.n	80070a4 <UART_SetConfig+0xd0>
 800709e:	2300      	movs	r3, #0
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e009      	b.n	80070b8 <UART_SetConfig+0xe4>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a64      	ldr	r2, [pc, #400]	; (800723c <UART_SetConfig+0x268>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d102      	bne.n	80070b4 <UART_SetConfig+0xe0>
 80070ae:	2300      	movs	r3, #0
 80070b0:	77fb      	strb	r3, [r7, #31]
 80070b2:	e001      	b.n	80070b8 <UART_SetConfig+0xe4>
 80070b4:	2310      	movs	r3, #16
 80070b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c0:	d15c      	bne.n	800717c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80070c2:	7ffb      	ldrb	r3, [r7, #31]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d828      	bhi.n	800711a <UART_SetConfig+0x146>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0xfc>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	0800711b 	.word	0x0800711b
 80070e0:	0800710b 	.word	0x0800710b
 80070e4:	0800711b 	.word	0x0800711b
 80070e8:	0800711b 	.word	0x0800711b
 80070ec:	0800711b 	.word	0x0800711b
 80070f0:	08007113 	.word	0x08007113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fe fd3a 	bl	8005b6c <HAL_RCC_GetPCLK1Freq>
 80070f8:	61b8      	str	r0, [r7, #24]
        break;
 80070fa:	e013      	b.n	8007124 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070fc:	f7fe fd58 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 8007100:	61b8      	str	r0, [r7, #24]
        break;
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007104:	4b4e      	ldr	r3, [pc, #312]	; (8007240 <UART_SetConfig+0x26c>)
 8007106:	61bb      	str	r3, [r7, #24]
        break;
 8007108:	e00c      	b.n	8007124 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710a:	f7fe fcb9 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 800710e:	61b8      	str	r0, [r7, #24]
        break;
 8007110:	e008      	b.n	8007124 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007116:	61bb      	str	r3, [r7, #24]
        break;
 8007118:	e004      	b.n	8007124 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	77bb      	strb	r3, [r7, #30]
        break;
 8007122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d074      	beq.n	8007214 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	005a      	lsls	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	fbb2 f3f3 	udiv	r3, r2, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b0f      	cmp	r3, #15
 8007146:	d916      	bls.n	8007176 <UART_SetConfig+0x1a2>
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714e:	d212      	bcs.n	8007176 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f023 030f 	bic.w	r3, r3, #15
 8007158:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	b29b      	uxth	r3, r3
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	b29a      	uxth	r2, r3
 8007166:	89fb      	ldrh	r3, [r7, #14]
 8007168:	4313      	orrs	r3, r2
 800716a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	89fa      	ldrh	r2, [r7, #14]
 8007172:	60da      	str	r2, [r3, #12]
 8007174:	e04e      	b.n	8007214 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	77bb      	strb	r3, [r7, #30]
 800717a:	e04b      	b.n	8007214 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800717c:	7ffb      	ldrb	r3, [r7, #31]
 800717e:	2b08      	cmp	r3, #8
 8007180:	d827      	bhi.n	80071d2 <UART_SetConfig+0x1fe>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x1b4>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071b5 	.word	0x080071b5
 8007190:	080071bd 	.word	0x080071bd
 8007194:	080071d3 	.word	0x080071d3
 8007198:	080071c3 	.word	0x080071c3
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	080071d3 	.word	0x080071d3
 80071a4:	080071d3 	.word	0x080071d3
 80071a8:	080071cb 	.word	0x080071cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ac:	f7fe fcde 	bl	8005b6c <HAL_RCC_GetPCLK1Freq>
 80071b0:	61b8      	str	r0, [r7, #24]
        break;
 80071b2:	e013      	b.n	80071dc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b4:	f7fe fcfc 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 80071b8:	61b8      	str	r0, [r7, #24]
        break;
 80071ba:	e00f      	b.n	80071dc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071bc:	4b20      	ldr	r3, [pc, #128]	; (8007240 <UART_SetConfig+0x26c>)
 80071be:	61bb      	str	r3, [r7, #24]
        break;
 80071c0:	e00c      	b.n	80071dc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7fe fc5d 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 80071c6:	61b8      	str	r0, [r7, #24]
        break;
 80071c8:	e008      	b.n	80071dc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	61bb      	str	r3, [r7, #24]
        break;
 80071d0:	e004      	b.n	80071dc <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	77bb      	strb	r3, [r7, #30]
        break;
 80071da:	bf00      	nop
    }

    if (pclk != 0U)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	085a      	lsrs	r2, r3, #1
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	441a      	add	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2b0f      	cmp	r3, #15
 80071fc:	d908      	bls.n	8007210 <UART_SetConfig+0x23c>
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007204:	d204      	bcs.n	8007210 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	e001      	b.n	8007214 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007220:	7fbb      	ldrb	r3, [r7, #30]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	efff69f3 	.word	0xefff69f3
 8007230:	40013800 	.word	0x40013800
 8007234:	40021000 	.word	0x40021000
 8007238:	40004400 	.word	0x40004400
 800723c:	40004800 	.word	0x40004800
 8007240:	007a1200 	.word	0x007a1200

08007244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01a      	beq.n	800735a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007342:	d10a      	bne.n	800735a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007398:	f7fa fffa 	bl	8002390 <HAL_GetTick>
 800739c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10e      	bne.n	80073ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f82d 	bl	800741a <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e023      	b.n	8007412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d10e      	bne.n	80073f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f817 	bl	800741a <UART_WaitOnFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00d      	b.n	8007412 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742a:	e05e      	b.n	80074ea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d05a      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007434:	f7fa ffac 	bl	8002390 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	429a      	cmp	r2, r3
 8007442:	d302      	bcc.n	800744a <UART_WaitOnFlagUntilTimeout+0x30>
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d11b      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007458:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e043      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d02c      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800749e:	d124      	bne.n	80074ea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e00f      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d091      	beq.n	800742c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <__libc_init_array>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	4e0d      	ldr	r6, [pc, #52]	; (800754c <__libc_init_array+0x38>)
 8007518:	4c0d      	ldr	r4, [pc, #52]	; (8007550 <__libc_init_array+0x3c>)
 800751a:	1ba4      	subs	r4, r4, r6
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	2500      	movs	r5, #0
 8007520:	42a5      	cmp	r5, r4
 8007522:	d109      	bne.n	8007538 <__libc_init_array+0x24>
 8007524:	4e0b      	ldr	r6, [pc, #44]	; (8007554 <__libc_init_array+0x40>)
 8007526:	4c0c      	ldr	r4, [pc, #48]	; (8007558 <__libc_init_array+0x44>)
 8007528:	f000 f820 	bl	800756c <_init>
 800752c:	1ba4      	subs	r4, r4, r6
 800752e:	10a4      	asrs	r4, r4, #2
 8007530:	2500      	movs	r5, #0
 8007532:	42a5      	cmp	r5, r4
 8007534:	d105      	bne.n	8007542 <__libc_init_array+0x2e>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800753c:	4798      	blx	r3
 800753e:	3501      	adds	r5, #1
 8007540:	e7ee      	b.n	8007520 <__libc_init_array+0xc>
 8007542:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007546:	4798      	blx	r3
 8007548:	3501      	adds	r5, #1
 800754a:	e7f2      	b.n	8007532 <__libc_init_array+0x1e>
 800754c:	080075c0 	.word	0x080075c0
 8007550:	080075c0 	.word	0x080075c0
 8007554:	080075c0 	.word	0x080075c0
 8007558:	080075c4 	.word	0x080075c4

0800755c <memset>:
 800755c:	4402      	add	r2, r0
 800755e:	4603      	mov	r3, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
