
Prestudy motor control pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e0  080080e0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080080e0  080080e0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080e0  080080e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080080e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000024  0800810c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800810c  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf3  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c9  00000000  00000000  00034d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00038a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce15  00000000  00000000  00039df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d88  00000000  00000000  00056c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad9d0  00000000  00000000  00067995  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  001153e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800808c 	.word	0x0800808c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800808c 	.word	0x0800808c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <initPID>:
	//HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
}
*/

void initPID(float KPvalue, float KIvalue, float KDvalue, int sampleTimeValue)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b72:	ed87 1a01 	vstr	s2, [r7, #4]
 8000b76:	6038      	str	r0, [r7, #0]
	KP = KPvalue;
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <initPID+0x38>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6013      	str	r3, [r2, #0]
	KI = KIvalue;
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <initPID+0x3c>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	6013      	str	r3, [r2, #0]
	KD = KDvalue;
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <initPID+0x40>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
	sampleTime = sampleTimeValue;
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <initPID+0x44>)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000074 	.word	0x20000074
 8000ba0:	20000078 	.word	0x20000078
 8000ba4:	2000007c 	.word	0x2000007c
 8000ba8:	20000080 	.word	0x20000080

08000bac <calculatePIDLeft>:

int calculatePIDLeft(int feedback, int target)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	int error = target - feedback;
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	60bb      	str	r3, [r7, #8]
	IntegralLeft += error;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000bc8:	6013      	str	r3, [r2, #0]
	if((IntegralLeft * KI) > maxPIDlevel)
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <calculatePIDLeft+0xe4>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <calculatePIDLeft+0xe8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf4:	dd10      	ble.n	8000c18 <calculatePIDLeft+0x6c>
	{
		IntegralLeft = maxPIDlevel/KI;
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <calculatePIDLeft+0xe8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <calculatePIDLeft+0xe4>)
 8000c04:	ed93 7a00 	vldr	s14, [r3]
 8000c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c10:	ee17 2a90 	vmov	r2, s15
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000c16:	601a      	str	r2, [r3, #0]
	}
	if(target == 0)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <calculatePIDLeft+0x78>
	{
		IntegralLeft = 0;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
	}
	int correctionvalue = (KP * error + KI * IntegralLeft);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <calculatePIDLeft+0xec>)
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <calculatePIDLeft+0xe0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <calculatePIDLeft+0xe4>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c56:	ee17 3a90 	vmov	r3, s15
 8000c5a:	60fb      	str	r3, [r7, #12]
	if(correctionvalue > maxPIDlevel) correctionvalue = maxPIDlevel;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <calculatePIDLeft+0xe8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dd03      	ble.n	8000c6e <calculatePIDLeft+0xc2>
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <calculatePIDLeft+0xe8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e007      	b.n	8000c7e <calculatePIDLeft+0xd2>
	else if (correctionvalue < minPIDlevel) correctionvalue = minPIDlevel;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <calculatePIDLeft+0xf0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	da02      	bge.n	8000c7e <calculatePIDLeft+0xd2>
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <calculatePIDLeft+0xf0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
	return correctionvalue;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000088 	.word	0x20000088
 8000c90:	20000078 	.word	0x20000078
 8000c94:	20000014 	.word	0x20000014
 8000c98:	20000074 	.word	0x20000074
 8000c9c:	20000084 	.word	0x20000084

08000ca0 <calculatePIDRight>:

int calculatePIDRight(int feedback, int target)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	int error = target - feedback;
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	60bb      	str	r3, [r7, #8]
	IntegralRight += error;
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <calculatePIDRight+0xd8>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <calculatePIDRight+0xd8>)
 8000cbc:	6013      	str	r3, [r2, #0]
	if((IntegralRight * KI) > 400)
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <calculatePIDRight+0xd8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <calculatePIDRight+0xdc>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000d80 <calculatePIDRight+0xe0>
 8000cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	dd10      	ble.n	8000d04 <calculatePIDRight+0x64>
	{
		IntegralRight = maxPIDlevel/KI;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <calculatePIDRight+0xe4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <calculatePIDRight+0xdc>)
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfc:	ee17 2a90 	vmov	r2, s15
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <calculatePIDRight+0xd8>)
 8000d02:	601a      	str	r2, [r3, #0]
	}
	if(target == 0)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <calculatePIDRight+0x70>
	{
			IntegralRight = 0;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <calculatePIDRight+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	}
	int correctionvalue = (KP * error + KI * IntegralRight);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <calculatePIDRight+0xe8>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <calculatePIDRight+0xd8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <calculatePIDRight+0xdc>)
 8000d32:	edd3 7a00 	vldr	s15, [r3]
 8000d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d42:	ee17 3a90 	vmov	r3, s15
 8000d46:	60fb      	str	r3, [r7, #12]
	if(correctionvalue > maxPIDlevel) correctionvalue = maxPIDlevel;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <calculatePIDRight+0xe4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dd03      	ble.n	8000d5a <calculatePIDRight+0xba>
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <calculatePIDRight+0xe4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e007      	b.n	8000d6a <calculatePIDRight+0xca>
	else if (correctionvalue < minPIDlevel) correctionvalue = minPIDlevel;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <calculatePIDRight+0xec>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	da02      	bge.n	8000d6a <calculatePIDRight+0xca>
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <calculatePIDRight+0xec>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
	return correctionvalue;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	2000008c 	.word	0x2000008c
 8000d7c:	20000078 	.word	0x20000078
 8000d80:	43c80000 	.word	0x43c80000
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000074 	.word	0x20000074
 8000d8c:	20000084 	.word	0x20000084

08000d90 <resetTimeout>:

void resetTimeout() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	timeout_timertick = HAL_GetTick();
 8000d94:	f002 f8b0 	bl	8002ef8 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b01      	ldr	r3, [pc, #4]	; (8000da4 <resetTimeout+0x14>)
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000060 	.word	0x20000060

08000da8 <getInputVoltage>:

float getInputVoltage()
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
	uint32_t temp = adcBuffer[0];
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <getInputVoltage+0x70>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	60fb      	str	r3, [r7, #12]
	uint32_t shuntVoltage = (801 * temp);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f240 3221 	movw	r2, #801	; 0x321
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	60bb      	str	r3, [r7, #8]
	float voltage = (shuntVoltage * 18.414) / 1000000;
 8000dc0:	68b8      	ldr	r0, [r7, #8]
 8000dc2:	f7ff fb43 	bl	800044c <__aeabi_ui2d>
 8000dc6:	a310      	add	r3, pc, #64	; (adr r3, 8000e08 <getInputVoltage+0x60>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fbb8 	bl	8000540 <__aeabi_dmul>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	a30d      	add	r3, pc, #52	; (adr r3, 8000e10 <getInputVoltage+0x68>)
 8000dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dde:	f7ff fcd9 	bl	8000794 <__aeabi_ddiv>
 8000de2:	4603      	mov	r3, r0
 8000de4:	460c      	mov	r4, r1
 8000de6:	4618      	mov	r0, r3
 8000de8:	4621      	mov	r1, r4
 8000dea:	f7ff fe6b 	bl	8000ac4 <__aeabi_d2f>
 8000dee:	4603      	mov	r3, r0
 8000df0:	607b      	str	r3, [r7, #4]
	return voltage;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	f3af 8000 	nop.w
 8000e08:	e76c8b44 	.word	0xe76c8b44
 8000e0c:	403269fb 	.word	0x403269fb
 8000e10:	00000000 	.word	0x00000000
 8000e14:	412e8480 	.word	0x412e8480
 8000e18:	200000c0 	.word	0x200000c0

08000e1c <sendACK>:

void sendACK()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	uint32_t mb;
	uint8_t data[] = {ID, 1};
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <sendACK+0x48>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	803b      	strh	r3, [r7, #0]
	TxMessage.StdId = 0;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <sendACK+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <sendACK+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <sendACK+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = 2;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <sendACK+0x4c>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	611a      	str	r2, [r3, #16]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <sendACK+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	751a      	strb	r2, [r3, #20]
	if (HAL_CAN_AddTxMessage(&hcan, &TxMessage, data, &mb) != HAL_OK) {
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	463a      	mov	r2, r7
 8000e4a:	4907      	ldr	r1, [pc, #28]	; (8000e68 <sendACK+0x4c>)
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <sendACK+0x50>)
 8000e4e:	f003 f90d 	bl	800406c <HAL_CAN_AddTxMessage>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <sendACK+0x40>
	    Error_Handler();
 8000e58:	f001 fc70 	bl	800273c <Error_Handler>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	080080a4 	.word	0x080080a4
 8000e68:	200003ac 	.word	0x200003ac
 8000e6c:	200001ac 	.word	0x200001ac

08000e70 <setPIDPWMLeft>:
	    Error_Handler();
	}
}

void setPIDPWMLeft(int PWM)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <setPIDPWMLeft+0x84>)
 8000e7c:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <setPIDPWMLeft+0x88>)
 8000e88:	f004 f97e 	bl	8005188 <HAL_GPIO_WritePin>
	if(PWM >= 430)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8000e92:	db0a      	blt.n	8000eaa <setPIDPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f004 f974 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e00d      	b.n	8000ec6 <setPIDPWMLeft+0x56>
	}
	else if(PWM < 370)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8000eb0:	da09      	bge.n	8000ec6 <setPIDPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f004 f965 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000ec4:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000ed2:	db02      	blt.n	8000eda <setPIDPWMLeft+0x6a>
	{
		temp = 401;
 8000ed4:	f240 1391 	movw	r3, #401	; 0x191
 8000ed8:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b13      	cmp	r3, #19
 8000ede:	dc01      	bgt.n	8000ee4 <setPIDPWMLeft+0x74>
	{
		temp = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
	}
	pid_pwm_target_left = temp;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <setPIDPWMLeft+0x8c>)
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	20000044 	.word	0x20000044

08000f00 <setPIDPWMRight>:

void setPIDPWMRight(int PWM)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <setPIDPWMRight+0x84>)
 8000f0c:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	481c      	ldr	r0, [pc, #112]	; (8000f88 <setPIDPWMRight+0x88>)
 8000f18:	f004 f936 	bl	8005188 <HAL_GPIO_WritePin>
	if(PWM >= 430)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8000f22:	db0a      	blt.n	8000f3a <setPIDPWMRight+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f004 f92c 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e00d      	b.n	8000f56 <setPIDPWMRight+0x56>
	}
	else if(PWM < 370)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8000f40:	da09      	bge.n	8000f56 <setPIDPWMRight+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f004 f91d 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000f54:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000f62:	db02      	blt.n	8000f6a <setPIDPWMRight+0x6a>
	{
		temp = 401;
 8000f64:	f240 1391 	movw	r3, #401	; 0x191
 8000f68:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b13      	cmp	r3, #19
 8000f6e:	dc01      	bgt.n	8000f74 <setPIDPWMRight+0x74>
	{
		temp = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
	}
	pid_pwm_target_right = temp;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <setPIDPWMRight+0x8c>)
 8000f78:	6013      	str	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000010 	.word	0x20000010
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	20000048 	.word	0x20000048

08000f90 <setPWMLeft>:

void setPWMLeft(int PWM)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <setPWMLeft+0x84>)
 8000f9c:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	481c      	ldr	r0, [pc, #112]	; (8001018 <setPWMLeft+0x88>)
 8000fa8:	f004 f8ee 	bl	8005188 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fb2:	db0a      	blt.n	8000fca <setPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f004 f8e4 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e00d      	b.n	8000fe6 <setPWMLeft+0x56>
	}
	else if(PWM < 400)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fd0:	da09      	bge.n	8000fe6 <setPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f004 f8d5 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000fe4:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000ff2:	db02      	blt.n	8000ffa <setPWMLeft+0x6a>
	{
		temp = 401;
 8000ff4:	f240 1391 	movw	r3, #401	; 0x191
 8000ff8:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b13      	cmp	r3, #19
 8000ffe:	dc01      	bgt.n	8001004 <setPWMLeft+0x74>
	{
			temp = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, temp);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <setPWMLeft+0x8c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000000c 	.word	0x2000000c
 8001018:	48000800 	.word	0x48000800
 800101c:	20000114 	.word	0x20000114

08001020 <setPWMRight>:

void setPWMRight(int PWM)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <setPWMRight+0x84>)
 800102c:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <setPWMRight+0x88>)
 8001038:	f004 f8a6 	bl	8005188 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001042:	db0a      	blt.n	800105a <setPWMRight+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f004 f89c 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e00d      	b.n	8001076 <setPWMRight+0x56>
	}
	else if(PWM < 400)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001060:	da09      	bge.n	8001076 <setPWMRight+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f004 f88d 	bl	8005188 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001074:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8001082:	db02      	blt.n	800108a <setPWMRight+0x6a>
	{
		temp = 401;
 8001084:	f240 1391 	movw	r3, #401	; 0x191
 8001088:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b13      	cmp	r3, #19
 800108e:	dc01      	bgt.n	8001094 <setPWMRight+0x74>
	{
		temp = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, temp);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <setPWMRight+0x8c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000010 	.word	0x20000010
 80010a8:	48000800 	.word	0x48000800
 80010ac:	20000114 	.word	0x20000114

080010b0 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b08f      	sub	sp, #60	; 0x3c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  //HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 80010b8:	4bcb      	ldr	r3, [pc, #812]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80010ba:	4acc      	ldr	r2, [pc, #816]	; (80013ec <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 80010bc:	2100      	movs	r1, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f003 f8af 	bl	8004222 <HAL_CAN_GetRxMessage>
  uint32_t mb;
  uint32_t shuntVoltage;
  uint32_t temp_speed, temp_speed_left, temp_speed_right;
  uint8_t currentLSB, currentMSB, voltageLSB, voltageMSB;
  float current, voltage;
  uint8_t data[] = {ID,0,0,0,0,0,0,0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	2301      	movs	r3, #1
 80010d0:	733b      	strb	r3, [r7, #12]
  resetTimeout();
 80010d2:	f7ff fe5d 	bl	8000d90 <resetTimeout>
  switch(RxData[0])
 80010d6:	4bc4      	ldr	r3, [pc, #784]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b69      	cmp	r3, #105	; 0x69
 80010dc:	f200 83ac 	bhi.w	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	08001291 	.word	0x08001291
 80010ec:	080012e3 	.word	0x080012e3
 80010f0:	08001335 	.word	0x08001335
 80010f4:	0800134b 	.word	0x0800134b
 80010f8:	0800136d 	.word	0x0800136d
 80010fc:	0800138f 	.word	0x0800138f
 8001100:	080013bb 	.word	0x080013bb
 8001104:	08001405 	.word	0x08001405
 8001108:	08001839 	.word	0x08001839
 800110c:	08001839 	.word	0x08001839
 8001110:	08001457 	.word	0x08001457
 8001114:	08001475 	.word	0x08001475
 8001118:	08001493 	.word	0x08001493
 800111c:	080014bf 	.word	0x080014bf
 8001120:	08001839 	.word	0x08001839
 8001124:	08001839 	.word	0x08001839
 8001128:	08001839 	.word	0x08001839
 800112c:	08001839 	.word	0x08001839
 8001130:	08001839 	.word	0x08001839
 8001134:	08001839 	.word	0x08001839
 8001138:	08001839 	.word	0x08001839
 800113c:	08001839 	.word	0x08001839
 8001140:	08001839 	.word	0x08001839
 8001144:	08001839 	.word	0x08001839
 8001148:	08001839 	.word	0x08001839
 800114c:	08001839 	.word	0x08001839
 8001150:	08001839 	.word	0x08001839
 8001154:	08001839 	.word	0x08001839
 8001158:	08001839 	.word	0x08001839
 800115c:	08001839 	.word	0x08001839
 8001160:	08001839 	.word	0x08001839
 8001164:	08001839 	.word	0x08001839
 8001168:	08001839 	.word	0x08001839
 800116c:	08001839 	.word	0x08001839
 8001170:	08001839 	.word	0x08001839
 8001174:	08001839 	.word	0x08001839
 8001178:	08001839 	.word	0x08001839
 800117c:	08001839 	.word	0x08001839
 8001180:	08001839 	.word	0x08001839
 8001184:	08001839 	.word	0x08001839
 8001188:	08001839 	.word	0x08001839
 800118c:	08001839 	.word	0x08001839
 8001190:	08001839 	.word	0x08001839
 8001194:	08001839 	.word	0x08001839
 8001198:	08001839 	.word	0x08001839
 800119c:	08001839 	.word	0x08001839
 80011a0:	08001839 	.word	0x08001839
 80011a4:	08001839 	.word	0x08001839
 80011a8:	08001839 	.word	0x08001839
 80011ac:	08001839 	.word	0x08001839
 80011b0:	08001839 	.word	0x08001839
 80011b4:	08001839 	.word	0x08001839
 80011b8:	08001839 	.word	0x08001839
 80011bc:	08001839 	.word	0x08001839
 80011c0:	08001839 	.word	0x08001839
 80011c4:	08001839 	.word	0x08001839
 80011c8:	08001839 	.word	0x08001839
 80011cc:	08001839 	.word	0x08001839
 80011d0:	08001839 	.word	0x08001839
 80011d4:	08001839 	.word	0x08001839
 80011d8:	08001839 	.word	0x08001839
 80011dc:	08001839 	.word	0x08001839
 80011e0:	08001839 	.word	0x08001839
 80011e4:	08001839 	.word	0x08001839
 80011e8:	08001839 	.word	0x08001839
 80011ec:	08001839 	.word	0x08001839
 80011f0:	08001839 	.word	0x08001839
 80011f4:	08001839 	.word	0x08001839
 80011f8:	08001839 	.word	0x08001839
 80011fc:	08001839 	.word	0x08001839
 8001200:	08001839 	.word	0x08001839
 8001204:	08001839 	.word	0x08001839
 8001208:	08001839 	.word	0x08001839
 800120c:	08001839 	.word	0x08001839
 8001210:	08001839 	.word	0x08001839
 8001214:	08001839 	.word	0x08001839
 8001218:	08001839 	.word	0x08001839
 800121c:	08001839 	.word	0x08001839
 8001220:	08001839 	.word	0x08001839
 8001224:	08001839 	.word	0x08001839
 8001228:	08001839 	.word	0x08001839
 800122c:	08001839 	.word	0x08001839
 8001230:	08001839 	.word	0x08001839
 8001234:	08001839 	.word	0x08001839
 8001238:	08001839 	.word	0x08001839
 800123c:	08001839 	.word	0x08001839
 8001240:	08001839 	.word	0x08001839
 8001244:	08001839 	.word	0x08001839
 8001248:	08001839 	.word	0x08001839
 800124c:	08001839 	.word	0x08001839
 8001250:	08001839 	.word	0x08001839
 8001254:	08001839 	.word	0x08001839
 8001258:	08001839 	.word	0x08001839
 800125c:	08001839 	.word	0x08001839
 8001260:	08001839 	.word	0x08001839
 8001264:	08001839 	.word	0x08001839
 8001268:	08001839 	.word	0x08001839
 800126c:	08001839 	.word	0x08001839
 8001270:	08001839 	.word	0x08001839
 8001274:	08001839 	.word	0x08001839
 8001278:	080014d1 	.word	0x080014d1
 800127c:	080015ad 	.word	0x080015ad
 8001280:	080016c9 	.word	0x080016c9
 8001284:	08001753 	.word	0x08001753
 8001288:	08001795 	.word	0x08001795
 800128c:	080017d7 	.word	0x080017d7
  {
  	  case 0:
  		  //----------- Coast Brake -----------//
  		  //Set sleep pins low
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 8001296:	f003 ff77 	bl	8005188 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4854      	ldr	r0, [pc, #336]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80012a0:	f003 ff72 	bl	8005188 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2140      	movs	r1, #64	; 0x40
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f003 ff6c 	bl	8005188 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f003 ff66 	bl	8005188 <HAL_GPIO_WritePin>
  		  pwm_left = 400;
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 80012be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012c2:	601a      	str	r2, [r3, #0]
  		  pwm_target_left = 400;
 80012c4:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80012c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012ca:	601a      	str	r2, [r3, #0]
  		  pwm_right = 400;
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 80012ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012d2:	601a      	str	r2, [r3, #0]
  		  pwm_target_right = 400;
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80012d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012da:	601a      	str	r2, [r3, #0]
  		  sendACK();
 80012dc:	f7ff fd9e 	bl	8000e1c <sendACK>
  		  break;
 80012e0:	e2aa      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 1:
  		  //----------- Dynamic Brake (slow brake) -----------//
  		  //Set sleep pins high
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4842      	ldr	r0, [pc, #264]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80012e8:	f003 ff4e 	bl	8005188 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	483f      	ldr	r0, [pc, #252]	; (80013f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80012f2:	f003 ff49 	bl	8005188 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f003 ff43 	bl	8005188 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f003 ff3d 	bl	8005188 <HAL_GPIO_WritePin>
  		  pwm_target_right = 400;
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001310:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001314:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001318:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800131c:	601a      	str	r2, [r3, #0]
  		  setPWMLeft(400);
 800131e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001322:	f7ff fe35 	bl	8000f90 <setPWMLeft>
  		  setPWMRight(400);
 8001326:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800132a:	f7ff fe79 	bl	8001020 <setPWMRight>
  		  sendACK();
 800132e:	f7ff fd75 	bl	8000e1c <sendACK>
  		  break;
 8001332:	e281      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 2:
  		  //----------- Regenerative brake -----------//
  		  pwm_target_right = 400;
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001336:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800133a:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 800133e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001342:	601a      	str	r2, [r3, #0]
  		  sendACK();
 8001344:	f7ff fd6a 	bl	8000e1c <sendACK>
  		  break;
 8001348:	e276      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  			  pwm_target_left = 800;
  			  pwm_target_right = 0;
  		  }
  		  else
  		  {
  			  pwm_target_left = 400 + RxData[1];
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001352:	461a      	mov	r2, r3
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001356:	601a      	str	r2, [r3, #0]
  			  pwm_target_right = 400 - RxData[1];
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001360:	461a      	mov	r2, r3
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001364:	601a      	str	r2, [r3, #0]
  		  }
  		  sendACK();
 8001366:	f7ff fd59 	bl	8000e1c <sendACK>
  		  break;
 800136a:	e265      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  	  pwm_target_left = 0;
  		  	  pwm_target_right = 800;
  		  }
  		  else
  		  {
  			  pwm_target_left = 400 - RxData[1];
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001374:	461a      	mov	r2, r3
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001378:	601a      	str	r2, [r3, #0]
  		  	  pwm_target_right = 400 + RxData[1];
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001382:	461a      	mov	r2, r3
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001386:	601a      	str	r2, [r3, #0]
  		  }
  		  sendACK();
 8001388:	f7ff fd48 	bl	8000e1c <sendACK>
  		  break;
 800138c:	e254      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 5:
  		  //----------- Manual left motor -----------//
  		  temp_speed = (RxData[1] << 8) + RxData[2];
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001396:	7892      	ldrb	r2, [r2, #2]
 8001398:	4413      	add	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
  		  if(temp_speed > 800) pwm_target_left = 800;
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013a2:	d904      	bls.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80013a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e002      	b.n	80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
  		  else pwm_target_left = temp_speed;
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6013      	str	r3, [r2, #0]
  		  sendACK();
 80013b4:	f7ff fd32 	bl	8000e1c <sendACK>
  		  break;
 80013b8:	e23e      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 6:
  		  //----------- Manual right motor -----------//
  		  temp_speed = (RxData[1] << 8) + RxData[2];
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80013c2:	7892      	ldrb	r2, [r2, #2]
 80013c4:	4413      	add	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
  		  if(temp_speed > 800) pwm_target_right = 800;
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ce:	d904      	bls.n	80013da <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80013d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e002      	b.n	80013e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x330>
  		  else pwm_target_right = temp_speed;
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6013      	str	r3, [r2, #0]
  		  sendACK();
 80013e0:	f7ff fd1c 	bl	8000e1c <sendACK>
  		  break;
 80013e4:	e228      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
 80013e6:	bf00      	nop
 80013e8:	20000358 	.word	0x20000358
 80013ec:	20000410 	.word	0x20000410
 80013f0:	48000800 	.word	0x48000800
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20000004 	.word	0x20000004
 80013fc:	20000010 	.word	0x20000010
 8001400:	20000008 	.word	0x20000008
  	  case 7:
  		  //----------- Manual right/left motor -----------//
  		  temp_speed_left = (RxData[1] << 8) + RxData[2];
 8001404:	4ba2      	ldr	r3, [pc, #648]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4aa1      	ldr	r2, [pc, #644]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 800140c:	7892      	ldrb	r2, [r2, #2]
 800140e:	4413      	add	r3, r2
 8001410:	623b      	str	r3, [r7, #32]
  		  temp_speed_right = (RxData[3] << 8) + RxData[4];
 8001412:	4b9f      	ldr	r3, [pc, #636]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4a9d      	ldr	r2, [pc, #628]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 800141a:	7912      	ldrb	r2, [r2, #4]
 800141c:	4413      	add	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
  		  if(temp_speed_left > 800) pwm_target_left = 800;
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001426:	d904      	bls.n	8001432 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e4>)
 800142a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e002      	b.n	8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>
  		  else pwm_target_left = temp_speed_left;
 8001432:	4a98      	ldr	r2, [pc, #608]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e4>)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	6013      	str	r3, [r2, #0]
  		  if(temp_speed_right > 800) pwm_target_right = 800;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800143e:	d904      	bls.n	800144a <HAL_CAN_RxFifo0MsgPendingCallback+0x39a>
 8001440:	4b95      	ldr	r3, [pc, #596]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e8>)
 8001442:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e002      	b.n	8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>
  		  else pwm_target_right = temp_speed_right;
 800144a:	4a93      	ldr	r2, [pc, #588]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e8>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	6013      	str	r3, [r2, #0]
  		  sendACK();
 8001450:	f7ff fce4 	bl	8000e1c <sendACK>

  		  break;
 8001454:	e1f0      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 10:
  		  //----------- Set acceleration -----------//
  		  if(RxData[1] > 100) accl = 100;
 8001456:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d903      	bls.n	8001466 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b6>
 800145e:	4b8f      	ldr	r3, [pc, #572]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x5ec>)
 8001460:	2264      	movs	r2, #100	; 0x64
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e003      	b.n	800146e <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
  		  else accl = RxData[1];
 8001466:	4b8a      	ldr	r3, [pc, #552]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001468:	785a      	ldrb	r2, [r3, #1]
 800146a:	4b8c      	ldr	r3, [pc, #560]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x5ec>)
 800146c:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800146e:	f7ff fcd5 	bl	8000e1c <sendACK>
  		  break;
 8001472:	e1e1      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 11:
  		  //----------- Set deceleration -----------//
  		  if(RxData[1] > 100) decl = 100;
 8001474:	4b86      	ldr	r3, [pc, #536]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d903      	bls.n	8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f0>)
 800147e:	2264      	movs	r2, #100	; 0x64
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e003      	b.n	800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>
  		  else decl = RxData[1];
 8001484:	4b82      	ldr	r3, [pc, #520]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001486:	785a      	ldrb	r2, [r3, #1]
 8001488:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f0>)
 800148a:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800148c:	f7ff fcc6 	bl	8000e1c <sendACK>
  		  break;
 8001490:	e1d2      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 12:
  		  //----------- Set max torque -----------//
  		  if(RxData[1] > 100) DAC1->DHR12R1 = 4024;
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 8001494:	785b      	ldrb	r3, [r3, #1]
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d904      	bls.n	80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 800149c:	f640 72b8 	movw	r2, #4024	; 0xfb8
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	e009      	b.n	80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>
  		  else DAC1->DHR12R1 = RxData[1] * 40;
 80014a4:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e0>)
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b7b      	ldr	r3, [pc, #492]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f4>)
 80014b6:	609a      	str	r2, [r3, #8]
  		  sendACK();
 80014b8:	f7ff fcb0 	bl	8000e1c <sendACK>
  		  break;
 80014bc:	e1bc      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 13:
  		  //----------- Reset faults -----------//
  		  OV_FAULT = 0;
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  		  GD_FAULT = 0;
 80014c4:	4b79      	ldr	r3, [pc, #484]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x5fc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 80014ca:	f7ff fca7 	bl	8000e1c <sendACK>
  		  break;
 80014ce:	e1b3      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  	  case 100:
  		  //----------- Left current -----------//
  		  if((adcBuffer[1] - offsetLeftMotor) > 0) mb = adcBuffer[1] - offsetLeftMotor;
 80014d0:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x600>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x604>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dd07      	ble.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x600>)
 80014e2:	885b      	ldrh	r3, [r3, #2]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x604>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e001      	b.n	80014f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x444>
  		  else mb = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  		  shuntVoltage = (801 * mb) / 20;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f240 3221 	movw	r2, #801	; 0x321
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	4a6e      	ldr	r2, [pc, #440]	; (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x608>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  		  current = (shuntVoltage / 10000.0);
 8001508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800150a:	f7fe ff9f 	bl	800044c <__aeabi_ui2d>
 800150e:	a35e      	add	r3, pc, #376	; (adr r3, 8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x5d8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f93e 	bl	8000794 <__aeabi_ddiv>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff fad0 	bl	8000ac4 <__aeabi_d2f>
 8001524:	4603      	mov	r3, r0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  		  currentMSB = current;
 8001528:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	edc7 7a00 	vstr	s15, [r7]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  		  currentLSB = (current - currentMSB)*100;
 800153a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001546:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x614>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	edc7 7a00 	vstr	s15, [r7]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  	  	  data[1] = currentMSB;
 8001564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001568:	737b      	strb	r3, [r7, #13]
  	  	  data[2] = currentLSB;
 800156a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800156e:	73bb      	strb	r3, [r7, #14]
  	  	  TxMessage.StdId = 0;
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 8001582:	4b4e      	ldr	r3, [pc, #312]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001584:	2203      	movs	r2, #3
 8001586:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	4949      	ldr	r1, [pc, #292]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f002 fd67 	bl	800406c <HAL_CAN_AddTxMessage>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 813e 	beq.w	8001822 <HAL_CAN_RxFifo0MsgPendingCallback+0x772>
  	  		  Error_Handler();
 80015a6:	f001 f8c9 	bl	800273c <Error_Handler>
  	  	  }
  		  break;
 80015aa:	e13a      	b.n	8001822 <HAL_CAN_RxFifo0MsgPendingCallback+0x772>
  	  case 101:
  		  //----------- Right current -----------//
  		  if((adcBuffer[2] - offsetRightMotor) > 0) mb = adcBuffer[2] - offsetRightMotor;
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x600>)
 80015ae:	889b      	ldrh	r3, [r3, #4]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x610>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd07      	ble.n	80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x51c>
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x600>)
 80015be:	889b      	ldrh	r3, [r3, #4]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x610>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e001      	b.n	80015d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>
  		  else mb = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  		  shuntVoltage = (801 * mb) / 20;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f240 3221 	movw	r2, #801	; 0x321
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a37      	ldr	r2, [pc, #220]	; (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x608>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  		  current = (shuntVoltage / 10000.0);
 80015e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e6:	f7fe ff31 	bl	800044c <__aeabi_ui2d>
 80015ea:	a327      	add	r3, pc, #156	; (adr r3, 8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x5d8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f8d0 	bl	8000794 <__aeabi_ddiv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	4618      	mov	r0, r3
 80015fa:	4621      	mov	r1, r4
 80015fc:	f7ff fa62 	bl	8000ac4 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  		  currentMSB = current;
 8001604:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160c:	edc7 7a00 	vstr	s15, [r7]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  		  currentLSB = (current - currentMSB)*100;
 8001616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x614>
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001636:	edc7 7a00 	vstr	s15, [r7]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  		  data[1] = currentMSB;
 8001640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001644:	737b      	strb	r3, [r7, #13]
  		  data[2] = currentLSB;
 8001646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164a:	73bb      	strb	r3, [r7, #14]
  	  	  TxMessage.StdId = 0;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001660:	2203      	movs	r2, #3
 8001662:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001666:	2200      	movs	r2, #0
 8001668:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	f107 020c 	add.w	r2, r7, #12
 8001672:	4912      	ldr	r1, [pc, #72]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f002 fcf9 	bl	800406c <HAL_CAN_AddTxMessage>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80d2 	beq.w	8001826 <HAL_CAN_RxFifo0MsgPendingCallback+0x776>
  	  		  Error_Handler();
 8001682:	f001 f85b 	bl	800273c <Error_Handler>
  	  	  }
  		  break;
 8001686:	e0ce      	b.n	8001826 <HAL_CAN_RxFifo0MsgPendingCallback+0x776>
 8001688:	00000000 	.word	0x00000000
 800168c:	40c38800 	.word	0x40c38800
 8001690:	20000358 	.word	0x20000358
 8001694:	20000004 	.word	0x20000004
 8001698:	20000008 	.word	0x20000008
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000001 	.word	0x20000001
 80016a4:	40007400 	.word	0x40007400
 80016a8:	2000004d 	.word	0x2000004d
 80016ac:	2000004c 	.word	0x2000004c
 80016b0:	200000c0 	.word	0x200000c0
 80016b4:	20000090 	.word	0x20000090
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	200003ac 	.word	0x200003ac
 80016c0:	20000094 	.word	0x20000094
 80016c4:	42c80000 	.word	0x42c80000
  	  case 102:
  		  //----------- Battery voltage -----------//
  		  voltage = getInputVoltage();
 80016c8:	f7ff fb6e 	bl	8000da8 <getInputVoltage>
 80016cc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  		  voltageMSB = voltage;
 80016d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d8:	edc7 7a00 	vstr	s15, [r7]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  		  voltageLSB = (voltage - voltageMSB) * 100;
 80016e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x614>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	edc7 7a00 	vstr	s15, [r7]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  		  data[1] = voltageMSB;
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001710:	737b      	strb	r3, [r7, #13]
  		  data[2] = voltageLSB;
 8001712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001716:	73bb      	strb	r3, [r7, #14]
  		  TxMessage.StdId = 0;
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 8001724:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 3;
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 800172c:	2203      	movs	r2, #3
 800172e:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 8001730:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001732:	2200      	movs	r2, #0
 8001734:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	f107 020c 	add.w	r2, r7, #12
 800173e:	4943      	ldr	r1, [pc, #268]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f002 fc93 	bl	800406c <HAL_CAN_AddTxMessage>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d06e      	beq.n	800182a <HAL_CAN_RxFifo0MsgPendingCallback+0x77a>
  			  Error_Handler();
 800174c:	f000 fff6 	bl	800273c <Error_Handler>
  		  }
  		  break;
 8001750:	e06b      	b.n	800182a <HAL_CAN_RxFifo0MsgPendingCallback+0x77a>
  	  case 103:
  		  //----------- Left speed -----------//
  		  data[1] = speed_left;
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	737b      	strb	r3, [r7, #13]
  		  TxMessage.StdId = 0;
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 2;
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 800176e:	2202      	movs	r2, #2
 8001770:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	f107 020c 	add.w	r2, r7, #12
 8001780:	4932      	ldr	r1, [pc, #200]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f002 fc72 	bl	800406c <HAL_CAN_AddTxMessage>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d04f      	beq.n	800182e <HAL_CAN_RxFifo0MsgPendingCallback+0x77e>
  		  	Error_Handler();
 800178e:	f000 ffd5 	bl	800273c <Error_Handler>
  		  }
  		  break;
 8001792:	e04c      	b.n	800182e <HAL_CAN_RxFifo0MsgPendingCallback+0x77e>
  	  case 104:
  		  //----------- Right speed -----------//
  		  data[1] = speed_right;
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	737b      	strb	r3, [r7, #13]
  		  TxMessage.StdId = 0;
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 2;
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	f107 020c 	add.w	r2, r7, #12
 80017c2:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f002 fc51 	bl	800406c <HAL_CAN_AddTxMessage>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d030      	beq.n	8001832 <HAL_CAN_RxFifo0MsgPendingCallback+0x782>
  		  	Error_Handler();
 80017d0:	f000 ffb4 	bl	800273c <Error_Handler>
  		  }
  		  break;
 80017d4:	e02d      	b.n	8001832 <HAL_CAN_RxFifo0MsgPendingCallback+0x782>
  	  case 105:
  		  //----------- Get Status -----------//
  		  data[1] = OV_FAULT;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	737b      	strb	r3, [r7, #13]
  		  data[2] = GD_FAULT;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_CAN_RxFifo0MsgPendingCallback+0x7ac>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	73bb      	strb	r3, [r7, #14]
  		  data[3] = TIMEOUT;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_CAN_RxFifo0MsgPendingCallback+0x7b0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	73fb      	strb	r3, [r7, #15]
  		  TxMessage.StdId = 0;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 4;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001802:	2200      	movs	r2, #0
 8001804:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	f107 020c 	add.w	r2, r7, #12
 800180e:	490f      	ldr	r1, [pc, #60]	; (800184c <HAL_CAN_RxFifo0MsgPendingCallback+0x79c>)
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f002 fc2b 	bl	800406c <HAL_CAN_AddTxMessage>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <HAL_CAN_RxFifo0MsgPendingCallback+0x786>
  		    Error_Handler();
 800181c:	f000 ff8e 	bl	800273c <Error_Handler>
  		  }
  		  break;
 8001820:	e009      	b.n	8001836 <HAL_CAN_RxFifo0MsgPendingCallback+0x786>
  		  break;
 8001822:	bf00      	nop
 8001824:	e008      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  break;
 8001826:	bf00      	nop
 8001828:	e006      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  break;
 800182a:	bf00      	nop
 800182c:	e004      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  break;
 800182e:	bf00      	nop
 8001830:	e002      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  break;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>
  		  break;
 8001836:	bf00      	nop
  };
  counter ++;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_CAN_RxFifo0MsgPendingCallback+0x7b4>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_CAN_RxFifo0MsgPendingCallback+0x7b4>)
 8001842:	801a      	strh	r2, [r3, #0]

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	373c      	adds	r7, #60	; 0x3c
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	200003ac 	.word	0x200003ac
 8001850:	20000064 	.word	0x20000064
 8001854:	20000068 	.word	0x20000068
 8001858:	2000004d 	.word	0x2000004d
 800185c:	2000004c 	.word	0x2000004c
 8001860:	2000004e 	.word	0x2000004e
 8001864:	20000040 	.word	0x20000040

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f001 fae9 	bl	8002e44 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 fae7 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f000 fec5 	bl	8002604 <MX_GPIO_Init>
  MX_DMA_Init();
 800187a:	f000 feab 	bl	80025d4 <MX_DMA_Init>
  MX_ADC1_Init();
 800187e:	f000 fb45 	bl	8001f0c <MX_ADC1_Init>
  MX_CAN_Init();
 8001882:	f000 fbbf 	bl	8002004 <MX_CAN_Init>
  MX_DAC_Init();
 8001886:	f000 fc23 	bl	80020d0 <MX_DAC_Init>
  MX_TIM1_Init();
 800188a:	f000 fc8b 	bl	80021a4 <MX_TIM1_Init>
  MX_TIM15_Init();
 800188e:	f000 fd3b 	bl	8002308 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001892:	f000 fdcf 	bl	8002434 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001896:	f000 fdf3 	bl	8002480 <MX_TIM17_Init>
  MX_I2C1_Init();
 800189a:	f000 fc43 	bl	8002124 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800189e:	f000 fe69 	bl	8002574 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80018a2:	f000 fcdb 	bl	800225c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80018a6:	2100      	movs	r1, #0
 80018a8:	48ac      	ldr	r0, [pc, #688]	; (8001b5c <main+0x2f4>)
 80018aa:	f003 f96b 	bl	8004b84 <HAL_DAC_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	48ab      	ldr	r0, [pc, #684]	; (8001b60 <main+0x2f8>)
 80018b2:	f005 f97b 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80018b6:	2104      	movs	r1, #4
 80018b8:	48a9      	ldr	r0, [pc, #676]	; (8001b60 <main+0x2f8>)
 80018ba:	f005 f977 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018be:	2100      	movs	r1, #0
 80018c0:	48a8      	ldr	r0, [pc, #672]	; (8001b64 <main+0x2fc>)
 80018c2:	f001 fd87 	bl	80033d4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 3);
 80018c6:	2203      	movs	r2, #3
 80018c8:	49a7      	ldr	r1, [pc, #668]	; (8001b68 <main+0x300>)
 80018ca:	48a6      	ldr	r0, [pc, #664]	; (8001b64 <main+0x2fc>)
 80018cc:	f001 fce6 	bl	800329c <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2014      	movs	r0, #20
 80018d6:	f003 f8e0 	bl	8004a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80018da:	2014      	movs	r0, #20
 80018dc:	f003 f8f9 	bl	8004ad2 <HAL_NVIC_EnableIRQ>
  //SysTick_Config(SystemCoreClock / 800000);
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/800000000);
 80018e0:	f004 fe7e 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4ba1      	ldr	r3, [pc, #644]	; (8001b6c <main+0x304>)
 80018e8:	fba3 2302 	umull	r2, r3, r3, r2
 80018ec:	0f1b      	lsrs	r3, r3, #28
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f8fd 	bl	8004aee <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018f4:	2004      	movs	r0, #4
 80018f6:	f003 f907 	bl	8004b08 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001902:	f003 f8ca 	bl	8004a9a <HAL_NVIC_SetPriority>
  DAC1->DHR12R1 = 4000;
 8001906:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <main+0x308>)
 8001908:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800190c:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Start_IT(&htim1);
 800190e:	4899      	ldr	r0, [pc, #612]	; (8001b74 <main+0x30c>)
 8001910:	f005 f8a0 	bl	8006a54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001914:	4898      	ldr	r0, [pc, #608]	; (8001b78 <main+0x310>)
 8001916:	f005 f89d 	bl	8006a54 <HAL_TIM_Base_Start_IT>
  setPWMLeft(400);
 800191a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800191e:	f7ff fb37 	bl	8000f90 <setPWMLeft>
  setPWMRight(400);
 8001922:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001926:	f7ff fb7b 	bl	8001020 <setPWMRight>
  initPID(0.08, 0.5 ,0,0);
 800192a:	2000      	movs	r0, #0
 800192c:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8001b7c <main+0x314>
 8001930:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001934:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8001b80 <main+0x318>
 8001938:	f7ff f914 	bl	8000b64 <initPID>
  HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f001 fae7 	bl	8002f10 <HAL_Delay>
  offsetLeftMotor = adcBuffer[1];
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <main+0x300>)
 8001944:	885b      	ldrh	r3, [r3, #2]
 8001946:	461a      	mov	r2, r3
 8001948:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <main+0x31c>)
 800194a:	601a      	str	r2, [r3, #0]
  offsetRightMotor = adcBuffer[2];
 800194c:	4b86      	ldr	r3, [pc, #536]	; (8001b68 <main+0x300>)
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	461a      	mov	r2, r3
 8001952:	4b8d      	ldr	r3, [pc, #564]	; (8001b88 <main+0x320>)
 8001954:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  timertick = HAL_GetTick();
 8001956:	f001 facf 	bl	8002ef8 <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <main+0x324>)
 8001960:	601a      	str	r2, [r3, #0]
	  if(OV_FAULT == 1)
 8001962:	4b8b      	ldr	r3, [pc, #556]	; (8001b90 <main+0x328>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d115      	bne.n	8001996 <main+0x12e>
	  {
		  setPWMLeft(400);
 800196a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800196e:	f7ff fb0f 	bl	8000f90 <setPWMLeft>
	  	  setPWMRight(400);
 8001972:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001976:	f7ff fb53 	bl	8001020 <setPWMRight>
	   	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2140      	movs	r1, #64	; 0x40
 800197e:	4885      	ldr	r0, [pc, #532]	; (8001b94 <main+0x32c>)
 8001980:	f003 fc02 	bl	8005188 <HAL_GPIO_WritePin>
	   	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	4882      	ldr	r0, [pc, #520]	; (8001b94 <main+0x32c>)
 800198a:	f003 fbfd 	bl	8005188 <HAL_GPIO_WritePin>
	   	  HAL_Delay(100);
 800198e:	2064      	movs	r0, #100	; 0x64
 8001990:	f001 fabe 	bl	8002f10 <HAL_Delay>
 8001994:	e16d      	b.n	8001c72 <main+0x40a>
	  }
	  else if(TIMEOUT == 1)
 8001996:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <main+0x330>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d129      	bne.n	80019f2 <main+0x18a>
	  {
		  //Set sleep pins low
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	487c      	ldr	r0, [pc, #496]	; (8001b94 <main+0x32c>)
 80019a4:	f003 fbf0 	bl	8005188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	4879      	ldr	r0, [pc, #484]	; (8001b94 <main+0x32c>)
 80019ae:	f003 fbeb 	bl	8005188 <HAL_GPIO_WritePin>
		  //Set Phase pins low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f003 fbe5 	bl	8005188 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f003 fbdf 	bl	8005188 <HAL_GPIO_WritePin>
		  pwm_left = 400;
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <main+0x334>)
 80019cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019d0:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <main+0x338>)
 80019d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019d8:	601a      	str	r2, [r3, #0]
		  pwm_right = 400;
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <main+0x33c>)
 80019dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019e0:	601a      	str	r2, [r3, #0]
		  pwm_target_right = 400;
 80019e2:	4b71      	ldr	r3, [pc, #452]	; (8001ba8 <main+0x340>)
 80019e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019e8:	601a      	str	r2, [r3, #0]
		  HAL_Delay(100);
 80019ea:	2064      	movs	r0, #100	; 0x64
 80019ec:	f001 fa90 	bl	8002f10 <HAL_Delay>
 80019f0:	e13f      	b.n	8001c72 <main+0x40a>
	  }
	  else if(pwm_target_left != pwm_left || pwm_target_right != pwm_right)
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <main+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <main+0x334>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d106      	bne.n	8001a0c <main+0x1a4>
 80019fe:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <main+0x340>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <main+0x33c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	f000 8133 	beq.w	8001c72 <main+0x40a>
	  {
		  if((timertick - old_timertick_accl) >= accl)
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <main+0x324>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <main+0x344>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a66      	ldr	r2, [pc, #408]	; (8001bb0 <main+0x348>)
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	db77      	blt.n	8001b0e <main+0x2a6>
		  {
			  old_timertick_accl = timertick;
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <main+0x324>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a62      	ldr	r2, [pc, #392]	; (8001bac <main+0x344>)
 8001a24:	6013      	str	r3, [r2, #0]
			  if(pwm_left < 400)
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <main+0x334>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a2e:	d21a      	bcs.n	8001a66 <main+0x1fe>
			  {
				  if(pwm_target_left < pwm_left)
 8001a30:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <main+0x338>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <main+0x334>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d22e      	bcs.n	8001a9a <main+0x232>
				  {
					  if((pwm_left - pwm_target_left) > 10) setPIDPWMLeft(pwm_left - 10);
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <main+0x334>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <main+0x338>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b0a      	cmp	r3, #10
 8001a48:	d906      	bls.n	8001a58 <main+0x1f0>
 8001a4a:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <main+0x334>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3b0a      	subs	r3, #10
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa0d 	bl	8000e70 <setPIDPWMLeft>
 8001a56:	e020      	b.n	8001a9a <main+0x232>
					  else setPIDPWMLeft(pwm_left - 1);
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <main+0x334>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fa06 	bl	8000e70 <setPIDPWMLeft>
 8001a64:	e019      	b.n	8001a9a <main+0x232>
				  }
			  }
			  else
			  {
				  if(pwm_target_left > pwm_left)
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <main+0x338>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <main+0x334>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d913      	bls.n	8001a9a <main+0x232>
				  {
					  if((pwm_target_left - pwm_left) > 10) setPIDPWMLeft(pwm_left + 10);
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <main+0x338>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <main+0x334>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d906      	bls.n	8001a8e <main+0x226>
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <main+0x334>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	330a      	adds	r3, #10
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9f2 	bl	8000e70 <setPIDPWMLeft>
 8001a8c:	e005      	b.n	8001a9a <main+0x232>
					  else setPIDPWMLeft(pwm_left + 1);
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <main+0x334>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f9eb 	bl	8000e70 <setPIDPWMLeft>
				  }
			  }
			  if(pwm_right < 400)
 8001a9a:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <main+0x33c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001aa2:	d21a      	bcs.n	8001ada <main+0x272>
			  {
				  if(pwm_target_right < pwm_right)
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <main+0x340>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <main+0x33c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d22e      	bcs.n	8001b0e <main+0x2a6>
				  {
					  if((pwm_right - pwm_target_right) > 10) setPIDPWMRight(pwm_right - 10);
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <main+0x33c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <main+0x340>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d906      	bls.n	8001acc <main+0x264>
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <main+0x33c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3b0a      	subs	r3, #10
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fa1b 	bl	8000f00 <setPIDPWMRight>
 8001aca:	e020      	b.n	8001b0e <main+0x2a6>
					  else setPIDPWMRight(pwm_right - 1);
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <main+0x33c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa14 	bl	8000f00 <setPIDPWMRight>
 8001ad8:	e019      	b.n	8001b0e <main+0x2a6>
				  }
			  }
			  else
			  {
				  if(pwm_target_right > pwm_right)
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <main+0x340>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <main+0x33c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d913      	bls.n	8001b0e <main+0x2a6>
				  {
					  if((pwm_target_right - pwm_right) > 10) setPIDPWMRight(pwm_right + 10);
 8001ae6:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <main+0x340>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <main+0x33c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d906      	bls.n	8001b02 <main+0x29a>
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <main+0x33c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	330a      	adds	r3, #10
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa00 	bl	8000f00 <setPIDPWMRight>
 8001b00:	e005      	b.n	8001b0e <main+0x2a6>
					  else setPIDPWMRight(pwm_right + 1);
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <main+0x33c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f9f9 	bl	8000f00 <setPIDPWMRight>
				  }
			  }
		  }
		  if((timertick - old_timertick_decl) >= decl)
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <main+0x324>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <main+0x34c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <main+0x350>)
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	f2c0 80a8 	blt.w	8001c72 <main+0x40a>
		  {
			  old_timertick_decl = timertick;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <main+0x324>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <main+0x34c>)
 8001b28:	6013      	str	r3, [r2, #0]
			  if(pwm_left < 400)
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <main+0x334>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001b32:	d24a      	bcs.n	8001bca <main+0x362>
			  {
				  if(pwm_target_left > pwm_left)
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <main+0x338>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <main+0x334>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d95e      	bls.n	8001bfe <main+0x396>
				  {
					  if((pwm_target_left - pwm_left) > 10) setPIDPWMLeft(pwm_left + 10);
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <main+0x334>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d936      	bls.n	8001bbc <main+0x354>
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <main+0x334>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	330a      	adds	r3, #10
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f98b 	bl	8000e70 <setPIDPWMLeft>
 8001b5a:	e050      	b.n	8001bfe <main+0x396>
 8001b5c:	200002a8 	.word	0x200002a8
 8001b60:	20000114 	.word	0x20000114
 8001b64:	200001d4 	.word	0x200001d4
 8001b68:	200000c0 	.word	0x200000c0
 8001b6c:	55e63b89 	.word	0x55e63b89
 8001b70:	40007400 	.word	0x40007400
 8001b74:	20000308 	.word	0x20000308
 8001b78:	20000360 	.word	0x20000360
 8001b7c:	00000000 	.word	0x00000000
 8001b80:	3da3d70a 	.word	0x3da3d70a
 8001b84:	20000090 	.word	0x20000090
 8001b88:	20000094 	.word	0x20000094
 8001b8c:	20000050 	.word	0x20000050
 8001b90:	2000004d 	.word	0x2000004d
 8001b94:	48000800 	.word	0x48000800
 8001b98:	2000004e 	.word	0x2000004e
 8001b9c:	2000000c 	.word	0x2000000c
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000054 	.word	0x20000054
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000058 	.word	0x20000058
 8001bb8:	20000001 	.word	0x20000001
					  else setPIDPWMLeft(pwm_left + 1);
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <main+0x590>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f954 	bl	8000e70 <setPIDPWMLeft>
 8001bc8:	e019      	b.n	8001bfe <main+0x396>
				  }
			  }
			  else
			  {
				  if(pwm_target_left < pwm_left)
 8001bca:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <main+0x594>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <main+0x590>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d213      	bcs.n	8001bfe <main+0x396>
				  {
				  	  if((pwm_left - pwm_target_left) > 10) setPIDPWMLeft(pwm_left - 10);
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <main+0x590>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <main+0x594>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d906      	bls.n	8001bf2 <main+0x38a>
 8001be4:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <main+0x590>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3b0a      	subs	r3, #10
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f940 	bl	8000e70 <setPIDPWMLeft>
 8001bf0:	e005      	b.n	8001bfe <main+0x396>
				  	  else setPIDPWMLeft(pwm_left - 1);
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <main+0x590>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f939 	bl	8000e70 <setPIDPWMLeft>
				  }
			  }
			  if(pwm_right < 400)
 8001bfe:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <main+0x598>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c06:	d21a      	bcs.n	8001c3e <main+0x3d6>
			  {
				  if(pwm_target_right > pwm_right)
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <main+0x59c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <main+0x598>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d92e      	bls.n	8001c72 <main+0x40a>
				  {
				  	  if((pwm_target_right - pwm_right) > 10) setPIDPWMRight(pwm_right + 10);
 8001c14:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <main+0x59c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <main+0x598>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d906      	bls.n	8001c30 <main+0x3c8>
 8001c22:	4b77      	ldr	r3, [pc, #476]	; (8001e00 <main+0x598>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330a      	adds	r3, #10
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f969 	bl	8000f00 <setPIDPWMRight>
 8001c2e:	e020      	b.n	8001c72 <main+0x40a>
				  	  else setPIDPWMRight(pwm_right + 1);
 8001c30:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <main+0x598>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f962 	bl	8000f00 <setPIDPWMRight>
 8001c3c:	e019      	b.n	8001c72 <main+0x40a>
				  }
			  }
			  else
			  {
				  if(pwm_target_right < pwm_right)
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <main+0x59c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <main+0x598>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d213      	bcs.n	8001c72 <main+0x40a>
				  {
					  if((pwm_right - pwm_target_right) > 10) setPIDPWMRight(pwm_right - 10);
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <main+0x598>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <main+0x59c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b0a      	cmp	r3, #10
 8001c56:	d906      	bls.n	8001c66 <main+0x3fe>
 8001c58:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <main+0x598>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3b0a      	subs	r3, #10
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f94e 	bl	8000f00 <setPIDPWMRight>
 8001c64:	e005      	b.n	8001c72 <main+0x40a>
					  else setPIDPWMRight(pwm_right - 1);
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <main+0x598>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f947 	bl	8000f00 <setPIDPWMRight>
				  }
			  }
		  }
  	  }
  	  float inputVoltage = getInputVoltage();
 8001c72:	f7ff f899 	bl	8000da8 <getInputVoltage>
 8001c76:	ed87 0a01 	vstr	s0, [r7, #4]
  	  if(inputVoltage > OVERVOLTAGE && OV_FAULT == 0)
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fc08 	bl	8000490 <__aeabi_f2d>
 8001c80:	a359      	add	r3, pc, #356	; (adr r3, 8001de8 <main+0x580>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe feeb 	bl	8000a60 <__aeabi_dcmpgt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <main+0x436>
 8001c90:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <main+0x5a0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <main+0x436>
  	  {
  		  OV_FAULT = 1;
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <main+0x5a0>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)))
 8001c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca2:	485a      	ldr	r0, [pc, #360]	; (8001e0c <main+0x5a4>)
 8001ca4:	f003 fa58 	bl	8005158 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <main+0x456>
 8001cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb2:	4856      	ldr	r0, [pc, #344]	; (8001e0c <main+0x5a4>)
 8001cb4:	f003 fa50 	bl	8005158 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <main+0x45e>
  	  {
  		  GD_FAULT = 1;
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <main+0x5a8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e002      	b.n	8001ccc <main+0x464>
  	  }
  	  else{
  		  GD_FAULT = 0;
 8001cc6:	4b52      	ldr	r3, [pc, #328]	; (8001e10 <main+0x5a8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((timertick - timeout_timertick) >= 5000)
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <main+0x5ac>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b51      	ldr	r3, [pc, #324]	; (8001e18 <main+0x5b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	dd03      	ble.n	8001ce6 <main+0x47e>
  	  {
  		  TIMEOUT = 1;
 8001cde:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <main+0x5b4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e002      	b.n	8001cec <main+0x484>
  	  }
  	  else {
  		  TIMEOUT = 0;
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <main+0x5b4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((timertick - temp_timertick) >= 50)
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <main+0x5ac>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <main+0x5b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b31      	cmp	r3, #49	; 0x31
 8001cf8:	f77f ae2d 	ble.w	8001956 <main+0xee>
  	  {
  		  previous_speed_left = speed_left;
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <main+0x5bc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <main+0x5c0>)
 8001d02:	6013      	str	r3, [r2, #0]
  		  previous_speed_right = speed_right;
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <main+0x5c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a49      	ldr	r2, [pc, #292]	; (8001e30 <main+0x5c8>)
 8001d0a:	6013      	str	r3, [r2, #0]
  		  speed_left = (previous_speed_left / 2) + TIM1 -> CNT;
 8001d0c:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <main+0x5c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0fda      	lsrs	r2, r3, #31
 8001d12:	4413      	add	r3, r2
 8001d14:	105b      	asrs	r3, r3, #1
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <main+0x5cc>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	4413      	add	r3, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <main+0x5bc>)
 8001d22:	601a      	str	r2, [r3, #0]
  		  speed_right = (previous_speed_right / 2) + TIM2 -> CNT;
 8001d24:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <main+0x5c8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0fda      	lsrs	r2, r3, #31
 8001d2a:	4413      	add	r3, r2
 8001d2c:	105b      	asrs	r3, r3, #1
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	4413      	add	r3, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <main+0x5c4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  		  TIM1 -> CNT = 0;
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <main+0x5cc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
  		  TIM2 -> CNT = 0;
 8001d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
  		  temp_timertick = timertick;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <main+0x5ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <main+0x5b8>)
 8001d52:	6013      	str	r3, [r2, #0]
  		  int pidresult = calculatePIDLeft(speed_left, pid_pwm_target_left / 2.66);
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <main+0x5bc>)
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <main+0x5d0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fb75 	bl	800044c <__aeabi_ui2d>
 8001d62:	a323      	add	r3, pc, #140	; (adr r3, 8001df0 <main+0x588>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fd14 	bl	8000794 <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fe7e 	bl	8000a74 <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7fe ff15 	bl	8000bac <calculatePIDLeft>
 8001d82:	6038      	str	r0, [r7, #0]
  		  if(pidresult > 30) __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pidresult);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b1e      	cmp	r3, #30
 8001d88:	dd04      	ble.n	8001d94 <main+0x52c>
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <main+0x5d4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
 8001d92:	e003      	b.n	8001d9c <main+0x534>
  		  else __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0);
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <main+0x5d4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
  		  pidresult = calculatePIDRight(speed_right, pid_pwm_target_right / 2.66);
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <main+0x5c4>)
 8001d9e:	681c      	ldr	r4, [r3, #0]
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <main+0x5d8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb51 	bl	800044c <__aeabi_ui2d>
 8001daa:	a311      	add	r3, pc, #68	; (adr r3, 8001df0 <main+0x588>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fcf0 	bl	8000794 <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fe5a 	bl	8000a74 <__aeabi_d2iz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7fe ff6b 	bl	8000ca0 <calculatePIDRight>
 8001dca:	6038      	str	r0, [r7, #0]
  		  if(pidresult > 30) __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pidresult);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b1e      	cmp	r3, #30
 8001dd0:	dd04      	ble.n	8001ddc <main+0x574>
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <main+0x5d4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dda:	e5bc      	b.n	8001956 <main+0xee>
  		  else __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 0);
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <main+0x5d4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8001de4:	e5b7      	b.n	8001956 <main+0xee>
 8001de6:	bf00      	nop
 8001de8:	33333333 	.word	0x33333333
 8001dec:	403d3333 	.word	0x403d3333
 8001df0:	147ae148 	.word	0x147ae148
 8001df4:	400547ae 	.word	0x400547ae
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	20000010 	.word	0x20000010
 8001e04:	20000008 	.word	0x20000008
 8001e08:	2000004d 	.word	0x2000004d
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	2000004c 	.word	0x2000004c
 8001e14:	20000050 	.word	0x20000050
 8001e18:	20000060 	.word	0x20000060
 8001e1c:	2000004e 	.word	0x2000004e
 8001e20:	2000005c 	.word	0x2000005c
 8001e24:	20000064 	.word	0x20000064
 8001e28:	2000006c 	.word	0x2000006c
 8001e2c:	20000068 	.word	0x20000068
 8001e30:	20000070 	.word	0x20000070
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	20000044 	.word	0x20000044
 8001e3c:	20000114 	.word	0x20000114
 8001e40:	20000048 	.word	0x20000048

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b09c      	sub	sp, #112	; 0x70
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e4e:	2228      	movs	r2, #40	; 0x28
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 f912 	bl	800807c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2234      	movs	r2, #52	; 0x34
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 f904 	bl	800807c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001e88:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fab6 	bl	8005404 <HAL_RCC_OscConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001e9e:	f000 fc4d 	bl	800273c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001eaa:	2390      	movs	r3, #144	; 0x90
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001eb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 f9a9 	bl	8006214 <HAL_RCC_ClockConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ec8:	f000 fc38 	bl	800273c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <SystemClock_Config+0xc4>)
 8001ece:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8001ee8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001eec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fbc5 	bl	8006680 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001efc:	f000 fc1e 	bl	800273c <Error_Handler>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3770      	adds	r7, #112	; 0x70
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	001c10a1 	.word	0x001c10a1

08001f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f54:	f44f 7260 	mov.w	r2, #896	; 0x380
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f62:	2203      	movs	r2, #3
 8001f64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f70:	2204      	movs	r2, #4
 8001f72:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f80:	481f      	ldr	r0, [pc, #124]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001f82:	f001 f805 	bl	8002f90 <HAL_ADC_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8001f8c:	f000 fbd6 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f90:	2308      	movs	r3, #8
 8001f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001f9c:	2305      	movs	r3, #5
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	4619      	mov	r1, r3
 8001fac:	4814      	ldr	r0, [pc, #80]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001fae:	f001 fa7b 	bl	80034a8 <HAL_ADC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001fb8:	f000 fbc0 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001fce:	f001 fa6b 	bl	80034a8 <HAL_ADC_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001fd8:	f000 fbb0 	bl	800273c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001fdc:	2306      	movs	r3, #6
 8001fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_ADC1_Init+0xf4>)
 8001fea:	f001 fa5d 	bl	80034a8 <HAL_ADC_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001ff4:	f000 fba2 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200001d4 	.word	0x200001d4

08002004 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_CAN_Init+0xc4>)
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <MX_CAN_Init+0xc8>)
 800200e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002012:	2204      	movs	r2, #4
 8002014:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <MX_CAN_Init+0xc4>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002024:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002028:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <MX_CAN_Init+0xc4>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002032:	2200      	movs	r2, #0
 8002034:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002038:	2200      	movs	r2, #0
 800203a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <MX_CAN_Init+0xc4>)
 800203e:	2200      	movs	r2, #0
 8002040:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002044:	2200      	movs	r2, #0
 8002046:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <MX_CAN_Init+0xc4>)
 800204a:	2200      	movs	r2, #0
 800204c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002050:	2200      	movs	r2, #0
 8002052:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002054:	481c      	ldr	r0, [pc, #112]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002056:	f001 fe00 	bl	8003c5a <HAL_CAN_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002060:	f000 fb6c 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sf;
    sf.FilterMaskIdHigh = 0xFFFF;
 8002064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002068:	60bb      	str	r3, [r7, #8]
    sf.FilterMaskIdLow = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
    sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
    sf.FilterBank = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
    sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
    sf.FilterScale = CAN_FILTERSCALE_32BIT;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
    sf.FilterActivation = CAN_FILTER_ENABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
    sf.FilterIdLow= 0;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
    sf.FilterIdHigh = 0x001 << 5;
 8002086:	2320      	movs	r3, #32
 8002088:	603b      	str	r3, [r7, #0]
    if (HAL_CAN_ConfigFilter(&hcan, &sf) != HAL_OK) {
 800208a:	463b      	mov	r3, r7
 800208c:	4619      	mov	r1, r3
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <MX_CAN_Init+0xc4>)
 8002090:	f001 fede 	bl	8003e50 <HAL_CAN_ConfigFilter>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_CAN_Init+0x9a>
      Error_Handler();
 800209a:	f000 fb4f 	bl	800273c <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800209e:	2102      	movs	r1, #2
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <MX_CAN_Init+0xc4>)
 80020a2:	f002 f9d0 	bl	8004446 <HAL_CAN_ActivateNotification>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_CAN_Init+0xac>
        Error_Handler();
 80020ac:	f000 fb46 	bl	800273c <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_CAN_Init+0xc4>)
 80020b2:	f001 ff97 	bl	8003fe4 <HAL_CAN_Start>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_CAN_Init+0xbc>
      Error_Handler();
 80020bc:	f000 fb3e 	bl	800273c <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200001ac 	.word	0x200001ac
 80020cc:	40006400 	.word	0x40006400

080020d0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_DAC_Init+0x4c>)
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <MX_DAC_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <MX_DAC_Init+0x4c>)
 80020e8:	f002 fd2a 	bl	8004b40 <HAL_DAC_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80020f2:	f000 fb23 	bl	800273c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_DAC_Init+0x4c>)
 8002106:	f002 fd74 	bl	8004bf2 <HAL_DAC_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8002110:	f000 fb14 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200002a8 	.word	0x200002a8
 8002120:	40007400 	.word	0x40007400

08002124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_I2C1_Init+0x74>)
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <MX_I2C1_Init+0x78>)
 800212c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_I2C1_Init+0x74>)
 8002130:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <MX_I2C1_Init+0x7c>)
 8002132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_I2C1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_I2C1_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_I2C1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_I2C1_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_I2C1_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_I2C1_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_I2C1_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <MX_I2C1_Init+0x74>)
 8002160:	f003 f82a 	bl	80051b8 <HAL_I2C_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800216a:	f000 fae7 	bl	800273c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216e:	2100      	movs	r1, #0
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <MX_I2C1_Init+0x74>)
 8002172:	f003 f8b0 	bl	80052d6 <HAL_I2CEx_ConfigAnalogFilter>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800217c:	f000 fade 	bl	800273c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_I2C1_Init+0x74>)
 8002184:	f003 f8f2 	bl	800536c <HAL_I2CEx_ConfigDigitalFilter>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800218e:	f000 fad5 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000c8 	.word	0x200000c8
 800219c:	40005400 	.word	0x40005400
 80021a0:	2000090e 	.word	0x2000090e

080021a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ba:	463b      	mov	r3, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <MX_TIM1_Init+0xb4>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f0:	4818      	ldr	r0, [pc, #96]	; (8002254 <MX_TIM1_Init+0xb0>)
 80021f2:	f004 fbd7 	bl	80069a4 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80021fc:	f000 fa9e 	bl	800273c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002200:	2307      	movs	r3, #7
 8002202:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002204:	2370      	movs	r3, #112	; 0x70
 8002206:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4619      	mov	r1, r3
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <MX_TIM1_Init+0xb0>)
 800221c:	f004 febc 	bl	8006f98 <HAL_TIM_SlaveConfigSynchro>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8002226:	f000 fa89 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_TIM1_Init+0xb0>)
 800223c:	f005 fb2e 	bl	800789c <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002246:	f000 fa79 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000308 	.word	0x20000308
 8002258:	40012c00 	.word	0x40012c00

0800225c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002272:	463b      	mov	r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <MX_TIM2_Init+0xa8>)
 800227e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <MX_TIM2_Init+0xa8>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <MX_TIM2_Init+0xa8>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <MX_TIM2_Init+0xa8>)
 8002292:	f04f 32ff 	mov.w	r2, #4294967295
 8002296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_TIM2_Init+0xa8>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <MX_TIM2_Init+0xa8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a4:	4817      	ldr	r0, [pc, #92]	; (8002304 <MX_TIM2_Init+0xa8>)
 80022a6:	f004 fb7d 	bl	80069a4 <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80022b0:	f000 fa44 	bl	800273c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80022b4:	2307      	movs	r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80022b8:	2370      	movs	r3, #112	; 0x70
 80022ba:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4619      	mov	r1, r3
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <MX_TIM2_Init+0xa8>)
 80022d0:	f004 fe62 	bl	8006f98 <HAL_TIM_SlaveConfigSynchro>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80022da:	f000 fa2f 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e6:	463b      	mov	r3, r7
 80022e8:	4619      	mov	r1, r3
 80022ea:	4806      	ldr	r0, [pc, #24]	; (8002304 <MX_TIM2_Init+0xa8>)
 80022ec:	f005 fad6 	bl	800789c <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80022f6:	f000 fa21 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000360 	.word	0x20000360

08002308 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b096      	sub	sp, #88	; 0x58
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	222c      	movs	r2, #44	; 0x2c
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f005 fea1 	bl	800807c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800233a:	4b3c      	ldr	r3, [pc, #240]	; (800242c <MX_TIM15_Init+0x124>)
 800233c:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <MX_TIM15_Init+0x128>)
 800233e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002340:	4b3a      	ldr	r3, [pc, #232]	; (800242c <MX_TIM15_Init+0x124>)
 8002342:	2200      	movs	r2, #0
 8002344:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <MX_TIM15_Init+0x124>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <MX_TIM15_Init+0x124>)
 800234e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002352:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <MX_TIM15_Init+0x124>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <MX_TIM15_Init+0x124>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <MX_TIM15_Init+0x124>)
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002366:	4831      	ldr	r0, [pc, #196]	; (800242c <MX_TIM15_Init+0x124>)
 8002368:	f004 fbc8 	bl	8006afc <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002372:	f000 f9e3 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002376:	2320      	movs	r3, #32
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800237e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002382:	4619      	mov	r1, r3
 8002384:	4829      	ldr	r0, [pc, #164]	; (800242c <MX_TIM15_Init+0x124>)
 8002386:	f005 fa89 	bl	800789c <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002390:	f000 f9d4 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002394:	2360      	movs	r3, #96	; 0x60
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1200;
 8002398:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	481c      	ldr	r0, [pc, #112]	; (800242c <MX_TIM15_Init+0x124>)
 80023bc:	f004 fcdc 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80023c6:	f000 f9b9 	bl	800273c <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 80023ca:	23c8      	movs	r3, #200	; 0xc8
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	2204      	movs	r2, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4815      	ldr	r0, [pc, #84]	; (800242c <MX_TIM15_Init+0x124>)
 80023d8:	f004 fcce 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM15_Init+0xde>
  {
    Error_Handler();
 80023e2:	f000 f9ab 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <MX_TIM15_Init+0x124>)
 800240e:	f005 faab 	bl	8007968 <HAL_TIMEx_ConfigBreakDeadTime>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 8002418:	f000 f990 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <MX_TIM15_Init+0x124>)
 800241e:	f000 fbc5 	bl	8002bac <HAL_TIM_MspPostInit>

}
 8002422:	bf00      	nop
 8002424:	3758      	adds	r7, #88	; 0x58
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000114 	.word	0x20000114
 8002430:	40014000 	.word	0x40014000

08002434 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <MX_TIM16_Init+0x44>)
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <MX_TIM16_Init+0x48>)
 800243c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_TIM16_Init+0x44>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_TIM16_Init+0x44>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_TIM16_Init+0x44>)
 800244c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002450:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_TIM16_Init+0x44>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <MX_TIM16_Init+0x44>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_TIM16_Init+0x44>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <MX_TIM16_Init+0x44>)
 8002466:	f004 fa9d 	bl	80069a4 <HAL_TIM_Base_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002470:	f000 f964 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200003c4 	.word	0x200003c4
 800247c:	40014400 	.word	0x40014400

08002480 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b092      	sub	sp, #72	; 0x48
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	222c      	movs	r2, #44	; 0x2c
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 fdeb 	bl	800807c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <MX_TIM17_Init+0xec>)
 80024a8:	4a31      	ldr	r2, [pc, #196]	; (8002570 <MX_TIM17_Init+0xf0>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <MX_TIM17_Init+0xec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <MX_TIM17_Init+0xec>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <MX_TIM17_Init+0xec>)
 80024ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <MX_TIM17_Init+0xec>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <MX_TIM17_Init+0xec>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <MX_TIM17_Init+0xec>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024d2:	4826      	ldr	r0, [pc, #152]	; (800256c <MX_TIM17_Init+0xec>)
 80024d4:	f004 fa66 	bl	80069a4 <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80024de:	f000 f92d 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80024e2:	4822      	ldr	r0, [pc, #136]	; (800256c <MX_TIM17_Init+0xec>)
 80024e4:	f004 fb0a 	bl	8006afc <HAL_TIM_PWM_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80024ee:	f000 f925 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	; 0x60
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	2200      	movs	r2, #0
 8002514:	4619      	mov	r1, r3
 8002516:	4815      	ldr	r0, [pc, #84]	; (800256c <MX_TIM17_Init+0xec>)
 8002518:	f004 fc2e 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002522:	f000 f90b 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800253a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	4807      	ldr	r0, [pc, #28]	; (800256c <MX_TIM17_Init+0xec>)
 800254e:	f005 fa0b 	bl	8007968 <HAL_TIMEx_ConfigBreakDeadTime>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002558:	f000 f8f0 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <MX_TIM17_Init+0xec>)
 800255e:	f000 fb25 	bl	8002bac <HAL_TIM_MspPostInit>

}
 8002562:	bf00      	nop
 8002564:	3748      	adds	r7, #72	; 0x48
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000160 	.word	0x20000160
 8002570:	40014800 	.word	0x40014800

08002574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <MX_USART1_UART_Init+0x5c>)
 800257c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002580:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b8:	f005 fa4e 	bl	8007a58 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025c2:	f000 f8bb 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000224 	.word	0x20000224
 80025d0:	40013800 	.word	0x40013800

080025d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <MX_DMA_Init+0x2c>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <MX_DMA_Init+0x2c>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6153      	str	r3, [r2, #20]
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MX_DMA_Init+0x2c>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b45      	ldr	r3, [pc, #276]	; (8002730 <MX_GPIO_Init+0x12c>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4a44      	ldr	r2, [pc, #272]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002624:	6153      	str	r3, [r2, #20]
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4a3e      	ldr	r2, [pc, #248]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	6153      	str	r3, [r2, #20]
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <MX_GPIO_Init+0x12c>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6153      	str	r3, [r2, #20]
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <MX_GPIO_Init+0x12c>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002662:	2200      	movs	r2, #0
 8002664:	21c0      	movs	r1, #192	; 0xc0
 8002666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266a:	f002 fd8d 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002674:	482f      	ldr	r0, [pc, #188]	; (8002734 <MX_GPIO_Init+0x130>)
 8002676:	f002 fd87 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	21c0      	movs	r1, #192	; 0xc0
 800267e:	482e      	ldr	r0, [pc, #184]	; (8002738 <MX_GPIO_Init+0x134>)
 8002680:	f002 fd82 	bl	8005188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002684:	2302      	movs	r3, #2
 8002686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4619      	mov	r1, r3
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f002 fbeb 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a6:	2302      	movs	r3, #2
 80026a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b8:	f002 fbdc 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026bc:	2301      	movs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4619      	mov	r1, r3
 80026ce:	4819      	ldr	r0, [pc, #100]	; (8002734 <MX_GPIO_Init+0x130>)
 80026d0:	f002 fbd0 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026da:	2301      	movs	r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	4811      	ldr	r0, [pc, #68]	; (8002734 <MX_GPIO_Init+0x130>)
 80026ee:	f002 fbc1 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <MX_GPIO_Init+0x134>)
 800270a:	f002 fbb3 	bl	8004e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800270e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002718:	2301      	movs	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_GPIO_Init+0x134>)
 8002724:	f002 fba6 	bl	8004e74 <HAL_GPIO_Init>

}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	48000400 	.word	0x48000400
 8002738:	48000800 	.word	0x48000800

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002742:	e7fe      	b.n	8002742 <Error_Handler+0x6>

08002744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_MspInit+0x44>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_MspInit+0x44>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6193      	str	r3, [r2, #24]
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_MspInit+0x44>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_MspInit+0x44>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_MspInit+0x44>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_MspInit+0x44>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ac:	d14c      	bne.n	8002848 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6153      	str	r3, [r2, #20]
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027d0:	6153      	str	r3, [r2, #20]
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_ADC_MspInit+0xc4>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80027de:	2307      	movs	r3, #7
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e2:	2303      	movs	r3, #3
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <HAL_ADC_MspInit+0xc8>)
 80027f2:	f002 fb3f 	bl	8004e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_ADC_MspInit+0xd0>)
 80027fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002814:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800281c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002820:	2220      	movs	r2, #32
 8002822:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800282a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800282c:	480a      	ldr	r0, [pc, #40]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 800282e:	f002 fa2d 	bl	8004c8c <HAL_DMA_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8002838:	f7ff ff80 	bl	800273c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <HAL_ADC_MspInit+0xcc>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	48000800 	.word	0x48000800
 8002858:	200002bc 	.word	0x200002bc
 800285c:	40020008 	.word	0x40020008

08002860 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_CAN_MspInit+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d131      	bne.n	80028e6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	6153      	str	r3, [r2, #20]
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <HAL_CAN_MspInit+0x94>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80028c4:	2309      	movs	r3, #9
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d2:	f002 facf 	bl	8004e74 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2014      	movs	r0, #20
 80028dc:	f002 f8dd 	bl	8004a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80028e0:	2014      	movs	r0, #20
 80028e2:	f002 f8f6 	bl	8004ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40006400 	.word	0x40006400
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_DAC_MspInit+0x74>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d124      	bne.n	8002964 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_DAC_MspInit+0x78>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_DAC_MspInit+0x78>)
 8002920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002924:	61d3      	str	r3, [r2, #28]
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_DAC_MspInit+0x78>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_DAC_MspInit+0x78>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_DAC_MspInit+0x78>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	6153      	str	r3, [r2, #20]
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_DAC_MspInit+0x78>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800294a:	2310      	movs	r3, #16
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294e:	2303      	movs	r3, #3
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002960:	f002 fa88 	bl	8004e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40007400 	.word	0x40007400
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a26      	ldr	r2, [pc, #152]	; (8002a2c <HAL_I2C_MspInit+0xb8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d145      	bne.n	8002a22 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	6153      	str	r3, [r2, #20]
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6153      	str	r3, [r2, #20]
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029cc:	2312      	movs	r3, #18
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029d8:	2304      	movs	r3, #4
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f002 fa45 	bl	8004e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ee:	2312      	movs	r3, #18
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029fa:	2304      	movs	r3, #4
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <HAL_I2C_MspInit+0xc0>)
 8002a06:	f002 fa35 	bl	8004e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 8002a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_I2C_MspInit+0xbc>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000400 	.word	0x48000400

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	; 0x38
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <HAL_TIM_Base_MspInit+0x120>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d128      	bne.n	8002aac <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5a:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4a3f      	ldr	r2, [pc, #252]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a64:	6193      	str	r3, [r2, #24]
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a7c:	6153      	str	r3, [r2, #20]
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482e      	ldr	r0, [pc, #184]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002aa6:	f002 f9e5 	bl	8004e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002aaa:	e051      	b.n	8002b50 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d129      	bne.n	8002b0a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	6153      	str	r3, [r2, #20]
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002af6:	2301      	movs	r3, #1
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b04:	f002 f9b6 	bl	8004e74 <HAL_GPIO_Init>
}
 8002b08:	e022      	b.n	8002b50 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_TIM_Base_MspInit+0x12c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10c      	bne.n	8002b2e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
}
 8002b2c:	e010      	b.n	8002b50 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM17)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_TIM_Base_MspInit+0x130>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10b      	bne.n	8002b50 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3738      	adds	r7, #56	; 0x38
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000800 	.word	0x48000800
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800

08002b6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x38>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10b      	bne.n	8002b96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40021000 	.word	0x40021000

08002bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_TIM_MspPostInit+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d13a      	bne.n	8002c44 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	6153      	str	r3, [r2, #20]
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6153      	str	r3, [r2, #20]
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002c0e:	2309      	movs	r3, #9
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1c:	f002 f92a 	bl	8004e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4816      	ldr	r0, [pc, #88]	; (8002c98 <HAL_TIM_MspPostInit+0xec>)
 8002c3e:	f002 f919 	bl	8004e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002c42:	e021      	b.n	8002c88 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM17)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11c      	bne.n	8002c88 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6153      	str	r3, [r2, #20]
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_TIM_MspPostInit+0xe8>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HAL_TIM_MspPostInit+0xec>)
 8002c84:	f002 f8f6 	bl	8004e74 <HAL_GPIO_Init>
}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000400 	.word	0x48000400
 8002c9c:	40014800 	.word	0x40014800

08002ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_UART_MspInit+0xb8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d145      	bne.n	8002d4e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ce4:	6153      	str	r3, [r2, #20]
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	6153      	str	r3, [r2, #20]
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_UART_MspInit+0xbc>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480e      	ldr	r0, [pc, #56]	; (8002d60 <HAL_UART_MspInit+0xc0>)
 8002d26:	f002 f8a5 	bl	8004e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4a:	f002 f893 	bl	8004e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	48000800 	.word	0x48000800

08002d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <NMI_Handler+0x4>

08002d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <HardFault_Handler+0x4>

08002d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <MemManage_Handler+0x4>

08002d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <BusFault_Handler+0x4>

08002d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <UsageFault_Handler+0x4>

08002d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db0:	f000 f88e 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002dbe:	f001 fb68 	bl	8004492 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200001ac 	.word	0x200001ac

08002dcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SystemInit+0x20>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <SystemInit+0x20>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002df6:	490e      	ldr	r1, [pc, #56]	; (8002e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <LoopForever+0xe>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	; (8002e3c <LoopForever+0x16>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e1a:	f7ff ffd7 	bl	8002dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e1e:	f005 f909 	bl	8008034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e22:	f7fe fd21 	bl	8001868 <main>

08002e26 <LoopForever>:

LoopForever:
    b LoopForever
 8002e26:	e7fe      	b.n	8002e26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002e34:	080080e8 	.word	0x080080e8
  ldr r2, =_sbss
 8002e38:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002e3c:	20000430 	.word	0x20000430

08002e40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC1_IRQHandler>
	...

08002e44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_Init+0x28>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_Init+0x28>)
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f001 fe15 	bl	8004a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f808 	bl	8002e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e60:	f7ff fc70 	bl	8002744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40022000 	.word	0x40022000

08002e70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_InitTick+0x54>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 fe2d 	bl	8004aee <HAL_SYSTICK_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00e      	b.n	8002ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d80a      	bhi.n	8002eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f001 fdf5 	bl	8004a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_InitTick+0x5c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000018 	.word	0x20000018
 8002ec8:	20000020 	.word	0x20000020
 8002ecc:	2000001c 	.word	0x2000001c

08002ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x24>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_IncTick+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000020 	.word	0x20000020
 8002ef4:	2000042c 	.word	0x2000042c

08002ef8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0



	return uwTick;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_GetTick+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	2000042c 	.word	0x2000042c

08002f10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff ffee 	bl	8002ef8 <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d005      	beq.n	8002f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_Delay+0x40>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f36:	bf00      	nop
 8002f38:	f7ff ffde 	bl	8002ef8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d8f7      	bhi.n	8002f38 <HAL_Delay+0x28>
  {
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000020 	.word	0x20000020

08002f54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b09a      	sub	sp, #104	; 0x68
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e169      	b.n	8003284 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d176      	bne.n	80030b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d152      	bne.n	8003070 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fbd1 	bl	800278c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d13b      	bne.n	8003070 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fdcf 	bl	8003b9c <ADC_Disable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d12f      	bne.n	8003070 <HAL_ADC_Init+0xe0>
 8003010:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003014:	2b00      	cmp	r3, #0
 8003016:	d12b      	bne.n	8003070 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800303a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800304a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800304c:	4b8f      	ldr	r3, [pc, #572]	; (800328c <HAL_ADC_Init+0x2fc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a8f      	ldr	r2, [pc, #572]	; (8003290 <HAL_ADC_Init+0x300>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9a      	lsrs	r2, r3, #18
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003062:	e002      	b.n	800306a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3b01      	subs	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308c:	d110      	bne.n	80030b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f023 0312 	bic.w	r3, r3, #18
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 80d6 	bne.w	800326a <HAL_ADC_Init+0x2da>
 80030be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 80d1 	bne.w	800326a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80c9 	bne.w	800326a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030e0:	f043 0202 	orr.w	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_ADC_Init+0x304>)
 80030ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_Init+0x180>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_Init+0x180>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0x182>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11c      	bne.n	8003150 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003116:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_ADC_Init+0x1a8>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_ADC_Init+0x1a8>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_ADC_Init+0x1aa>
 8003138:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	431a      	orrs	r2, r3
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7e5b      	ldrb	r3, [r3, #25]
 8003154:	035b      	lsls	r3, r3, #13
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800315a:	2a01      	cmp	r2, #1
 800315c:	d002      	beq.n	8003164 <HAL_ADC_Init+0x1d4>
 800315e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003162:	e000      	b.n	8003166 <HAL_ADC_Init+0x1d6>
 8003164:	2200      	movs	r2, #0
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003176:	4313      	orrs	r3, r2
 8003178:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d11b      	bne.n	80031bc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7e5b      	ldrb	r3, [r3, #25]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	3b01      	subs	r3, #1
 8003192:	045a      	lsls	r2, r3, #17
 8003194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003196:	4313      	orrs	r3, r2
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	663b      	str	r3, [r7, #96]	; 0x60
 800319e:	e00d      	b.n	80031bc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4313      	orrs	r3, r2
 80031ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031d0:	4313      	orrs	r3, r2
 80031d2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d114      	bne.n	800320c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7e1b      	ldrb	r3, [r3, #24]
 80031fa:	039a      	lsls	r2, r3, #14
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4313      	orrs	r3, r2
 8003206:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003208:	4313      	orrs	r3, r2
 800320a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_ADC_Init+0x308>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f023 010f 	bic.w	r1, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
 8003240:	e007      	b.n	8003252 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020f 	bic.w	r2, r2, #15
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f023 0303 	bic.w	r3, r3, #3
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
 8003268:	e00a      	b.n	8003280 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f023 0312 	bic.w	r3, r3, #18
 8003272:	f043 0210 	orr.w	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003284:	4618      	mov	r0, r3
 8003286:	3768      	adds	r7, #104	; 0x68
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000018 	.word	0x20000018
 8003290:	431bde83 	.word	0x431bde83
 8003294:	50000300 	.word	0x50000300
 8003298:	fff0c007 	.word	0xfff0c007

0800329c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d17e      	bne.n	80033b8 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_Start_DMA+0x2c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e07a      	b.n	80033be <HAL_ADC_Start_DMA+0x122>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fc05 	bl	8003ae0 <ADC_Enable>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d166      	bne.n	80033ae <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003316:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d106      	bne.n	800333a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f023 0206 	bic.w	r2, r3, #6
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
 8003338:	e002      	b.n	8003340 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_ADC_Start_DMA+0x12c>)
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_ADC_Start_DMA+0x130>)
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_ADC_Start_DMA+0x134>)
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	221c      	movs	r2, #28
 8003366:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0210 	orr.w	r2, r2, #16
 8003376:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3340      	adds	r3, #64	; 0x40
 8003392:	4619      	mov	r1, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f001 fcbf 	bl	8004d1a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0204 	orr.w	r2, r2, #4
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	e006      	b.n	80033bc <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033b6:	e001      	b.n	80033bc <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
 80033ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	08003a15 	.word	0x08003a15
 80033cc:	08003a8f 	.word	0x08003a8f
 80033d0:	08003aab 	.word	0x08003aab

080033d4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e057      	b.n	80034a0 <HAL_ADCEx_Calibration_Start+0xcc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fbcf 	bl	8003b9c <ADC_Disable>
 80033fe:	4603      	mov	r3, r0
 8003400:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d146      	bne.n	8003496 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800341c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d107      	bne.n	8003434 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003432:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003442:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003444:	f7ff fd58 	bl	8002ef8 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800344a:	e014      	b.n	8003476 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800344c:	f7ff fd54 	bl	8002ef8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d90d      	bls.n	8003476 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f023 0312 	bic.w	r3, r3, #18
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e014      	b.n	80034a0 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003484:	d0e2      	beq.n	800344c <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b09b      	sub	sp, #108	; 0x6c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x22>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e299      	b.n	80039fe <HAL_ADC_ConfigChannel+0x556>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 827d 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d81c      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	461a      	mov	r2, r3
 80034fe:	231f      	movs	r3, #31
 8003500:	4093      	lsls	r3, r2
 8003502:	43db      	mvns	r3, r3
 8003504:	4019      	ands	r1, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa00 f203 	lsl.w	r2, r0, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
 8003522:	e063      	b.n	80035ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d81e      	bhi.n	800356a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	3b1e      	subs	r3, #30
 8003540:	221f      	movs	r2, #31
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	4019      	ands	r1, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	3b1e      	subs	r3, #30
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	635a      	str	r2, [r3, #52]	; 0x34
 8003568:	e040      	b.n	80035ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b0e      	cmp	r3, #14
 8003570:	d81e      	bhi.n	80035b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	3b3c      	subs	r3, #60	; 0x3c
 8003586:	221f      	movs	r2, #31
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	4019      	ands	r1, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	3b3c      	subs	r3, #60	; 0x3c
 80035a2:	fa00 f203 	lsl.w	r2, r0, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
 80035ae:	e01d      	b.n	80035ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	3b5a      	subs	r3, #90	; 0x5a
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4019      	ands	r1, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	3b5a      	subs	r3, #90	; 0x5a
 80035e0:	fa00 f203 	lsl.w	r2, r0, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 80e5 	bne.w	80037c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d91c      	bls.n	800363e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6999      	ldr	r1, [r3, #24]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	3b1e      	subs	r3, #30
 8003616:	2207      	movs	r2, #7
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	4019      	ands	r1, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6898      	ldr	r0, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	3b1e      	subs	r3, #30
 8003630:	fa00 f203 	lsl.w	r2, r0, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	e019      	b.n	8003672 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	2207      	movs	r2, #7
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	4019      	ands	r1, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6898      	ldr	r0, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	08db      	lsrs	r3, r3, #3
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	3b01      	subs	r3, #1
 8003690:	2b03      	cmp	r3, #3
 8003692:	d84f      	bhi.n	8003734 <HAL_ADC_ConfigChannel+0x28c>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_ADC_ConfigChannel+0x1f4>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036cf 	.word	0x080036cf
 80036a4:	080036f1 	.word	0x080036f1
 80036a8:	08003713 	.word	0x08003713
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036b2:	4b99      	ldr	r3, [pc, #612]	; (8003918 <HAL_ADC_ConfigChannel+0x470>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	0691      	lsls	r1, r2, #26
 80036bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036be:	430a      	orrs	r2, r1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036cc:	e07e      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036d4:	4b90      	ldr	r3, [pc, #576]	; (8003918 <HAL_ADC_ConfigChannel+0x470>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	0691      	lsls	r1, r2, #26
 80036de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036e0:	430a      	orrs	r2, r1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036ee:	e06d      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_ADC_ConfigChannel+0x470>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	0691      	lsls	r1, r2, #26
 8003700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003702:	430a      	orrs	r2, r1
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800370e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003710:	e05c      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003718:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_ADC_ConfigChannel+0x470>)
 800371a:	4013      	ands	r3, r2
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	0691      	lsls	r1, r2, #26
 8003722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003724:	430a      	orrs	r2, r1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003730:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003732:	e04b      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	069b      	lsls	r3, r3, #26
 8003744:	429a      	cmp	r2, r3
 8003746:	d107      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003756:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	069b      	lsls	r3, r3, #26
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800377a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	069b      	lsls	r3, r3, #26
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800379e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d10a      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80037c4:	e001      	b.n	80037ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80037ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x344>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x344>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_ADC_ConfigChannel+0x346>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80ff 	bne.w	80039f2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d00f      	beq.n	800381c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	400a      	ands	r2, r1
 8003816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800381a:	e049      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b09      	cmp	r3, #9
 800383c:	d91c      	bls.n	8003878 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6999      	ldr	r1, [r3, #24]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	3b1b      	subs	r3, #27
 8003850:	2207      	movs	r2, #7
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	4019      	ands	r1, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6898      	ldr	r0, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	3b1b      	subs	r3, #27
 800386a:	fa00 f203 	lsl.w	r2, r0, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	619a      	str	r2, [r3, #24]
 8003876:	e01b      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	2207      	movs	r2, #7
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	4019      	ands	r1, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6898      	ldr	r0, [r3, #8]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	fa00 f203 	lsl.w	r2, r0, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_ADC_ConfigChannel+0x474>)
 80038b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d105      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d014      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038cc:	2b11      	cmp	r3, #17
 80038ce:	d105      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038e0:	2b12      	cmp	r3, #18
 80038e2:	f040 8086 	bne.w	80039f2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d17f      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10d      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x478>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d106      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x478>
 8003912:	2301      	movs	r3, #1
 8003914:	e005      	b.n	8003922 <HAL_ADC_ConfigChannel+0x47a>
 8003916:	bf00      	nop
 8003918:	83fff000 	.word	0x83fff000
 800391c:	50000300 	.word	0x50000300
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d150      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003926:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x4a0>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x4a0>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_ADC_ConfigChannel+0x4a2>
 8003948:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13c      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b10      	cmp	r3, #16
 8003954:	d11d      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x4ea>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800395e:	d118      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_ADC_ConfigChannel+0x564>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_ConfigChannel+0x568>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0c9a      	lsrs	r2, r3, #18
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003982:	e002      	b.n	800398a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	3b01      	subs	r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f9      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003990:	e02e      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b11      	cmp	r3, #17
 8003998:	d10b      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x50a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a2:	d106      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80039a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039b0:	e01e      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b12      	cmp	r3, #18
 80039b8:	d11a      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80039ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039c6:	e013      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039da:	e00a      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	376c      	adds	r7, #108	; 0x6c
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000018 	.word	0x20000018
 8003a10:	431bde83 	.word	0x431bde83

08003a14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d126      	bne.n	8003a7c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d115      	bne.n	8003a74 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d111      	bne.n	8003a74 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fa6d 	bl	8002f54 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a7a:	e004      	b.n	8003a86 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff fa63 	bl	8002f68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff fa53 	bl	8002f7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d108      	bne.n	8003b0c <ADC_Enable+0x2c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <ADC_Enable+0x2c>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <ADC_Enable+0x2e>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13c      	bne.n	8003b8c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <ADC_Enable+0xb8>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e028      	b.n	8003b8e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003b4c:	f7ff f9d4 	bl	8002ef8 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b52:	e014      	b.n	8003b7e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b54:	f7ff f9d0 	bl	8002ef8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d90d      	bls.n	8003b7e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0210 	orr.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e007      	b.n	8003b8e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d1e3      	bne.n	8003b54 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	8000003f 	.word	0x8000003f

08003b9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <ADC_Disable+0x2c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <ADC_Disable+0x2c>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <ADC_Disable+0x2e>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d040      	beq.n	8003c50 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030d 	and.w	r3, r3, #13
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10f      	bne.n	8003bfc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0202 	orr.w	r2, r2, #2
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003bf4:	f7ff f980 	bl	8002ef8 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bfa:	e022      	b.n	8003c42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0210 	orr.w	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e01c      	b.n	8003c52 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c18:	f7ff f96e 	bl	8002ef8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d90d      	bls.n	8003c42 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e007      	b.n	8003c52 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d0e3      	beq.n	8003c18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0ed      	b.n	8003e48 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fe fdf1 	bl	8002860 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0202 	bic.w	r2, r2, #2
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c8e:	f7ff f933 	bl	8002ef8 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c94:	e012      	b.n	8003cbc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c96:	f7ff f92f 	bl	8002ef8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b0a      	cmp	r3, #10
 8003ca2:	d90b      	bls.n	8003cbc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0c5      	b.n	8003e48 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cda:	f7ff f90d 	bl	8002ef8 <HAL_GetTick>
 8003cde:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ce0:	e012      	b.n	8003d08 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ce2:	f7ff f909 	bl	8002ef8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b0a      	cmp	r3, #10
 8003cee:	d90b      	bls.n	8003d08 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e09f      	b.n	8003e48 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0e5      	beq.n	8003ce2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7e1b      	ldrb	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d108      	bne.n	8003d30 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7e5b      	ldrb	r3, [r3, #25]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d108      	bne.n	8003d5a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7e9b      	ldrb	r3, [r3, #26]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0220 	orr.w	r2, r2, #32
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0220 	bic.w	r2, r2, #32
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7edb      	ldrb	r3, [r3, #27]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d108      	bne.n	8003dae <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0210 	bic.w	r2, r2, #16
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e007      	b.n	8003dbe <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0210 	orr.w	r2, r2, #16
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7f1b      	ldrb	r3, [r3, #28]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d108      	bne.n	8003dd8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0208 	orr.w	r2, r2, #8
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e007      	b.n	8003de8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0208 	bic.w	r2, r2, #8
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7f5b      	ldrb	r3, [r3, #29]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d108      	bne.n	8003e02 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0204 	orr.w	r2, r2, #4
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e007      	b.n	8003e12 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0204 	bic.w	r2, r2, #4
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_ConfigFilter+0x26>
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	f040 80aa 	bne.w	8003fca <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2201      	movs	r2, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d123      	bne.n	8003ef8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ed2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3248      	adds	r2, #72	; 0x48
 8003ed8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	3348      	adds	r3, #72	; 0x48
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d122      	bne.n	8003f46 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	3248      	adds	r2, #72	; 0x48
 8003f26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f3c:	6979      	ldr	r1, [r7, #20]
 8003f3e:	3348      	adds	r3, #72	; 0x48
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	401a      	ands	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f60:	e007      	b.n	8003f72 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	401a      	ands	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f8c:	e007      	b.n	8003f9e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fbc:	f023 0201 	bic.w	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e006      	b.n	8003fd8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d12e      	bne.n	8004056 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004010:	f7fe ff72 	bl	8002ef8 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004016:	e012      	b.n	800403e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004018:	f7fe ff6e 	bl	8002ef8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b0a      	cmp	r3, #10
 8004024:	d90b      	bls.n	800403e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2205      	movs	r2, #5
 8004036:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e012      	b.n	8004064 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e006      	b.n	8004064 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004080:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d003      	beq.n	8004098 <HAL_CAN_AddTxMessage+0x2c>
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	2b02      	cmp	r3, #2
 8004094:	f040 80b8 	bne.w	8004208 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80a0 	beq.w	80041f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	0e1b      	lsrs	r3, r3, #24
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d907      	bls.n	80040d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e09e      	b.n	8004216 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040d8:	2201      	movs	r2, #1
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	409a      	lsls	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	6809      	ldr	r1, [r1, #0]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3318      	adds	r3, #24
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	440b      	add	r3, r1
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e00f      	b.n	8004126 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004110:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800411a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3318      	adds	r3, #24
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	440b      	add	r3, r1
 8004124:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3318      	adds	r3, #24
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	440b      	add	r3, r1
 8004136:	3304      	adds	r3, #4
 8004138:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	7d1b      	ldrb	r3, [r3, #20]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d111      	bne.n	8004166 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3318      	adds	r3, #24
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3318      	adds	r3, #24
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	440b      	add	r3, r1
 8004162:	3304      	adds	r3, #4
 8004164:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3307      	adds	r3, #7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	061a      	lsls	r2, r3, #24
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3306      	adds	r3, #6
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3305      	adds	r3, #5
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	4313      	orrs	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	3204      	adds	r2, #4
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	4610      	mov	r0, r2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6811      	ldr	r1, [r2, #0]
 800418e:	ea43 0200 	orr.w	r2, r3, r0
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	440b      	add	r3, r1
 8004198:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800419c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3303      	adds	r3, #3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	061a      	lsls	r2, r3, #24
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3302      	adds	r3, #2
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3301      	adds	r3, #1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	4313      	orrs	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	4610      	mov	r0, r2
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6811      	ldr	r1, [r2, #0]
 80041c4:	ea43 0200 	orr.w	r2, r3, r0
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80041d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3318      	adds	r3, #24
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	f043 0201 	orr.w	r2, r3, #1
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3318      	adds	r3, #24
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	440b      	add	r3, r1
 80041f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e00e      	b.n	8004216 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e006      	b.n	8004216 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004236:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d003      	beq.n	8004246 <HAL_CAN_GetRxMessage+0x24>
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b02      	cmp	r3, #2
 8004242:	f040 80f3 	bne.w	800442c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10e      	bne.n	800426a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0e7      	b.n	800443a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0d8      	b.n	800443a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	331b      	adds	r3, #27
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4413      	add	r3, r2
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0204 	and.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	331b      	adds	r3, #27
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0d5b      	lsrs	r3, r3, #21
 80042b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	331b      	adds	r3, #27
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	331b      	adds	r3, #27
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0202 	and.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	331b      	adds	r3, #27
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	331b      	adds	r3, #27
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	331b      	adds	r3, #27
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	4413      	add	r3, r2
 8004340:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0a1a      	lsrs	r2, r3, #8
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0c1a      	lsrs	r2, r3, #16
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	3302      	adds	r3, #2
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e1a      	lsrs	r2, r3, #24
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	3303      	adds	r3, #3
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0a1a      	lsrs	r2, r3, #8
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	3305      	adds	r3, #5
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	0c1a      	lsrs	r2, r3, #16
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	3306      	adds	r3, #6
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	0e1a      	lsrs	r2, r3, #24
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	3307      	adds	r3, #7
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e007      	b.n	8004428 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0220 	orr.w	r2, r2, #32
 8004426:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e006      	b.n	800443a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004456:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d002      	beq.n	8004464 <HAL_CAN_ActivateNotification+0x1e>
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d109      	bne.n	8004478 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6959      	ldr	r1, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e006      	b.n	8004486 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d07c      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d023      	beq.n	800452a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f97d 	bl	80047f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80044fa:	e016      	b.n	800452a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	e00c      	b.n	800452a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	e002      	b.n	800452a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f983 	bl	8004830 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d024      	beq.n	800457e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f95d 	bl	8004808 <HAL_CAN_TxMailbox1CompleteCallback>
 800454e:	e016      	b.n	800457e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
 8004562:	e00c      	b.n	800457e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	e002      	b.n	800457e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f963 	bl	8004844 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d024      	beq.n	80045d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f93d 	bl	800481c <HAL_CAN_TxMailbox2CompleteCallback>
 80045a2:	e016      	b.n	80045d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	e00c      	b.n	80045d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ca:	e002      	b.n	80045d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f943 	bl	8004858 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2208      	movs	r2, #8
 8004610:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f92a 	bl	800486c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fd3d 	bl	80010b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004650:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2210      	movs	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2208      	movs	r2, #8
 8004674:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f90c 	bl	8004894 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8f3 	bl	8004880 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8f6 	bl	80048a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8ef 	bl	80048bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d075      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d06c      	beq.n	80047cc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d03d      	beq.n	80047cc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d038      	beq.n	80047cc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d017      	beq.n	8004794 <HAL_CAN_IRQHandler+0x302>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d804      	bhi.n	8004772 <HAL_CAN_IRQHandler+0x2e0>
 8004768:	2b10      	cmp	r3, #16
 800476a:	d009      	beq.n	8004780 <HAL_CAN_IRQHandler+0x2ee>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d00c      	beq.n	800478a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004770:	e024      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004772:	2b50      	cmp	r3, #80	; 0x50
 8004774:	d018      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x316>
 8004776:	2b60      	cmp	r3, #96	; 0x60
 8004778:	d01b      	beq.n	80047b2 <HAL_CAN_IRQHandler+0x320>
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d00f      	beq.n	800479e <HAL_CAN_IRQHandler+0x30c>
            break;
 800477e:	e01d      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f043 0308 	orr.w	r3, r3, #8
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004788:	e018      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f043 0310 	orr.w	r3, r3, #16
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004792:	e013      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f043 0320 	orr.w	r3, r3, #32
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800479c:	e00e      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047a6:	e009      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047b0:	e004      	b.n	80047bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2204      	movs	r2, #4
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f872 	bl	80048d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047ec:	bf00      	nop
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800490c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	60d3      	str	r3, [r2, #12]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <__NVIC_GetPriorityGrouping+0x18>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f003 0307 	and.w	r3, r3, #7
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db0b      	blt.n	8004972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4907      	ldr	r1, [pc, #28]	; (8004980 <__NVIC_EnableIRQ+0x38>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2001      	movs	r0, #1
 800496a:	fa00 f202 	lsl.w	r2, r0, r2
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e100 	.word	0xe000e100

08004984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db0a      	blt.n	80049ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <__NVIC_SetPriority+0x4c>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	0112      	lsls	r2, r2, #4
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ac:	e00a      	b.n	80049c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4908      	ldr	r1, [pc, #32]	; (80049d4 <__NVIC_SetPriority+0x50>)
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	3b04      	subs	r3, #4
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	440b      	add	r3, r1
 80049c2:	761a      	strb	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000e100 	.word	0xe000e100
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	; 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f1c3 0307 	rsb	r3, r3, #7
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	bf28      	it	cs
 80049f6:	2304      	movcs	r3, #4
 80049f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d902      	bls.n	8004a08 <NVIC_EncodePriority+0x30>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3b03      	subs	r3, #3
 8004a06:	e000      	b.n	8004a0a <NVIC_EncodePriority+0x32>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a20:	f04f 31ff 	mov.w	r1, #4294967295
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	43d9      	mvns	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a30:	4313      	orrs	r3, r2
         );
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3724      	adds	r7, #36	; 0x24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a50:	d301      	bcc.n	8004a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a52:	2301      	movs	r3, #1
 8004a54:	e00f      	b.n	8004a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <SysTick_Config+0x40>)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a5e:	210f      	movs	r1, #15
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	f7ff ff8e 	bl	8004984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <SysTick_Config+0x40>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <SysTick_Config+0x40>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010

08004a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff29 	bl	80048e4 <__NVIC_SetPriorityGrouping>
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aac:	f7ff ff3e 	bl	800492c <__NVIC_GetPriorityGrouping>
 8004ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f7ff ff8e 	bl	80049d8 <NVIC_EncodePriority>
 8004abc:	4602      	mov	r2, r0
 8004abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff5d 	bl	8004984 <__NVIC_SetPriority>
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	4603      	mov	r3, r0
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff ff31 	bl	8004948 <__NVIC_EnableIRQ>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ffa2 	bl	8004a40 <SysTick_Config>
 8004afc:	4603      	mov	r3, r0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d106      	bne.n	8004b24 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004b22:	e005      	b.n	8004b30 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004b2a:	f023 0304 	bic.w	r3, r3, #4
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e014      	b.n	8004b7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	791b      	ldrb	r3, [r3, #4]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fec8 	bl	80028f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	795b      	ldrb	r3, [r3, #5]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_DAC_Start+0x16>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e025      	b.n	8004be6 <HAL_DAC_Start+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	2201      	movs	r2, #1
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004bc4:	2b3c      	cmp	r3, #60	; 0x3c
 8004bc6:	d107      	bne.n	8004bd8 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	795b      	ldrb	r3, [r3, #5]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_DAC_ConfigChannel+0x20>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e036      	b.n	8004c80 <HAL_DAC_ConfigChannel+0x8e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004c26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4013      	ands	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	22c0      	movs	r2, #192	; 0xc0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	400a      	ands	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e037      	b.n	8004d12 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004cbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f89d 	bl	8004e34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}  
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_DMA_Start_IT+0x20>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e04a      	b.n	8004dd0 <HAL_DMA_Start_IT+0xb6>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d13a      	bne.n	8004dc2 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f831 	bl	8004dd8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 020e 	orr.w	r2, r2, #14
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e00f      	b.n	8004db0 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 020a 	orr.w	r2, r2, #10
 8004d9e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e005      	b.n	8004dce <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d108      	bne.n	8004e18 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e16:	e007      	b.n	8004e28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <DMA_CalcBaseAndBitshift+0x34>)
 8004e44:	4413      	add	r3, r2
 8004e46:	4a09      	ldr	r2, [pc, #36]	; (8004e6c <DMA_CalcBaseAndBitshift+0x38>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	009a      	lsls	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <DMA_CalcBaseAndBitshift+0x3c>)
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	bffdfff8 	.word	0xbffdfff8
 8004e6c:	cccccccd 	.word	0xcccccccd
 8004e70:	40020000 	.word	0x40020000

08004e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e82:	e14e      	b.n	8005122 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8140 	beq.w	800511c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d00b      	beq.n	8004ebc <HAL_GPIO_Init+0x48>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d007      	beq.n	8004ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eb0:	2b11      	cmp	r3, #17
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b12      	cmp	r3, #18
 8004eba:	d130      	bne.n	8004f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0201 	and.w	r2, r3, #1
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	2203      	movs	r2, #3
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4013      	ands	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0xea>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b12      	cmp	r3, #18
 8004f5c:	d123      	bne.n	8004fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	08da      	lsrs	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3208      	adds	r2, #8
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	220f      	movs	r2, #15
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	08da      	lsrs	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3208      	adds	r2, #8
 8004fa0:	6939      	ldr	r1, [r7, #16]
 8004fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0203 	and.w	r2, r3, #3
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 809a 	beq.w	800511c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe8:	4b55      	ldr	r3, [pc, #340]	; (8005140 <HAL_GPIO_Init+0x2cc>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	4a54      	ldr	r2, [pc, #336]	; (8005140 <HAL_GPIO_Init+0x2cc>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6193      	str	r3, [r2, #24]
 8004ff4:	4b52      	ldr	r3, [pc, #328]	; (8005140 <HAL_GPIO_Init+0x2cc>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005000:	4a50      	ldr	r2, [pc, #320]	; (8005144 <HAL_GPIO_Init+0x2d0>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	220f      	movs	r2, #15
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800502a:	d013      	beq.n	8005054 <HAL_GPIO_Init+0x1e0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a46      	ldr	r2, [pc, #280]	; (8005148 <HAL_GPIO_Init+0x2d4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00d      	beq.n	8005050 <HAL_GPIO_Init+0x1dc>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a45      	ldr	r2, [pc, #276]	; (800514c <HAL_GPIO_Init+0x2d8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <HAL_GPIO_Init+0x1d8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a44      	ldr	r2, [pc, #272]	; (8005150 <HAL_GPIO_Init+0x2dc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <HAL_GPIO_Init+0x1d4>
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <HAL_GPIO_Init+0x1e2>
 8005048:	2305      	movs	r3, #5
 800504a:	e004      	b.n	8005056 <HAL_GPIO_Init+0x1e2>
 800504c:	2302      	movs	r3, #2
 800504e:	e002      	b.n	8005056 <HAL_GPIO_Init+0x1e2>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <HAL_GPIO_Init+0x1e2>
 8005054:	2300      	movs	r3, #0
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	f002 0203 	and.w	r2, r2, #3
 800505c:	0092      	lsls	r2, r2, #2
 800505e:	4093      	lsls	r3, r2
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005066:	4937      	ldr	r1, [pc, #220]	; (8005144 <HAL_GPIO_Init+0x2d0>)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	3302      	adds	r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005074:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43db      	mvns	r3, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005098:	4a2e      	ldr	r2, [pc, #184]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800509e:	4b2d      	ldr	r3, [pc, #180]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005116:	4a0f      	ldr	r2, [pc, #60]	; (8005154 <HAL_GPIO_Init+0x2e0>)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	f47f aea9 	bne.w	8004e84 <HAL_GPIO_Init+0x10>
  }
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
 8005144:	40010000 	.word	0x40010000
 8005148:	48000400 	.word	0x48000400
 800514c:	48000800 	.word	0x48000800
 8005150:	48000c00 	.word	0x48000c00
 8005154:	40010400 	.word	0x40010400

08005158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	e001      	b.n	800517a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051a4:	e002      	b.n	80051ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e081      	b.n	80052ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd fbc8 	bl	8002974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	e006      	b.n	8005240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800523e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d104      	bne.n	8005252 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005274:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	ea42 0103 	orr.w	r1, r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69d9      	ldr	r1, [r3, #28]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d138      	bne.n	800535e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e032      	b.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2224      	movs	r2, #36	; 0x24
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005328:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
  }
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b20      	cmp	r3, #32
 8005380:	d139      	bne.n	80053f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800538c:	2302      	movs	r3, #2
 800538e:	e033      	b.n	80053f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e000      	b.n	80053f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
  }
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800540a:	af00      	add	r7, sp, #0
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f000 bef4 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 816a 	beq.w	8005702 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800542e:	4bb3      	ldr	r3, [pc, #716]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b04      	cmp	r3, #4
 8005438:	d00c      	beq.n	8005454 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800543a:	4bb0      	ldr	r3, [pc, #704]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b08      	cmp	r3, #8
 8005444:	d159      	bne.n	80054fa <HAL_RCC_OscConfig+0xf6>
 8005446:	4bad      	ldr	r3, [pc, #692]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d152      	bne.n	80054fa <HAL_RCC_OscConfig+0xf6>
 8005454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005458:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005468:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546c:	fab3 f383 	clz	r3, r3
 8005470:	b2db      	uxtb	r3, r3
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d102      	bne.n	8005486 <HAL_RCC_OscConfig+0x82>
 8005480:	4b9e      	ldr	r3, [pc, #632]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	e015      	b.n	80054b2 <HAL_RCC_OscConfig+0xae>
 8005486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800548a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800549a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800549e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80054a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80054ae:	4b93      	ldr	r3, [pc, #588]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054be:	fa92 f2a2 	rbit	r2, r2
 80054c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054ca:	fab2 f282 	clz	r2, r2
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f042 0220 	orr.w	r2, r2, #32
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f002 021f 	and.w	r2, r2, #31
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f202 	lsl.w	r2, r1, r2
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 810c 	beq.w	8005700 <HAL_RCC_OscConfig+0x2fc>
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 8106 	bne.w	8005700 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f000 be86 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005504:	d106      	bne.n	8005514 <HAL_RCC_OscConfig+0x110>
 8005506:	4b7d      	ldr	r3, [pc, #500]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7c      	ldr	r2, [pc, #496]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e030      	b.n	8005576 <HAL_RCC_OscConfig+0x172>
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0x134>
 800551e:	4b77      	ldr	r3, [pc, #476]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a76      	ldr	r2, [pc, #472]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b74      	ldr	r3, [pc, #464]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a73      	ldr	r2, [pc, #460]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01e      	b.n	8005576 <HAL_RCC_OscConfig+0x172>
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005542:	d10c      	bne.n	800555e <HAL_RCC_OscConfig+0x15a>
 8005544:	4b6d      	ldr	r3, [pc, #436]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6c      	ldr	r2, [pc, #432]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 800554a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b6a      	ldr	r3, [pc, #424]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a69      	ldr	r2, [pc, #420]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e00b      	b.n	8005576 <HAL_RCC_OscConfig+0x172>
 800555e:	4b67      	ldr	r3, [pc, #412]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a66      	ldr	r2, [pc, #408]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b64      	ldr	r3, [pc, #400]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a63      	ldr	r2, [pc, #396]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005574:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005576:	4b61      	ldr	r3, [pc, #388]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f023 020f 	bic.w	r2, r3, #15
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	495d      	ldr	r1, [pc, #372]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005586:	4313      	orrs	r3, r2
 8005588:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d059      	beq.n	8005648 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fd fcb0 	bl	8002ef8 <HAL_GetTick>
 8005598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800559e:	f7fd fcab 	bl	8002ef8 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d902      	bls.n	80055b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	f000 be29 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
 80055b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <HAL_RCC_OscConfig+0x1e2>
 80055e0:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	e015      	b.n	8005612 <HAL_RCC_OscConfig+0x20e>
 80055e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80055fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005602:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005606:	fa93 f3a3 	rbit	r3, r3
 800560a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005616:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800561a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800561e:	fa92 f2a2 	rbit	r2, r2
 8005622:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005626:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800562a:	fab2 f282 	clz	r2, r2
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	f042 0220 	orr.w	r2, r2, #32
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	f002 021f 	and.w	r2, r2, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f202 	lsl.w	r2, r1, r2
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0ab      	beq.n	800559e <HAL_RCC_OscConfig+0x19a>
 8005646:	e05c      	b.n	8005702 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fd fc56 	bl	8002ef8 <HAL_GetTick>
 800564c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005652:	f7fd fc51 	bl	8002ef8 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	; 0x64
 8005660:	d902      	bls.n	8005668 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	f000 bdcf 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
 8005668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800566c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005674:	fa93 f3a3 	rbit	r3, r3
 8005678:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800567c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_RCC_OscConfig+0x296>
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x2c2>
 800569a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056ba:	fa93 f3a3 	rbit	r3, r3
 80056be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056c2:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <HAL_RCC_OscConfig+0x2f8>)
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056d2:	fa92 f2a2 	rbit	r2, r2
 80056d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056de:	fab2 f282 	clz	r2, r2
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	f042 0220 	orr.w	r2, r2, #32
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f002 021f 	and.w	r2, r2, #31
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f202 	lsl.w	r2, r1, r2
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ab      	bne.n	8005652 <HAL_RCC_OscConfig+0x24e>
 80056fa:	e002      	b.n	8005702 <HAL_RCC_OscConfig+0x2fe>
 80056fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 816f 	beq.w	80059f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005712:	4bd0      	ldr	r3, [pc, #832]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 030c 	and.w	r3, r3, #12
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800571e:	4bcd      	ldr	r3, [pc, #820]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b08      	cmp	r3, #8
 8005728:	d16c      	bne.n	8005804 <HAL_RCC_OscConfig+0x400>
 800572a:	4bca      	ldr	r3, [pc, #808]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d166      	bne.n	8005804 <HAL_RCC_OscConfig+0x400>
 8005736:	2302      	movs	r3, #2
 8005738:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005748:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d102      	bne.n	8005766 <HAL_RCC_OscConfig+0x362>
 8005760:	4bbc      	ldr	r3, [pc, #752]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	e013      	b.n	800578e <HAL_RCC_OscConfig+0x38a>
 8005766:	2302      	movs	r3, #2
 8005768:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005778:	2302      	movs	r3, #2
 800577a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800577e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800578a:	4bb2      	ldr	r3, [pc, #712]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2202      	movs	r2, #2
 8005790:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005794:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005798:	fa92 f2a2 	rbit	r2, r2
 800579c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80057a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80057a4:	fab2 f282 	clz	r2, r2
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	f042 0220 	orr.w	r2, r2, #32
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	f002 021f 	and.w	r2, r2, #31
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_RCC_OscConfig+0x3cc>
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f000 bd1b 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4ba0      	ldr	r3, [pc, #640]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	21f8      	movs	r1, #248	; 0xf8
 80057e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057e8:	fa91 f1a1 	rbit	r1, r1
 80057ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80057f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057f4:	fab1 f181 	clz	r1, r1
 80057f8:	b2c9      	uxtb	r1, r1
 80057fa:	408b      	lsls	r3, r1
 80057fc:	4995      	ldr	r1, [pc, #596]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e0f5      	b.n	80059f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8085 	beq.w	800591a <HAL_RCC_OscConfig+0x516>
 8005810:	2301      	movs	r3, #1
 8005812:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800581a:	fa93 f3a3 	rbit	r3, r3
 800581e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005822:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	461a      	mov	r2, r3
 8005838:	2301      	movs	r3, #1
 800583a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fd fb5c 	bl	8002ef8 <HAL_GetTick>
 8005840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005844:	e00a      	b.n	800585c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005846:	f7fd fb57 	bl	8002ef8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d902      	bls.n	800585c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	f000 bcd5 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
 800585c:	2302      	movs	r3, #2
 800585e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005866:	fa93 f3a3 	rbit	r3, r3
 800586a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800586e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <HAL_RCC_OscConfig+0x488>
 8005886:	4b73      	ldr	r3, [pc, #460]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	e013      	b.n	80058b4 <HAL_RCC_OscConfig+0x4b0>
 800588c:	2302      	movs	r3, #2
 800588e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005892:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800589e:	2302      	movs	r3, #2
 80058a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058a8:	fa93 f3a3 	rbit	r3, r3
 80058ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058b0:	4b68      	ldr	r3, [pc, #416]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2202      	movs	r2, #2
 80058b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058be:	fa92 f2a2 	rbit	r2, r2
 80058c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058ca:	fab2 f282 	clz	r2, r2
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	f042 0220 	orr.w	r2, r2, #32
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	f002 021f 	and.w	r2, r2, #31
 80058da:	2101      	movs	r1, #1
 80058dc:	fa01 f202 	lsl.w	r2, r1, r2
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0af      	beq.n	8005846 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e6:	4b5b      	ldr	r3, [pc, #364]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	21f8      	movs	r1, #248	; 0xf8
 80058f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80058fe:	fa91 f1a1 	rbit	r1, r1
 8005902:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005906:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800590a:	fab1 f181 	clz	r1, r1
 800590e:	b2c9      	uxtb	r1, r1
 8005910:	408b      	lsls	r3, r1
 8005912:	4950      	ldr	r1, [pc, #320]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
 8005918:	e06a      	b.n	80059f0 <HAL_RCC_OscConfig+0x5ec>
 800591a:	2301      	movs	r3, #1
 800591c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005924:	fa93 f3a3 	rbit	r3, r3
 8005928:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800592c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800593a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	461a      	mov	r2, r3
 8005942:	2300      	movs	r3, #0
 8005944:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005946:	f7fd fad7 	bl	8002ef8 <HAL_GetTick>
 800594a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005950:	f7fd fad2 	bl	8002ef8 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d902      	bls.n	8005966 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	f000 bc50 	b.w	8006206 <HAL_RCC_OscConfig+0xe02>
 8005966:	2302      	movs	r3, #2
 8005968:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005970:	fa93 f3a3 	rbit	r3, r3
 8005974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <HAL_RCC_OscConfig+0x592>
 8005990:	4b30      	ldr	r3, [pc, #192]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	e013      	b.n	80059be <HAL_RCC_OscConfig+0x5ba>
 8005996:	2302      	movs	r3, #2
 8005998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059a8:	2302      	movs	r3, #2
 80059aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <HAL_RCC_OscConfig+0x650>)
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2202      	movs	r2, #2
 80059c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059c8:	fa92 f2a2 	rbit	r2, r2
 80059cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059d4:	fab2 f282 	clz	r2, r2
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	f042 0220 	orr.w	r2, r2, #32
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	f002 021f 	and.w	r2, r2, #31
 80059e4:	2101      	movs	r1, #1
 80059e6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1af      	bne.n	8005950 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80da 	beq.w	8005bb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d069      	beq.n	8005ade <HAL_RCC_OscConfig+0x6da>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a14:	fa93 f3a3 	rbit	r3, r3
 8005a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_OscConfig+0x654>)
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2301      	movs	r3, #1
 8005a32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a34:	f7fd fa60 	bl	8002ef8 <HAL_GetTick>
 8005a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3c:	e00e      	b.n	8005a5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fd fa5b 	bl	8002ef8 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d906      	bls.n	8005a5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e3d9      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	10908120 	.word	0x10908120
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	fa93 f2a3 	rbit	r2, r3
 8005a98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9e:	4ba5      	ldr	r3, [pc, #660]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	fa93 f1a3 	rbit	r1, r3
 8005ab4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ab8:	6019      	str	r1, [r3, #0]
  return result;
 8005aba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0b0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x63a>
 8005adc:	e06a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7b0>
 8005ade:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	fa93 f2a3 	rbit	r2, r3
 8005af0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005af4:	601a      	str	r2, [r3, #0]
  return result;
 8005af6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005afa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afc:	fab3 f383 	clz	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	4b8c      	ldr	r3, [pc, #560]	; (8005d38 <HAL_RCC_OscConfig+0x934>)
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b10:	f7fd f9f2 	bl	8002ef8 <HAL_GetTick>
 8005b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b18:	e009      	b.n	8005b2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b1a:	f7fd f9ed 	bl	8002ef8 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e36b      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8005b2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b32:	2202      	movs	r2, #2
 8005b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	fa93 f2a3 	rbit	r2, r3
 8005b40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	fa93 f2a3 	rbit	r2, r3
 8005b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b62:	2202      	movs	r2, #2
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fa93 f2a3 	rbit	r2, r3
 8005b70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b7e:	2102      	movs	r1, #2
 8005b80:	6019      	str	r1, [r3, #0]
 8005b82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	fa93 f1a3 	rbit	r1, r3
 8005b8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b90:	6019      	str	r1, [r3, #0]
  return result;
 8005b92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	fab3 f383 	clz	r3, r3
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2101      	movs	r1, #1
 8005baa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1b2      	bne.n	8005b1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	1d3b      	adds	r3, r7, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8158 	beq.w	8005e74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bca:	4b5a      	ldr	r3, [pc, #360]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d112      	bne.n	8005bfc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd6:	4b57      	ldr	r3, [pc, #348]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	4a56      	ldr	r2, [pc, #344]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	61d3      	str	r3, [r2, #28]
 8005be2:	4b54      	ldr	r3, [pc, #336]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfc:	4b4f      	ldr	r3, [pc, #316]	; (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11a      	bne.n	8005c3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c08:	4b4c      	ldr	r3, [pc, #304]	; (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a4b      	ldr	r2, [pc, #300]	; (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c14:	f7fd f970 	bl	8002ef8 <HAL_GetTick>
 8005c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1c:	e009      	b.n	8005c32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1e:	f7fd f96b 	bl	8002ef8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e2e9      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c32:	4b42      	ldr	r3, [pc, #264]	; (8005d3c <HAL_RCC_OscConfig+0x938>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ef      	beq.n	8005c1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d106      	bne.n	8005c56 <HAL_RCC_OscConfig+0x852>
 8005c48:	4b3a      	ldr	r3, [pc, #232]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4a39      	ldr	r2, [pc, #228]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6213      	str	r3, [r2, #32]
 8005c54:	e02f      	b.n	8005cb6 <HAL_RCC_OscConfig+0x8b2>
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10c      	bne.n	8005c7a <HAL_RCC_OscConfig+0x876>
 8005c60:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c66:	f023 0301 	bic.w	r3, r3, #1
 8005c6a:	6213      	str	r3, [r2, #32]
 8005c6c:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c72:	f023 0304 	bic.w	r3, r3, #4
 8005c76:	6213      	str	r3, [r2, #32]
 8005c78:	e01d      	b.n	8005cb6 <HAL_RCC_OscConfig+0x8b2>
 8005c7a:	1d3b      	adds	r3, r7, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	d10c      	bne.n	8005c9e <HAL_RCC_OscConfig+0x89a>
 8005c84:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	6213      	str	r3, [r2, #32]
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6213      	str	r3, [r2, #32]
 8005c9c:	e00b      	b.n	8005cb6 <HAL_RCC_OscConfig+0x8b2>
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	6213      	str	r3, [r2, #32]
 8005caa:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d06b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc0:	f7fd f91a 	bl	8002ef8 <HAL_GetTick>
 8005cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	e00b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fd f915 	bl	8002ef8 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e291      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8005ce2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	fa93 f2a3 	rbit	r2, r3
 8005cf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005cfe:	2202      	movs	r2, #2
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fa93 f2a3 	rbit	r2, r3
 8005d0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d10:	601a      	str	r2, [r3, #0]
  return result;
 8005d12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f043 0302 	orr.w	r3, r3, #2
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d109      	bne.n	8005d40 <HAL_RCC_OscConfig+0x93c>
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <HAL_RCC_OscConfig+0x930>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	e014      	b.n	8005d5c <HAL_RCC_OscConfig+0x958>
 8005d32:	bf00      	nop
 8005d34:	40021000 	.word	0x40021000
 8005d38:	10908120 	.word	0x10908120
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d44:	2202      	movs	r2, #2
 8005d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	fa93 f2a3 	rbit	r2, r3
 8005d52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	4bbb      	ldr	r3, [pc, #748]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d60:	2102      	movs	r1, #2
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	fa92 f1a2 	rbit	r1, r2
 8005d6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d72:	6011      	str	r1, [r2, #0]
  return result;
 8005d74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	fab2 f282 	clz	r2, r2
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	f002 021f 	and.w	r2, r2, #31
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d099      	beq.n	8005cca <HAL_RCC_OscConfig+0x8c6>
 8005d96:	e063      	b.n	8005e60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d98:	f7fd f8ae 	bl	8002ef8 <HAL_GetTick>
 8005d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da0:	e00b      	b.n	8005dba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fd f8a9 	bl	8002ef8 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e225      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8005dba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	fa93 f2a3 	rbit	r2, r3
 8005dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	fa93 f2a3 	rbit	r2, r3
 8005de4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005de8:	601a      	str	r2, [r3, #0]
  return result;
 8005dea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df0:	fab3 f383 	clz	r3, r3
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f043 0302 	orr.w	r3, r3, #2
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d102      	bne.n	8005e0a <HAL_RCC_OscConfig+0xa06>
 8005e04:	4b90      	ldr	r3, [pc, #576]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	e00d      	b.n	8005e26 <HAL_RCC_OscConfig+0xa22>
 8005e0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e0e:	2202      	movs	r2, #2
 8005e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	fa93 f2a3 	rbit	r2, r3
 8005e1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	4b89      	ldr	r3, [pc, #548]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	fa92 f1a2 	rbit	r1, r2
 8005e38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e3c:	6011      	str	r1, [r2, #0]
  return result;
 8005e3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	fab2 f282 	clz	r2, r2
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	f002 021f 	and.w	r2, r2, #31
 8005e54:	2101      	movs	r1, #1
 8005e56:	fa01 f202 	lsl.w	r2, r1, r2
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1a0      	bne.n	8005da2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e68:	4b77      	ldr	r3, [pc, #476]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4a76      	ldr	r2, [pc, #472]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 81c2 	beq.w	8006204 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e80:	4b71      	ldr	r3, [pc, #452]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 030c 	and.w	r3, r3, #12
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	f000 819c 	beq.w	80061c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f040 8114 	bne.w	80060c2 <HAL_RCC_OscConfig+0xcbe>
 8005e9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	fa93 f2a3 	rbit	r2, r3
 8005eae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eb2:	601a      	str	r2, [r3, #0]
  return result;
 8005eb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eba:	fab3 f383 	clz	r3, r3
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed0:	f7fd f812 	bl	8002ef8 <HAL_GetTick>
 8005ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ed8:	e009      	b.n	8005eee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eda:	f7fd f80d 	bl	8002ef8 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e18b      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8005eee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	fa93 f2a3 	rbit	r2, r3
 8005f02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f06:	601a      	str	r2, [r3, #0]
  return result;
 8005f08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_RCC_OscConfig+0xb24>
 8005f22:	4b49      	ldr	r3, [pc, #292]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0xb5c>
 8005f28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	fa93 f2a3 	rbit	r2, r3
 8005f3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	fa93 f2a3 	rbit	r2, r3
 8005f56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	4b3a      	ldr	r3, [pc, #232]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f68:	6011      	str	r1, [r2, #0]
 8005f6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	fa92 f1a2 	rbit	r1, r2
 8005f74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f78:	6011      	str	r1, [r2, #0]
  return result;
 8005f7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	fab2 f282 	clz	r2, r2
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	f042 0220 	orr.w	r2, r2, #32
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	f002 021f 	and.w	r2, r2, #31
 8005f90:	2101      	movs	r1, #1
 8005f92:	fa01 f202 	lsl.w	r2, r1, r2
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d19e      	bne.n	8005eda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005faa:	1d3b      	adds	r3, r7, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	4925      	ldr	r1, [pc, #148]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	fa93 f2a3 	rbit	r2, r3
 8005fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fd0:	601a      	str	r2, [r3, #0]
  return result;
 8005fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fd6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd8:	fab3 f383 	clz	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fe2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2301      	movs	r3, #1
 8005fec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fee:	f7fc ff83 	bl	8002ef8 <HAL_GetTick>
 8005ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ff6:	e009      	b.n	800600c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fc ff7e 	bl	8002ef8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e0fc      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 800600c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	fa93 f2a3 	rbit	r2, r3
 8006020:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006024:	601a      	str	r2, [r3, #0]
  return result;
 8006026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800602a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800602c:	fab3 f383 	clz	r3, r3
 8006030:	b2db      	uxtb	r3, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <HAL_RCC_OscConfig+0xc48>
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <HAL_RCC_OscConfig+0xc44>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	e01e      	b.n	8006084 <HAL_RCC_OscConfig+0xc80>
 8006046:	bf00      	nop
 8006048:	40021000 	.word	0x40021000
 800604c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	fa93 f2a3 	rbit	r2, r3
 8006060:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800606a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	fa93 f2a3 	rbit	r2, r3
 800607a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	4b63      	ldr	r3, [pc, #396]	; (8006210 <HAL_RCC_OscConfig+0xe0c>)
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	fa92 f1a2 	rbit	r1, r2
 8006098:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800609c:	6011      	str	r1, [r2, #0]
  return result;
 800609e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	f042 0220 	orr.w	r2, r2, #32
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	f002 021f 	and.w	r2, r2, #31
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f202 	lsl.w	r2, r1, r2
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d09b      	beq.n	8005ff8 <HAL_RCC_OscConfig+0xbf4>
 80060c0:	e0a0      	b.n	8006204 <HAL_RCC_OscConfig+0xe00>
 80060c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	fa93 f2a3 	rbit	r2, r3
 80060d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060da:	601a      	str	r2, [r3, #0]
  return result;
 80060dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	fab3 f383 	clz	r3, r3
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	461a      	mov	r2, r3
 80060f4:	2300      	movs	r3, #0
 80060f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fc fefe 	bl	8002ef8 <HAL_GetTick>
 80060fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006100:	e009      	b.n	8006116 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006102:	f7fc fef9 	bl	8002ef8 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e077      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
 8006116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800611a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800611e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	fa93 f2a3 	rbit	r2, r3
 800612a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612e:	601a      	str	r2, [r3, #0]
  return result;
 8006130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006136:	fab3 f383 	clz	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d102      	bne.n	8006150 <HAL_RCC_OscConfig+0xd4c>
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_OscConfig+0xe0c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	e01b      	b.n	8006188 <HAL_RCC_OscConfig+0xd84>
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	f107 0320 	add.w	r3, r7, #32
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	fa93 f2a3 	rbit	r2, r3
 8006164:	f107 031c 	add.w	r3, r7, #28
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f107 0318 	add.w	r3, r7, #24
 800616e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f107 0318 	add.w	r3, r7, #24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	fa93 f2a3 	rbit	r2, r3
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	4b22      	ldr	r3, [pc, #136]	; (8006210 <HAL_RCC_OscConfig+0xe0c>)
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f107 0210 	add.w	r2, r7, #16
 800618c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	f107 0210 	add.w	r2, r7, #16
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	fa92 f1a2 	rbit	r1, r2
 800619c:	f107 020c 	add.w	r2, r7, #12
 80061a0:	6011      	str	r1, [r2, #0]
  return result;
 80061a2:	f107 020c 	add.w	r2, r7, #12
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	fab2 f282 	clz	r2, r2
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	f042 0220 	orr.w	r2, r2, #32
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	f002 021f 	and.w	r2, r2, #31
 80061b8:	2101      	movs	r1, #1
 80061ba:	fa01 f202 	lsl.w	r2, r1, r2
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d19e      	bne.n	8006102 <HAL_RCC_OscConfig+0xcfe>
 80061c4:	e01e      	b.n	8006204 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e018      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_RCC_OscConfig+0xe0c>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d108      	bne.n	8006200 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80061ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40021000 	.word	0x40021000

08006214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b09e      	sub	sp, #120	; 0x78
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e162      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800622c:	4b90      	ldr	r3, [pc, #576]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d910      	bls.n	800625c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623a:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 0207 	bic.w	r2, r3, #7
 8006242:	498b      	ldr	r1, [pc, #556]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b89      	ldr	r3, [pc, #548]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d001      	beq.n	800625c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e14a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006268:	4b82      	ldr	r3, [pc, #520]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	497f      	ldr	r1, [pc, #508]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80dc 	beq.w	8006440 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d13c      	bne.n	800630a <HAL_RCC_ClockConfig+0xf6>
 8006290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006294:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006298:	fa93 f3a3 	rbit	r3, r3
 800629c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a0:	fab3 f383 	clz	r3, r3
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d102      	bne.n	80062ba <HAL_RCC_ClockConfig+0xa6>
 80062b4:	4b6f      	ldr	r3, [pc, #444]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	e00f      	b.n	80062da <HAL_RCC_ClockConfig+0xc6>
 80062ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062c2:	fa93 f3a3 	rbit	r3, r3
 80062c6:	667b      	str	r3, [r7, #100]	; 0x64
 80062c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062cc:	663b      	str	r3, [r7, #96]	; 0x60
 80062ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d0:	fa93 f3a3 	rbit	r3, r3
 80062d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d6:	4b67      	ldr	r3, [pc, #412]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062de:	65ba      	str	r2, [r7, #88]	; 0x58
 80062e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062e2:	fa92 f2a2 	rbit	r2, r2
 80062e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80062e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062ea:	fab2 f282 	clz	r2, r2
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	f042 0220 	orr.w	r2, r2, #32
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	f002 021f 	and.w	r2, r2, #31
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d17b      	bne.n	80063fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e0f3      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d13c      	bne.n	800638c <HAL_RCC_ClockConfig+0x178>
 8006312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006316:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631a:	fa93 f3a3 	rbit	r3, r3
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006322:	fab3 f383 	clz	r3, r3
 8006326:	b2db      	uxtb	r3, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d102      	bne.n	800633c <HAL_RCC_ClockConfig+0x128>
 8006336:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	e00f      	b.n	800635c <HAL_RCC_ClockConfig+0x148>
 800633c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006340:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006344:	fa93 f3a3 	rbit	r3, r3
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
 800634a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800634e:	643b      	str	r3, [r7, #64]	; 0x40
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006358:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006360:	63ba      	str	r2, [r7, #56]	; 0x38
 8006362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006364:	fa92 f2a2 	rbit	r2, r2
 8006368:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800636a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800636c:	fab2 f282 	clz	r2, r2
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	f042 0220 	orr.w	r2, r2, #32
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	f002 021f 	and.w	r2, r2, #31
 800637c:	2101      	movs	r1, #1
 800637e:	fa01 f202 	lsl.w	r2, r1, r2
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d13a      	bne.n	80063fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0b2      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
 800638c:	2302      	movs	r3, #2
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	fa93 f3a3 	rbit	r3, r3
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639a:	fab3 f383 	clz	r3, r3
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d102      	bne.n	80063b4 <HAL_RCC_ClockConfig+0x1a0>
 80063ae:	4b31      	ldr	r3, [pc, #196]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	e00d      	b.n	80063d0 <HAL_RCC_ClockConfig+0x1bc>
 80063b4:	2302      	movs	r3, #2
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	fa93 f3a3 	rbit	r3, r3
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
 80063c0:	2302      	movs	r3, #2
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	fa93 f3a3 	rbit	r3, r3
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	4b29      	ldr	r3, [pc, #164]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2202      	movs	r2, #2
 80063d2:	61ba      	str	r2, [r7, #24]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	fa92 f2a2 	rbit	r2, r2
 80063da:	617a      	str	r2, [r7, #20]
  return result;
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	fab2 f282 	clz	r2, r2
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	f042 0220 	orr.w	r2, r2, #32
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	f002 021f 	and.w	r2, r2, #31
 80063ee:	2101      	movs	r1, #1
 80063f0:	fa01 f202 	lsl.w	r2, r1, r2
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e079      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f023 0203 	bic.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	491a      	ldr	r1, [pc, #104]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 800640c:	4313      	orrs	r3, r2
 800640e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006410:	f7fc fd72 	bl	8002ef8 <HAL_GetTick>
 8006414:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	e00a      	b.n	800642e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fc fd6e 	bl	8002ef8 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e061      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <HAL_RCC_ClockConfig+0x260>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 020c 	and.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	429a      	cmp	r2, r3
 800643e:	d1eb      	bne.n	8006418 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d214      	bcs.n	8006478 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 0207 	bic.w	r2, r3, #7
 8006456:	4906      	ldr	r1, [pc, #24]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <HAL_RCC_ClockConfig+0x25c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d005      	beq.n	8006478 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e040      	b.n	80064f2 <HAL_RCC_ClockConfig+0x2de>
 8006470:	40022000 	.word	0x40022000
 8006474:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <HAL_RCC_ClockConfig+0x2e8>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	491a      	ldr	r1, [pc, #104]	; (80064fc <HAL_RCC_ClockConfig+0x2e8>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <HAL_RCC_ClockConfig+0x2e8>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4912      	ldr	r1, [pc, #72]	; (80064fc <HAL_RCC_ClockConfig+0x2e8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80064b6:	f000 f829 	bl	800650c <HAL_RCC_GetSysClockFreq>
 80064ba:	4601      	mov	r1, r0
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <HAL_RCC_ClockConfig+0x2e8>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c4:	22f0      	movs	r2, #240	; 0xf0
 80064c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	fa92 f2a2 	rbit	r2, r2
 80064ce:	60fa      	str	r2, [r7, #12]
  return result;
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	fab2 f282 	clz	r2, r2
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	40d3      	lsrs	r3, r2
 80064da:	4a09      	ldr	r2, [pc, #36]	; (8006500 <HAL_RCC_ClockConfig+0x2ec>)
 80064dc:	5cd3      	ldrb	r3, [r2, r3]
 80064de:	fa21 f303 	lsr.w	r3, r1, r3
 80064e2:	4a08      	ldr	r2, [pc, #32]	; (8006504 <HAL_RCC_ClockConfig+0x2f0>)
 80064e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <HAL_RCC_ClockConfig+0x2f4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fc fcc0 	bl	8002e70 <HAL_InitTick>
  
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3778      	adds	r7, #120	; 0x78
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	080080a8 	.word	0x080080a8
 8006504:	20000018 	.word	0x20000018
 8006508:	2000001c 	.word	0x2000001c

0800650c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800650c:	b480      	push	{r7}
 800650e:	b08b      	sub	sp, #44	; 0x2c
 8006510:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006526:	4b29      	ldr	r3, [pc, #164]	; (80065cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b04      	cmp	r3, #4
 8006534:	d002      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x30>
 8006536:	2b08      	cmp	r3, #8
 8006538:	d003      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x36>
 800653a:	e03c      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800653c:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800653e:	623b      	str	r3, [r7, #32]
      break;
 8006540:	e03c      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006548:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800654c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	fa92 f2a2 	rbit	r2, r2
 8006554:	607a      	str	r2, [r7, #4]
  return result;
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	fab2 f282 	clz	r2, r2
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	40d3      	lsrs	r3, r2
 8006560:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006562:	5cd3      	ldrb	r3, [r2, r3]
 8006564:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006566:	4b19      	ldr	r3, [pc, #100]	; (80065cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	220f      	movs	r2, #15
 8006570:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	fa92 f2a2 	rbit	r2, r2
 8006578:	60fa      	str	r2, [r7, #12]
  return result;
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	fab2 f282 	clz	r2, r2
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	40d3      	lsrs	r3, r2
 8006584:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006586:	5cd3      	ldrb	r3, [r2, r3]
 8006588:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006594:	4a0e      	ldr	r2, [pc, #56]	; (80065d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	fbb2 f2f3 	udiv	r2, r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
 80065a4:	e004      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4a0c      	ldr	r2, [pc, #48]	; (80065dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	623b      	str	r3, [r7, #32]
      break;
 80065b4:	e002      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80065b8:	623b      	str	r3, [r7, #32]
      break;
 80065ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	372c      	adds	r7, #44	; 0x2c
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	007a1200 	.word	0x007a1200
 80065d4:	080080c0 	.word	0x080080c0
 80065d8:	080080d0 	.word	0x080080d0
 80065dc:	003d0900 	.word	0x003d0900

080065e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065e6:	681b      	ldr	r3, [r3, #0]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000018 	.word	0x20000018

080065f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80065fe:	f7ff ffef 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006602:	4601      	mov	r1, r0
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800660c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006610:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	fa92 f2a2 	rbit	r2, r2
 8006618:	603a      	str	r2, [r7, #0]
  return result;
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	fab2 f282 	clz	r2, r2
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	40d3      	lsrs	r3, r2
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40021000 	.word	0x40021000
 8006638:	080080b8 	.word	0x080080b8

0800663c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006642:	f7ff ffcd 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006646:	4601      	mov	r1, r0
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006650:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006654:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	fa92 f2a2 	rbit	r2, r2
 800665c:	603a      	str	r2, [r7, #0]
  return result;
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	fab2 f282 	clz	r2, r2
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	40d3      	lsrs	r3, r2
 8006668:	4a04      	ldr	r2, [pc, #16]	; (800667c <HAL_RCC_GetPCLK2Freq+0x40>)
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40021000 	.word	0x40021000
 800667c:	080080b8 	.word	0x080080b8

08006680 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b092      	sub	sp, #72	; 0x48
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80d4 	beq.w	800684c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a4:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	4a4a      	ldr	r2, [pc, #296]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ba:	61d3      	str	r3, [r2, #28]
 80066bc:	4b48      	ldr	r3, [pc, #288]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ce:	4b45      	ldr	r3, [pc, #276]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d118      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a41      	ldr	r2, [pc, #260]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e6:	f7fc fc07 	bl	8002ef8 <HAL_GetTick>
 80066ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ec:	e008      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ee:	f7fc fc03 	bl	8002ef8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b64      	cmp	r3, #100	; 0x64
 80066fa:	d901      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e14b      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006700:	4b38      	ldr	r3, [pc, #224]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800670c:	4b34      	ldr	r3, [pc, #208]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8084 	beq.w	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006728:	429a      	cmp	r2, r3
 800672a:	d07c      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800672c:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800673a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	fa93 f3a3 	rbit	r3, r3
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006746:	fab3 f383 	clz	r3, r3
 800674a:	b2db      	uxtb	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	461a      	mov	r2, r3
 8006756:	2301      	movs	r3, #1
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	fa93 f3a3 	rbit	r3, r3
 8006766:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800677e:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04b      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678e:	f7fc fbb3 	bl	8002ef8 <HAL_GetTick>
 8006792:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006794:	e00a      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006796:	f7fc fbaf 	bl	8002ef8 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e0f5      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80067ac:	2302      	movs	r3, #2
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	fa93 f3a3 	rbit	r3, r3
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	2302      	movs	r3, #2
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	fa93 f3a3 	rbit	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
  return result;
 80067c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c6:	fab3 f383 	clz	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d108      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80067da:	4b01      	ldr	r3, [pc, #4]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	e00d      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40007000 	.word	0x40007000
 80067e8:	10908100 	.word	0x10908100
 80067ec:	2302      	movs	r3, #2
 80067ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	fa93 f3a3 	rbit	r3, r3
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	4b69      	ldr	r3, [pc, #420]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	2202      	movs	r2, #2
 80067fe:	613a      	str	r2, [r7, #16]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	fa92 f2a2 	rbit	r2, r2
 8006806:	60fa      	str	r2, [r7, #12]
  return result;
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	fab2 f282 	clz	r2, r2
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	f002 021f 	and.w	r2, r2, #31
 800681a:	2101      	movs	r1, #1
 800681c:	fa01 f202 	lsl.w	r2, r1, r2
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0b7      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006826:	4b5e      	ldr	r3, [pc, #376]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	495b      	ldr	r1, [pc, #364]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006834:	4313      	orrs	r3, r2
 8006836:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800683c:	2b01      	cmp	r3, #1
 800683e:	d105      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006840:	4b57      	ldr	r3, [pc, #348]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	4a56      	ldr	r2, [pc, #344]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006858:	4b51      	ldr	r3, [pc, #324]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	f023 0203 	bic.w	r2, r3, #3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	494e      	ldr	r1, [pc, #312]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006866:	4313      	orrs	r3, r2
 8006868:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006876:	4b4a      	ldr	r3, [pc, #296]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f023 0210 	bic.w	r2, r3, #16
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4947      	ldr	r1, [pc, #284]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006884:	4313      	orrs	r3, r2
 8006886:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006894:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	493f      	ldr	r1, [pc, #252]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f023 0220 	bic.w	r2, r3, #32
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	4938      	ldr	r1, [pc, #224]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068d0:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	4930      	ldr	r1, [pc, #192]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068ee:	4b2c      	ldr	r3, [pc, #176]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4929      	ldr	r1, [pc, #164]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800690c:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4921      	ldr	r1, [pc, #132]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800691a:	4313      	orrs	r3, r2
 800691c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	491a      	ldr	r1, [pc, #104]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006938:	4313      	orrs	r3, r2
 800693a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006948:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	4912      	ldr	r1, [pc, #72]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006956:	4313      	orrs	r3, r2
 8006958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	490b      	ldr	r1, [pc, #44]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006974:	4313      	orrs	r3, r2
 8006976:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4903      	ldr	r1, [pc, #12]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006992:	4313      	orrs	r3, r2
 8006994:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3748      	adds	r7, #72	; 0x48
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000

080069a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e049      	b.n	8006a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fc f834 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f000 fb1a 	bl	800701c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d001      	beq.n	8006a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e03b      	b.n	8006ae4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a19      	ldr	r2, [pc, #100]	; (8006af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIM_Base_Start_IT+0x4e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIM_Base_Start_IT+0x4e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d115      	bne.n	8006ace <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <HAL_TIM_Base_Start_IT+0xa4>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d015      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x8c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aba:	d011      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	e008      	b.n	8006ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e000      	b.n	8006ae2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	00010007 	.word	0x00010007

08006afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e049      	b.n	8006ba2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fc f822 	bl	8002b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 fa6e 	bl	800701c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_TIM_PWM_Start+0x24>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e03c      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d109      	bne.n	8006bea <HAL_TIM_PWM_Start+0x3e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e02f      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d109      	bne.n	8006c04 <HAL_TIM_PWM_Start+0x58>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e022      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	d109      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x72>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	e015      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d109      	bne.n	8006c38 <HAL_TIM_PWM_Start+0x8c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e008      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e083      	b.n	8006d5a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0xb6>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	e023      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0xc6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c70:	e01b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_PWM_Start+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	e013      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_PWM_Start+0xe6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c90:	e00b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0xf6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	e003      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fdcd 	bl	8007852 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <HAL_TIM_PWM_Start+0x1b8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x134>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <HAL_TIM_PWM_Start+0x1bc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x134>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <HAL_TIM_PWM_Start+0x1c0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x134>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <HAL_TIM_PWM_Start+0x1c4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIM_PWM_Start+0x138>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_PWM_Start+0x13a>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a19      	ldr	r2, [pc, #100]	; (8006d64 <HAL_TIM_PWM_Start+0x1b8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_PWM_Start+0x16c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_PWM_Start+0x16c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <HAL_TIM_PWM_Start+0x1bc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d115      	bne.n	8006d44 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <HAL_TIM_PWM_Start+0x1c8>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d015      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d011      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e000      	b.n	8006d58 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800
 8006d74:	00010007 	.word	0x00010007

08006d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e0fd      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b14      	cmp	r3, #20
 8006d9e:	f200 80f0 	bhi.w	8006f82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006f83 	.word	0x08006f83
 8006db0:	08006f83 	.word	0x08006f83
 8006db4:	08006f83 	.word	0x08006f83
 8006db8:	08006e3d 	.word	0x08006e3d
 8006dbc:	08006f83 	.word	0x08006f83
 8006dc0:	08006f83 	.word	0x08006f83
 8006dc4:	08006f83 	.word	0x08006f83
 8006dc8:	08006e7f 	.word	0x08006e7f
 8006dcc:	08006f83 	.word	0x08006f83
 8006dd0:	08006f83 	.word	0x08006f83
 8006dd4:	08006f83 	.word	0x08006f83
 8006dd8:	08006ebf 	.word	0x08006ebf
 8006ddc:	08006f83 	.word	0x08006f83
 8006de0:	08006f83 	.word	0x08006f83
 8006de4:	08006f83 	.word	0x08006f83
 8006de8:	08006f01 	.word	0x08006f01
 8006dec:	08006f83 	.word	0x08006f83
 8006df0:	08006f83 	.word	0x08006f83
 8006df4:	08006f83 	.word	0x08006f83
 8006df8:	08006f41 	.word	0x08006f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f978 	bl	80070f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0208 	orr.w	r2, r2, #8
 8006e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0204 	bic.w	r2, r2, #4
 8006e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	619a      	str	r2, [r3, #24]
      break;
 8006e3a:	e0a3      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f9de 	bl	8007204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6999      	ldr	r1, [r3, #24]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	021a      	lsls	r2, r3, #8
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	619a      	str	r2, [r3, #24]
      break;
 8006e7c:	e082      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fa3d 	bl	8007304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0208 	orr.w	r2, r2, #8
 8006e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0204 	bic.w	r2, r2, #4
 8006ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	61da      	str	r2, [r3, #28]
      break;
 8006ebc:	e062      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9b 	bl	8007400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69d9      	ldr	r1, [r3, #28]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	021a      	lsls	r2, r3, #8
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	61da      	str	r2, [r3, #28]
      break;
 8006efe:	e041      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fade 	bl	80074c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0208 	orr.w	r2, r2, #8
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0204 	bic.w	r2, r2, #4
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f3e:	e021      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fb1c 	bl	8007584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	021a      	lsls	r2, r3, #8
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f80:	e000      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006f82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop

08006f98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e031      	b.n	8007014 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fb3e 	bl	8007644 <TIM_SlaveTimer_SetConfig>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e018      	b.n	8007014 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007000:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a2e      	ldr	r2, [pc, #184]	; (80070e8 <TIM_Base_SetConfig+0xcc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_Base_SetConfig+0x20>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703a:	d108      	bne.n	800704e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <TIM_Base_SetConfig+0xcc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00f      	beq.n	8007076 <TIM_Base_SetConfig+0x5a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d00b      	beq.n	8007076 <TIM_Base_SetConfig+0x5a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <TIM_Base_SetConfig+0xd0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d007      	beq.n	8007076 <TIM_Base_SetConfig+0x5a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <TIM_Base_SetConfig+0xd4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_Base_SetConfig+0x5a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <TIM_Base_SetConfig+0xd8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d108      	bne.n	8007088 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <TIM_Base_SetConfig+0xcc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00b      	beq.n	80070cc <TIM_Base_SetConfig+0xb0>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <TIM_Base_SetConfig+0xd0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d007      	beq.n	80070cc <TIM_Base_SetConfig+0xb0>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a0c      	ldr	r2, [pc, #48]	; (80070f0 <TIM_Base_SetConfig+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_Base_SetConfig+0xb0>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <TIM_Base_SetConfig+0xd8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d103      	bne.n	80070d4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	615a      	str	r2, [r3, #20]
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800

080070f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 0302 	bic.w	r3, r3, #2
 8007144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <TIM_OC1_SetConfig+0xfc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00b      	beq.n	8007170 <TIM_OC1_SetConfig+0x78>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <TIM_OC1_SetConfig+0x100>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d007      	beq.n	8007170 <TIM_OC1_SetConfig+0x78>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <TIM_OC1_SetConfig+0x104>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <TIM_OC1_SetConfig+0x78>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a25      	ldr	r2, [pc, #148]	; (8007200 <TIM_OC1_SetConfig+0x108>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10c      	bne.n	800718a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0308 	bic.w	r3, r3, #8
 8007176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f023 0304 	bic.w	r3, r3, #4
 8007188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <TIM_OC1_SetConfig+0xfc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00b      	beq.n	80071aa <TIM_OC1_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <TIM_OC1_SetConfig+0x100>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC1_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <TIM_OC1_SetConfig+0x104>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC1_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC1_SetConfig+0x108>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d111      	bne.n	80071ce <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	621a      	str	r2, [r3, #32]
}
 80071e8:	bf00      	nop
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	40012c00 	.word	0x40012c00
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0210 	bic.w	r2, r3, #16
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <TIM_OC2_SetConfig+0xf0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d10d      	bne.n	8007284 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800726e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <TIM_OC2_SetConfig+0xf0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00b      	beq.n	80072a4 <TIM_OC2_SetConfig+0xa0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <TIM_OC2_SetConfig+0xf4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d007      	beq.n	80072a4 <TIM_OC2_SetConfig+0xa0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a19      	ldr	r2, [pc, #100]	; (80072fc <TIM_OC2_SetConfig+0xf8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC2_SetConfig+0xa0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a18      	ldr	r2, [pc, #96]	; (8007300 <TIM_OC2_SetConfig+0xfc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d113      	bne.n	80072cc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800

08007304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <TIM_OC3_SetConfig+0xec>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d10d      	bne.n	8007382 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800736c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007380:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <TIM_OC3_SetConfig+0xec>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00b      	beq.n	80073a2 <TIM_OC3_SetConfig+0x9e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <TIM_OC3_SetConfig+0xf0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <TIM_OC3_SetConfig+0x9e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <TIM_OC3_SetConfig+0xf4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC3_SetConfig+0x9e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a17      	ldr	r2, [pc, #92]	; (80073fc <TIM_OC3_SetConfig+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d113      	bne.n	80073ca <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800

08007400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <TIM_OC4_SetConfig+0xb8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00b      	beq.n	800747c <TIM_OC4_SetConfig+0x7c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <TIM_OC4_SetConfig+0xbc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d007      	beq.n	800747c <TIM_OC4_SetConfig+0x7c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a14      	ldr	r2, [pc, #80]	; (80074c0 <TIM_OC4_SetConfig+0xc0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_OC4_SetConfig+0x7c>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a13      	ldr	r2, [pc, #76]	; (80074c4 <TIM_OC4_SetConfig+0xc4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d109      	bne.n	8007490 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	019b      	lsls	r3, r3, #6
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40012c00 	.word	0x40012c00
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40014400 	.word	0x40014400
 80074c4:	40014800 	.word	0x40014800

080074c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800750c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a15      	ldr	r2, [pc, #84]	; (8007574 <TIM_OC5_SetConfig+0xac>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00b      	beq.n	800753a <TIM_OC5_SetConfig+0x72>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <TIM_OC5_SetConfig+0xb0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d007      	beq.n	800753a <TIM_OC5_SetConfig+0x72>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <TIM_OC5_SetConfig+0xb4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_OC5_SetConfig+0x72>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a12      	ldr	r2, [pc, #72]	; (8007580 <TIM_OC5_SetConfig+0xb8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d109      	bne.n	800754e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007540:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	621a      	str	r2, [r3, #32]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40014000 	.word	0x40014000
 800757c:	40014400 	.word	0x40014400
 8007580:	40014800 	.word	0x40014800

08007584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	051b      	lsls	r3, r3, #20
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a16      	ldr	r2, [pc, #88]	; (8007634 <TIM_OC6_SetConfig+0xb0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00b      	beq.n	80075f8 <TIM_OC6_SetConfig+0x74>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a15      	ldr	r2, [pc, #84]	; (8007638 <TIM_OC6_SetConfig+0xb4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d007      	beq.n	80075f8 <TIM_OC6_SetConfig+0x74>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a14      	ldr	r2, [pc, #80]	; (800763c <TIM_OC6_SetConfig+0xb8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_OC6_SetConfig+0x74>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <TIM_OC6_SetConfig+0xbc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d109      	bne.n	800760c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	029b      	lsls	r3, r3, #10
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	40012c00 	.word	0x40012c00
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	2b30      	cmp	r3, #48	; 0x30
 800768c:	d05c      	beq.n	8007748 <TIM_SlaveTimer_SetConfig+0x104>
 800768e:	2b30      	cmp	r3, #48	; 0x30
 8007690:	d806      	bhi.n	80076a0 <TIM_SlaveTimer_SetConfig+0x5c>
 8007692:	2b10      	cmp	r3, #16
 8007694:	d058      	beq.n	8007748 <TIM_SlaveTimer_SetConfig+0x104>
 8007696:	2b20      	cmp	r3, #32
 8007698:	d056      	beq.n	8007748 <TIM_SlaveTimer_SetConfig+0x104>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d054      	beq.n	8007748 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800769e:	e054      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80076a0:	2b50      	cmp	r3, #80	; 0x50
 80076a2:	d03d      	beq.n	8007720 <TIM_SlaveTimer_SetConfig+0xdc>
 80076a4:	2b50      	cmp	r3, #80	; 0x50
 80076a6:	d802      	bhi.n	80076ae <TIM_SlaveTimer_SetConfig+0x6a>
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d010      	beq.n	80076ce <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80076ac:	e04d      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80076ae:	2b60      	cmp	r3, #96	; 0x60
 80076b0:	d040      	beq.n	8007734 <TIM_SlaveTimer_SetConfig+0xf0>
 80076b2:	2b70      	cmp	r3, #112	; 0x70
 80076b4:	d000      	beq.n	80076b8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80076b6:	e048      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68d9      	ldr	r1, [r3, #12]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f000 f8a3 	bl	8007812 <TIM_ETR_SetConfig>
      break;
 80076cc:	e03d      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d101      	bne.n	80076da <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e038      	b.n	800774c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007700:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	621a      	str	r2, [r3, #32]
      break;
 800771e:	e014      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	6899      	ldr	r1, [r3, #8]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	461a      	mov	r2, r3
 800772e:	f000 f811 	bl	8007754 <TIM_TI1_ConfigInputStage>
      break;
 8007732:	e00a      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	6899      	ldr	r1, [r3, #8]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	461a      	mov	r2, r3
 8007742:	f000 f836 	bl	80077b2 <TIM_TI2_ConfigInputStage>
      break;
 8007746:	e000      	b.n	800774a <TIM_SlaveTimer_SetConfig+0x106>
        break;
 8007748:	bf00      	nop
  }
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800777e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 030a 	bic.w	r3, r3, #10
 8007790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b087      	sub	sp, #28
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f023 0210 	bic.w	r2, r3, #16
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	031b      	lsls	r3, r3, #12
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007812:	b480      	push	{r7}
 8007814:	b087      	sub	sp, #28
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800782c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	021a      	lsls	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	431a      	orrs	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4313      	orrs	r3, r2
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	609a      	str	r2, [r3, #8]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007852:	b480      	push	{r7}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2201      	movs	r2, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a1a      	ldr	r2, [r3, #32]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	43db      	mvns	r3, r3
 8007874:	401a      	ands	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1a      	ldr	r2, [r3, #32]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	fa01 f303 	lsl.w	r3, r1, r3
 800788a:	431a      	orrs	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	621a      	str	r2, [r3, #32]
}
 8007890:	bf00      	nop
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e04f      	b.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d108      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a14      	ldr	r2, [pc, #80]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d004      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a10      	ldr	r2, [pc, #64]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d10c      	bne.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40014000 	.word	0x40014000

08007968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e060      	b.n	8007a46 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	041b      	lsls	r3, r3, #16
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d115      	bne.n	8007a34 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	051b      	lsls	r3, r3, #20
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00

08007a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e040      	b.n	8007aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fb f910 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	; 0x24
 8007a84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f82c 	bl	8007af4 <UART_SetConfig>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e022      	b.n	8007aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f958 	bl	8007d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9df 	bl	8007ea8 <UART_CheckIdleState>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b8b      	ldr	r3, [pc, #556]	; (8007d4c <UART_SetConfig+0x258>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	6979      	ldr	r1, [r7, #20]
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a79      	ldr	r2, [pc, #484]	; (8007d50 <UART_SetConfig+0x25c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d121      	bne.n	8007bb4 <UART_SetConfig+0xc0>
 8007b70:	4b78      	ldr	r3, [pc, #480]	; (8007d54 <UART_SetConfig+0x260>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d817      	bhi.n	8007bac <UART_SetConfig+0xb8>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <UART_SetConfig+0x90>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007ba7 	.word	0x08007ba7
 8007b90:	08007b9b 	.word	0x08007b9b
 8007b94:	2300      	movs	r3, #0
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e01e      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e01b      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e018      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e015      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007bac:	2310      	movs	r3, #16
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	bf00      	nop
 8007bb2:	e011      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a67      	ldr	r2, [pc, #412]	; (8007d58 <UART_SetConfig+0x264>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d102      	bne.n	8007bc4 <UART_SetConfig+0xd0>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e009      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a64      	ldr	r2, [pc, #400]	; (8007d5c <UART_SetConfig+0x268>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d102      	bne.n	8007bd4 <UART_SetConfig+0xe0>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	77fb      	strb	r3, [r7, #31]
 8007bd2:	e001      	b.n	8007bd8 <UART_SetConfig+0xe4>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be0:	d15c      	bne.n	8007c9c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8007be2:	7ffb      	ldrb	r3, [r7, #31]
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d828      	bhi.n	8007c3a <UART_SetConfig+0x146>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <UART_SetConfig+0xfc>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c15 	.word	0x08007c15
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c2b 	.word	0x08007c2b
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c3b 	.word	0x08007c3b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c14:	f7fe fcf0 	bl	80065f8 <HAL_RCC_GetPCLK1Freq>
 8007c18:	61b8      	str	r0, [r7, #24]
        break;
 8007c1a:	e013      	b.n	8007c44 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1c:	f7fe fd0e 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 8007c20:	61b8      	str	r0, [r7, #24]
        break;
 8007c22:	e00f      	b.n	8007c44 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b4e      	ldr	r3, [pc, #312]	; (8007d60 <UART_SetConfig+0x26c>)
 8007c26:	61bb      	str	r3, [r7, #24]
        break;
 8007c28:	e00c      	b.n	8007c44 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fe fc6f 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8007c2e:	61b8      	str	r0, [r7, #24]
        break;
 8007c30:	e008      	b.n	8007c44 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	61bb      	str	r3, [r7, #24]
        break;
 8007c38:	e004      	b.n	8007c44 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	77bb      	strb	r3, [r7, #30]
        break;
 8007c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d074      	beq.n	8007d34 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	005a      	lsls	r2, r3, #1
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d916      	bls.n	8007c96 <UART_SetConfig+0x1a2>
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6e:	d212      	bcs.n	8007c96 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f023 030f 	bic.w	r3, r3, #15
 8007c78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	89fb      	ldrh	r3, [r7, #14]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	89fa      	ldrh	r2, [r7, #14]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	e04e      	b.n	8007d34 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	77bb      	strb	r3, [r7, #30]
 8007c9a:	e04b      	b.n	8007d34 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c9c:	7ffb      	ldrb	r3, [r7, #31]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d827      	bhi.n	8007cf2 <UART_SetConfig+0x1fe>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x1b4>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fe fc94 	bl	80065f8 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	61b8      	str	r0, [r7, #24]
        break;
 8007cd2:	e013      	b.n	8007cfc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fe fcb2 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 8007cd8:	61b8      	str	r0, [r7, #24]
        break;
 8007cda:	e00f      	b.n	8007cfc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <UART_SetConfig+0x26c>)
 8007cde:	61bb      	str	r3, [r7, #24]
        break;
 8007ce0:	e00c      	b.n	8007cfc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fe fc13 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8007ce6:	61b8      	str	r0, [r7, #24]
        break;
 8007ce8:	e008      	b.n	8007cfc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	61bb      	str	r3, [r7, #24]
        break;
 8007cf0:	e004      	b.n	8007cfc <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d018      	beq.n	8007d34 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	085a      	lsrs	r2, r3, #1
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	441a      	add	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d908      	bls.n	8007d30 <UART_SetConfig+0x23c>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d24:	d204      	bcs.n	8007d30 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e001      	b.n	8007d34 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	efff69f3 	.word	0xefff69f3
 8007d50:	40013800 	.word	0x40013800
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40004400 	.word	0x40004400
 8007d5c:	40004800 	.word	0x40004800
 8007d60:	007a1200 	.word	0x007a1200

08007d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d10a      	bne.n	8007e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb8:	f7fb f81e 	bl	8002ef8 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d10e      	bne.n	8007eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f82d 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e023      	b.n	8007f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d10e      	bne.n	8007f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f817 	bl	8007f3a <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e00d      	b.n	8007f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4a:	e05e      	b.n	800800a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d05a      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f54:	f7fa ffd0 	bl	8002ef8 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11b      	bne.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2220      	movs	r2, #32
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e043      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d02c      	beq.n	800800a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	d124      	bne.n	800800a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e00f      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4013      	ands	r3, r2
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	bf0c      	ite	eq
 800801a:	2301      	moveq	r3, #1
 800801c:	2300      	movne	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	429a      	cmp	r2, r3
 8008026:	d091      	beq.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <__libc_init_array>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	4e0d      	ldr	r6, [pc, #52]	; (800806c <__libc_init_array+0x38>)
 8008038:	4c0d      	ldr	r4, [pc, #52]	; (8008070 <__libc_init_array+0x3c>)
 800803a:	1ba4      	subs	r4, r4, r6
 800803c:	10a4      	asrs	r4, r4, #2
 800803e:	2500      	movs	r5, #0
 8008040:	42a5      	cmp	r5, r4
 8008042:	d109      	bne.n	8008058 <__libc_init_array+0x24>
 8008044:	4e0b      	ldr	r6, [pc, #44]	; (8008074 <__libc_init_array+0x40>)
 8008046:	4c0c      	ldr	r4, [pc, #48]	; (8008078 <__libc_init_array+0x44>)
 8008048:	f000 f820 	bl	800808c <_init>
 800804c:	1ba4      	subs	r4, r4, r6
 800804e:	10a4      	asrs	r4, r4, #2
 8008050:	2500      	movs	r5, #0
 8008052:	42a5      	cmp	r5, r4
 8008054:	d105      	bne.n	8008062 <__libc_init_array+0x2e>
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800805c:	4798      	blx	r3
 800805e:	3501      	adds	r5, #1
 8008060:	e7ee      	b.n	8008040 <__libc_init_array+0xc>
 8008062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008066:	4798      	blx	r3
 8008068:	3501      	adds	r5, #1
 800806a:	e7f2      	b.n	8008052 <__libc_init_array+0x1e>
 800806c:	080080e0 	.word	0x080080e0
 8008070:	080080e0 	.word	0x080080e0
 8008074:	080080e0 	.word	0x080080e0
 8008078:	080080e4 	.word	0x080080e4

0800807c <memset>:
 800807c:	4402      	add	r2, r0
 800807e:	4603      	mov	r3, r0
 8008080:	4293      	cmp	r3, r2
 8008082:	d100      	bne.n	8008086 <memset+0xa>
 8008084:	4770      	bx	lr
 8008086:	f803 1b01 	strb.w	r1, [r3], #1
 800808a:	e7f9      	b.n	8008080 <memset+0x4>

0800808c <_init>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr

08008098 <_fini>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr
