
Prestudy motor control pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08008008  08008008  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008008  08008008  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000024  08008034  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08008034  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cac  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c9  00000000  00000000  00034d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  000375d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00038a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce15  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d67  00000000  00000000  00056bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad986  00000000  00000000  00067934  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001152ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a80  00000000  00000000  00115338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fb4 	.word	0x08007fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08007fb4 	.word	0x08007fb4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <initPID>:
	//HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_13);
}
*/

void initPID(float KPvalue, float KIvalue, float KDvalue, int sampleTimeValue)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bae:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bb2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bb6:	6038      	str	r0, [r7, #0]
	KP = KPvalue;
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <initPID+0x38>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6013      	str	r3, [r2, #0]
	KI = KIvalue;
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <initPID+0x3c>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	6013      	str	r3, [r2, #0]
	KD = KDvalue;
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <initPID+0x40>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	sampleTime = sampleTimeValue;
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <initPID+0x44>)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000068 	.word	0x20000068
 8000be0:	2000006c 	.word	0x2000006c
 8000be4:	20000070 	.word	0x20000070
 8000be8:	20000074 	.word	0x20000074

08000bec <calculatePIDLeft>:

int calculatePIDLeft(int feedback, int target)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	int error = target - feedback;
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	60bb      	str	r3, [r7, #8]
	IntegralLeft += error;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <calculatePIDLeft+0x94>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <calculatePIDLeft+0x94>)
 8000c08:	6013      	str	r3, [r2, #0]
	if(IntegralLeft > 150) IntegralLeft = 150;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <calculatePIDLeft+0x94>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b96      	cmp	r3, #150	; 0x96
 8000c10:	dd02      	ble.n	8000c18 <calculatePIDLeft+0x2c>
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <calculatePIDLeft+0x94>)
 8000c14:	2296      	movs	r2, #150	; 0x96
 8000c16:	601a      	str	r2, [r3, #0]
	int correctionvalue = (KP * error + KI * IntegralLeft);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <calculatePIDLeft+0x98>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <calculatePIDLeft+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <calculatePIDLeft+0x9c>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c4a:	ee17 3a90 	vmov	r3, s15
 8000c4e:	60fb      	str	r3, [r7, #12]
	if(correctionvalue > maxPIDlevel) correctionvalue = maxPIDlevel;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <calculatePIDLeft+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dd03      	ble.n	8000c62 <calculatePIDLeft+0x76>
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <calculatePIDLeft+0xa0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e007      	b.n	8000c72 <calculatePIDLeft+0x86>
	else if (correctionvalue < minPIDlevel) correctionvalue = minPIDlevel;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <calculatePIDLeft+0xa4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	da02      	bge.n	8000c72 <calculatePIDLeft+0x86>
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <calculatePIDLeft+0xa4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
	return correctionvalue;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	2000007c 	.word	0x2000007c
 8000c84:	20000068 	.word	0x20000068
 8000c88:	2000006c 	.word	0x2000006c
 8000c8c:	20000014 	.word	0x20000014
 8000c90:	20000078 	.word	0x20000078

08000c94 <calculatePIDRight>:

int calculatePIDRight(int feedback, int target)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	int error = target - feedback;
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	60bb      	str	r3, [r7, #8]
	IntegralRight += error;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <calculatePIDRight+0x94>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <calculatePIDRight+0x94>)
 8000cb0:	6013      	str	r3, [r2, #0]
	if(IntegralRight > 150) IntegralRight = 150;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <calculatePIDRight+0x94>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b96      	cmp	r3, #150	; 0x96
 8000cb8:	dd02      	ble.n	8000cc0 <calculatePIDRight+0x2c>
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <calculatePIDRight+0x94>)
 8000cbc:	2296      	movs	r2, #150	; 0x96
 8000cbe:	601a      	str	r2, [r3, #0]
	int correctionvalue = (KP * error + KI * IntegralRight);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <calculatePIDRight+0x98>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <calculatePIDRight+0x94>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <calculatePIDRight+0x9c>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf2:	ee17 3a90 	vmov	r3, s15
 8000cf6:	60fb      	str	r3, [r7, #12]
	if(correctionvalue > maxPIDlevel) correctionvalue = maxPIDlevel;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <calculatePIDRight+0xa0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dd03      	ble.n	8000d0a <calculatePIDRight+0x76>
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <calculatePIDRight+0xa0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e007      	b.n	8000d1a <calculatePIDRight+0x86>
	else if (correctionvalue < minPIDlevel) correctionvalue = minPIDlevel;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <calculatePIDRight+0xa4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	da02      	bge.n	8000d1a <calculatePIDRight+0x86>
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <calculatePIDRight+0xa4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
	return correctionvalue;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000080 	.word	0x20000080
 8000d2c:	20000068 	.word	0x20000068
 8000d30:	2000006c 	.word	0x2000006c
 8000d34:	20000014 	.word	0x20000014
 8000d38:	20000078 	.word	0x20000078

08000d3c <resetTimeout>:

void resetTimeout() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	timeout_timertick = HAL_GetTick();
 8000d40:	f002 f86e 	bl	8002e20 <HAL_GetTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b01      	ldr	r3, [pc, #4]	; (8000d50 <resetTimeout+0x14>)
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000060 	.word	0x20000060
 8000d54:	00000000 	.word	0x00000000

08000d58 <getInputVoltage>:

float getInputVoltage()
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
	uint32_t temp = adcBuffer[0];
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <getInputVoltage+0x70>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	60fb      	str	r3, [r7, #12]
	uint32_t shuntVoltage = (801 * temp);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f240 3221 	movw	r2, #801	; 0x321
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	60bb      	str	r3, [r7, #8]
	float voltage = (shuntVoltage * 18.414) / 1000000;
 8000d70:	68b8      	ldr	r0, [r7, #8]
 8000d72:	f7ff fb6b 	bl	800044c <__aeabi_ui2d>
 8000d76:	a310      	add	r3, pc, #64	; (adr r3, 8000db8 <getInputVoltage+0x60>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fbe0 	bl	8000540 <__aeabi_dmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4618      	mov	r0, r3
 8000d86:	4621      	mov	r1, r4
 8000d88:	a30d      	add	r3, pc, #52	; (adr r3, 8000dc0 <getInputVoltage+0x68>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fd01 	bl	8000794 <__aeabi_ddiv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	4618      	mov	r0, r3
 8000d98:	4621      	mov	r1, r4
 8000d9a:	f7ff feb3 	bl	8000b04 <__aeabi_d2f>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	607b      	str	r3, [r7, #4]
	return voltage;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	ee07 3a90 	vmov	s15, r3
}
 8000da8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	e76c8b44 	.word	0xe76c8b44
 8000dbc:	403269fb 	.word	0x403269fb
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	412e8480 	.word	0x412e8480
 8000dc8:	200000ac 	.word	0x200000ac

08000dcc <sendACK>:

void sendACK()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	uint32_t mb;
	uint8_t data[] = {ID, 1};
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <sendACK+0x48>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	803b      	strh	r3, [r7, #0]
	TxMessage.StdId = 0;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <sendACK+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <sendACK+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <sendACK+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = 2;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <sendACK+0x4c>)
 8000dec:	2202      	movs	r2, #2
 8000dee:	611a      	str	r2, [r3, #16]
	TxMessage.TransmitGlobalTime = DISABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <sendACK+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	751a      	strb	r2, [r3, #20]
	if (HAL_CAN_AddTxMessage(&hcan, &TxMessage, data, &mb) != HAL_OK) {
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	463a      	mov	r2, r7
 8000dfa:	4907      	ldr	r1, [pc, #28]	; (8000e18 <sendACK+0x4c>)
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <sendACK+0x50>)
 8000dfe:	f003 f8c9 	bl	8003f94 <HAL_CAN_AddTxMessage>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <sendACK+0x40>
	    Error_Handler();
 8000e08:	f001 fc2c 	bl	8002664 <Error_Handler>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	08007fcc 	.word	0x08007fcc
 8000e18:	20000398 	.word	0x20000398
 8000e1c:	20000198 	.word	0x20000198

08000e20 <setPIDPWMLeft>:
	    Error_Handler();
	}
}

void setPIDPWMLeft(int PWM)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <setPIDPWMLeft+0x84>)
 8000e2c:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <setPIDPWMLeft+0x88>)
 8000e38:	f004 f93a 	bl	80050b0 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e42:	db0a      	blt.n	8000e5a <setPIDPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f004 f930 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e00d      	b.n	8000e76 <setPIDPWMLeft+0x56>
	}
	else if(PWM < 400)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e60:	da09      	bge.n	8000e76 <setPIDPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f004 f921 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000e74:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000e82:	db02      	blt.n	8000e8a <setPIDPWMLeft+0x6a>
	{
		temp = 401;
 8000e84:	f240 1391 	movw	r3, #401	; 0x191
 8000e88:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b13      	cmp	r3, #19
 8000e8e:	dc01      	bgt.n	8000e94 <setPIDPWMLeft+0x74>
	{
		temp = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
	}
	pid_pwm_target_left = temp;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <setPIDPWMLeft+0x8c>)
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	20000044 	.word	0x20000044

08000eb0 <setPIDPWMRight>:

void setPIDPWMRight(int PWM)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <setPIDPWMRight+0x80>)
 8000ebc:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	481c      	ldr	r0, [pc, #112]	; (8000f34 <setPIDPWMRight+0x84>)
 8000ec4:	f004 f8f4 	bl	80050b0 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ece:	db0a      	blt.n	8000ee6 <setPIDPWMRight+0x36>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f004 f8ea 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e00d      	b.n	8000f02 <setPIDPWMRight+0x52>
	}
	else if(PWM < 400)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000eec:	da09      	bge.n	8000f02 <setPIDPWMRight+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f004 f8db 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000f00:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000f0e:	db02      	blt.n	8000f16 <setPIDPWMRight+0x66>
	{
		temp = 401;
 8000f10:	f240 1391 	movw	r3, #401	; 0x191
 8000f14:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b13      	cmp	r3, #19
 8000f1a:	dc01      	bgt.n	8000f20 <setPIDPWMRight+0x70>
	{
		temp = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
	}
	pid_pwm_target_right = temp;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <setPIDPWMRight+0x88>)
 8000f24:	6013      	str	r3, [r2, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000010 	.word	0x20000010
 8000f34:	48000800 	.word	0x48000800
 8000f38:	20000048 	.word	0x20000048

08000f3c <setPWMLeft>:

void setPWMLeft(int PWM)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	pwm_left = PWM;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <setPWMLeft+0x84>)
 8000f48:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <setPWMLeft+0x88>)
 8000f54:	f004 f8ac 	bl	80050b0 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f5e:	db0a      	blt.n	8000f76 <setPWMLeft+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f004 f8a2 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e00d      	b.n	8000f92 <setPWMLeft+0x56>
	}
	else if(PWM < 400)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f7c:	da09      	bge.n	8000f92 <setPWMLeft+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f004 f893 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8000f90:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 8000f9e:	db02      	blt.n	8000fa6 <setPWMLeft+0x6a>
	{
		temp = 401;
 8000fa0:	f240 1391 	movw	r3, #401	; 0x191
 8000fa4:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2b13      	cmp	r3, #19
 8000faa:	dc01      	bgt.n	8000fb0 <setPWMLeft+0x74>
	{
			temp = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, temp);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <setPWMLeft+0x8c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	20000100 	.word	0x20000100

08000fcc <setPWMRight>:

void setPWMRight(int PWM)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	pwm_right = PWM;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <setPWMRight+0x84>)
 8000fd8:	6013      	str	r3, [r2, #0]
	uint32_t PWM_local = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	481c      	ldr	r0, [pc, #112]	; (8001054 <setPWMRight+0x88>)
 8000fe4:	f004 f864 	bl	80050b0 <HAL_GPIO_WritePin>
	if(PWM >= 400)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fee:	db0a      	blt.n	8001006 <setPWMRight+0x3a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f004 f85a 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = PWM - 400;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e00d      	b.n	8001022 <setPWMRight+0x56>
	}
	else if(PWM < 400)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800100c:	da09      	bge.n	8001022 <setPWMRight+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f004 f84b 	bl	80050b0 <HAL_GPIO_WritePin>
		PWM_local = 400 - PWM;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001020:	60fb      	str	r3, [r7, #12]
	}
	int temp = PWM_local + 1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
	if(temp > 401)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 800102e:	db02      	blt.n	8001036 <setPWMRight+0x6a>
	{
		temp = 401;
 8001030:	f240 1391 	movw	r3, #401	; 0x191
 8001034:	60bb      	str	r3, [r7, #8]
	}
	if(temp < 20)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b13      	cmp	r3, #19
 800103a:	dc01      	bgt.n	8001040 <setPWMRight+0x74>
	{
		temp = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
	}
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, temp);
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <setPWMRight+0x8c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000010 	.word	0x20000010
 8001054:	48000800 	.word	0x48000800
 8001058:	20000100 	.word	0x20000100
 800105c:	00000000 	.word	0x00000000

08001060 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08f      	sub	sp, #60	; 0x3c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  //HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001068:	4bcb      	ldr	r3, [pc, #812]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800106a:	4acc      	ldr	r2, [pc, #816]	; (800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>)
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f003 f86b 	bl	800414a <HAL_CAN_GetRxMessage>
  uint32_t mb;
  uint32_t shuntVoltage;
  uint32_t temp_speed, temp_speed_left, temp_speed_right;
  uint8_t currentLSB, currentMSB, voltageLSB, voltageMSB;
  float current, voltage;
  uint8_t data[] = {ID,0,0,0,0,0,0,0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	2301      	movs	r3, #1
 8001080:	733b      	strb	r3, [r7, #12]
  resetTimeout();
 8001082:	f7ff fe5b 	bl	8000d3c <resetTimeout>
  switch(RxData[0])
 8001086:	4bc4      	ldr	r3, [pc, #784]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b69      	cmp	r3, #105	; 0x69
 800108c:	f200 8399 	bhi.w	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
 8001090:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	08001241 	.word	0x08001241
 800109c:	08001293 	.word	0x08001293
 80010a0:	080012e5 	.word	0x080012e5
 80010a4:	080012fb 	.word	0x080012fb
 80010a8:	0800131d 	.word	0x0800131d
 80010ac:	0800133f 	.word	0x0800133f
 80010b0:	0800136b 	.word	0x0800136b
 80010b4:	080013b5 	.word	0x080013b5
 80010b8:	080017c3 	.word	0x080017c3
 80010bc:	080017c3 	.word	0x080017c3
 80010c0:	08001407 	.word	0x08001407
 80010c4:	08001425 	.word	0x08001425
 80010c8:	08001443 	.word	0x08001443
 80010cc:	0800146f 	.word	0x0800146f
 80010d0:	080017c3 	.word	0x080017c3
 80010d4:	080017c3 	.word	0x080017c3
 80010d8:	080017c3 	.word	0x080017c3
 80010dc:	080017c3 	.word	0x080017c3
 80010e0:	080017c3 	.word	0x080017c3
 80010e4:	080017c3 	.word	0x080017c3
 80010e8:	080017c3 	.word	0x080017c3
 80010ec:	080017c3 	.word	0x080017c3
 80010f0:	080017c3 	.word	0x080017c3
 80010f4:	080017c3 	.word	0x080017c3
 80010f8:	080017c3 	.word	0x080017c3
 80010fc:	080017c3 	.word	0x080017c3
 8001100:	080017c3 	.word	0x080017c3
 8001104:	080017c3 	.word	0x080017c3
 8001108:	080017c3 	.word	0x080017c3
 800110c:	080017c3 	.word	0x080017c3
 8001110:	080017c3 	.word	0x080017c3
 8001114:	080017c3 	.word	0x080017c3
 8001118:	080017c3 	.word	0x080017c3
 800111c:	080017c3 	.word	0x080017c3
 8001120:	080017c3 	.word	0x080017c3
 8001124:	080017c3 	.word	0x080017c3
 8001128:	080017c3 	.word	0x080017c3
 800112c:	080017c3 	.word	0x080017c3
 8001130:	080017c3 	.word	0x080017c3
 8001134:	080017c3 	.word	0x080017c3
 8001138:	080017c3 	.word	0x080017c3
 800113c:	080017c3 	.word	0x080017c3
 8001140:	080017c3 	.word	0x080017c3
 8001144:	080017c3 	.word	0x080017c3
 8001148:	080017c3 	.word	0x080017c3
 800114c:	080017c3 	.word	0x080017c3
 8001150:	080017c3 	.word	0x080017c3
 8001154:	080017c3 	.word	0x080017c3
 8001158:	080017c3 	.word	0x080017c3
 800115c:	080017c3 	.word	0x080017c3
 8001160:	080017c3 	.word	0x080017c3
 8001164:	080017c3 	.word	0x080017c3
 8001168:	080017c3 	.word	0x080017c3
 800116c:	080017c3 	.word	0x080017c3
 8001170:	080017c3 	.word	0x080017c3
 8001174:	080017c3 	.word	0x080017c3
 8001178:	080017c3 	.word	0x080017c3
 800117c:	080017c3 	.word	0x080017c3
 8001180:	080017c3 	.word	0x080017c3
 8001184:	080017c3 	.word	0x080017c3
 8001188:	080017c3 	.word	0x080017c3
 800118c:	080017c3 	.word	0x080017c3
 8001190:	080017c3 	.word	0x080017c3
 8001194:	080017c3 	.word	0x080017c3
 8001198:	080017c3 	.word	0x080017c3
 800119c:	080017c3 	.word	0x080017c3
 80011a0:	080017c3 	.word	0x080017c3
 80011a4:	080017c3 	.word	0x080017c3
 80011a8:	080017c3 	.word	0x080017c3
 80011ac:	080017c3 	.word	0x080017c3
 80011b0:	080017c3 	.word	0x080017c3
 80011b4:	080017c3 	.word	0x080017c3
 80011b8:	080017c3 	.word	0x080017c3
 80011bc:	080017c3 	.word	0x080017c3
 80011c0:	080017c3 	.word	0x080017c3
 80011c4:	080017c3 	.word	0x080017c3
 80011c8:	080017c3 	.word	0x080017c3
 80011cc:	080017c3 	.word	0x080017c3
 80011d0:	080017c3 	.word	0x080017c3
 80011d4:	080017c3 	.word	0x080017c3
 80011d8:	080017c3 	.word	0x080017c3
 80011dc:	080017c3 	.word	0x080017c3
 80011e0:	080017c3 	.word	0x080017c3
 80011e4:	080017c3 	.word	0x080017c3
 80011e8:	080017c3 	.word	0x080017c3
 80011ec:	080017c3 	.word	0x080017c3
 80011f0:	080017c3 	.word	0x080017c3
 80011f4:	080017c3 	.word	0x080017c3
 80011f8:	080017c3 	.word	0x080017c3
 80011fc:	080017c3 	.word	0x080017c3
 8001200:	080017c3 	.word	0x080017c3
 8001204:	080017c3 	.word	0x080017c3
 8001208:	080017c3 	.word	0x080017c3
 800120c:	080017c3 	.word	0x080017c3
 8001210:	080017c3 	.word	0x080017c3
 8001214:	080017c3 	.word	0x080017c3
 8001218:	080017c3 	.word	0x080017c3
 800121c:	080017c3 	.word	0x080017c3
 8001220:	080017c3 	.word	0x080017c3
 8001224:	080017c3 	.word	0x080017c3
 8001228:	08001481 	.word	0x08001481
 800122c:	0800153f 	.word	0x0800153f
 8001230:	080015fd 	.word	0x080015fd
 8001234:	080016c1 	.word	0x080016c1
 8001238:	08001701 	.word	0x08001701
 800123c:	08001761 	.word	0x08001761
  {
  	  case 0:
  		  //----------- Coast Brake -----------//
  		  //Set sleep pins low
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4856      	ldr	r0, [pc, #344]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 8001246:	f003 ff33 	bl	80050b0 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	4854      	ldr	r0, [pc, #336]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 8001250:	f003 ff2e 	bl	80050b0 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f003 ff28 	bl	80050b0 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f003 ff22 	bl	80050b0 <HAL_GPIO_WritePin>
  		  pwm_left = 400;
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>)
 800126e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001272:	601a      	str	r2, [r3, #0]
  		  pwm_target_left = 400;
 8001274:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001276:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800127a:	601a      	str	r2, [r3, #0]
  		  pwm_right = 400;
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>)
 800127e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001282:	601a      	str	r2, [r3, #0]
  		  pwm_target_right = 400;
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001286:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800128a:	601a      	str	r2, [r3, #0]
  		  sendACK();
 800128c:	f7ff fd9e 	bl	8000dcc <sendACK>
  		  break;
 8001290:	e297      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 1:
  		  //----------- Dynamic Brake (slow brake) -----------//
  		  //Set sleep pins high
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	4842      	ldr	r0, [pc, #264]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 8001298:	f003 ff0a 	bl	80050b0 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	483f      	ldr	r0, [pc, #252]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x340>)
 80012a2:	f003 ff05 	bl	80050b0 <HAL_GPIO_WritePin>
  		  //Set Phase pins low
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f003 feff 	bl	80050b0 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f003 fef9 	bl	80050b0 <HAL_GPIO_WritePin>
  		  pwm_target_right = 400;
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80012c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012c4:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80012c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012cc:	601a      	str	r2, [r3, #0]
  		  setPWMLeft(400);
 80012ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012d2:	f7ff fe33 	bl	8000f3c <setPWMLeft>
  		  setPWMRight(400);
 80012d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012da:	f7ff fe77 	bl	8000fcc <setPWMRight>
  		  sendACK();
 80012de:	f7ff fd75 	bl	8000dcc <sendACK>
  		  break;
 80012e2:	e26e      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 2:
  		  //----------- Regenerative brake -----------//
  		  pwm_target_right = 400;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 80012e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012ea:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 80012ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012f2:	601a      	str	r2, [r3, #0]
  		  sendACK();
 80012f4:	f7ff fd6a 	bl	8000dcc <sendACK>
  		  break;
 80012f8:	e263      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  			  pwm_target_left = 800;
  			  pwm_target_right = 0;
  		  }
  		  else
  		  {
  			  pwm_target_left = 400 + RxData[1];
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001302:	461a      	mov	r2, r3
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001306:	601a      	str	r2, [r3, #0]
  			  pwm_target_right = 400 - RxData[1];
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001310:	461a      	mov	r2, r3
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001314:	601a      	str	r2, [r3, #0]
  		  }
  		  sendACK();
 8001316:	f7ff fd59 	bl	8000dcc <sendACK>
  		  break;
 800131a:	e252      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  	  pwm_target_left = 0;
  		  	  pwm_target_right = 800;
  		  }
  		  else
  		  {
  			  pwm_target_left = 400 - RxData[1];
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800131e:	785b      	ldrb	r3, [r3, #1]
 8001320:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001324:	461a      	mov	r2, r3
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001328:	601a      	str	r2, [r3, #0]
  		  	  pwm_target_right = 400 + RxData[1];
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001332:	461a      	mov	r2, r3
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001336:	601a      	str	r2, [r3, #0]
  		  }
  		  sendACK();
 8001338:	f7ff fd48 	bl	8000dcc <sendACK>
  		  break;
 800133c:	e241      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 5:
  		  //----------- Manual left motor -----------//
  		  temp_speed = (RxData[1] << 8) + RxData[2];
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001346:	7892      	ldrb	r2, [r2, #2]
 8001348:	4413      	add	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
  		  if(temp_speed > 800) pwm_target_left = 800;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001352:	d904      	bls.n	800135e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001356:	f44f 7248 	mov.w	r2, #800	; 0x320
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e002      	b.n	8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
  		  else pwm_target_left = temp_speed;
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x348>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]
  		  sendACK();
 8001364:	f7ff fd32 	bl	8000dcc <sendACK>
  		  break;
 8001368:	e22b      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 6:
  		  //----------- Manual right motor -----------//
  		  temp_speed = (RxData[1] << 8) + RxData[2];
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>)
 8001372:	7892      	ldrb	r2, [r2, #2]
 8001374:	4413      	add	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
  		  if(temp_speed > 800) pwm_target_right = 800;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800137e:	d904      	bls.n	800138a <HAL_CAN_RxFifo0MsgPendingCallback+0x32a>
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 8001382:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e002      	b.n	8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x330>
  		  else pwm_target_right = temp_speed;
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6013      	str	r3, [r2, #0]
  		  sendACK();
 8001390:	f7ff fd1c 	bl	8000dcc <sendACK>
  		  break;
 8001394:	e215      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
 8001396:	bf00      	nop
 8001398:	20000344 	.word	0x20000344
 800139c:	200003fc 	.word	0x200003fc
 80013a0:	48000800 	.word	0x48000800
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	20000004 	.word	0x20000004
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000008 	.word	0x20000008
  	  case 7:
  		  //----------- Manual right/left motor -----------//
  		  temp_speed_left = (RxData[1] << 8) + RxData[2];
 80013b4:	4bb6      	ldr	r3, [pc, #728]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4ab5      	ldr	r2, [pc, #724]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 80013bc:	7892      	ldrb	r2, [r2, #2]
 80013be:	4413      	add	r3, r2
 80013c0:	623b      	str	r3, [r7, #32]
  		  temp_speed_right = (RxData[3] << 8) + RxData[4];
 80013c2:	4bb3      	ldr	r3, [pc, #716]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	4ab1      	ldr	r2, [pc, #708]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 80013ca:	7912      	ldrb	r2, [r2, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	61fb      	str	r3, [r7, #28]
  		  if(temp_speed_left > 800) pwm_target_left = 800;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013d6:	d904      	bls.n	80013e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
 80013d8:	4bae      	ldr	r3, [pc, #696]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x634>)
 80013da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e002      	b.n	80013e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>
  		  else pwm_target_left = temp_speed_left;
 80013e2:	4aac      	ldr	r2, [pc, #688]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x634>)
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	6013      	str	r3, [r2, #0]
  		  if(temp_speed_right > 800) pwm_target_right = 800;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ee:	d904      	bls.n	80013fa <HAL_CAN_RxFifo0MsgPendingCallback+0x39a>
 80013f0:	4ba9      	ldr	r3, [pc, #676]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x638>)
 80013f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e002      	b.n	8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>
  		  else pwm_target_right = temp_speed_right;
 80013fa:	4aa7      	ldr	r2, [pc, #668]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x638>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	6013      	str	r3, [r2, #0]
  		  sendACK();
 8001400:	f7ff fce4 	bl	8000dcc <sendACK>

  		  break;
 8001404:	e1dd      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 10:
  		  //----------- Set acceleration -----------//
  		  if(RxData[1] > 100) accl = 100;
 8001406:	4ba2      	ldr	r3, [pc, #648]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d903      	bls.n	8001416 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b6>
 800140e:	4ba3      	ldr	r3, [pc, #652]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x63c>)
 8001410:	2264      	movs	r2, #100	; 0x64
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e003      	b.n	800141e <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
  		  else accl = RxData[1];
 8001416:	4b9e      	ldr	r3, [pc, #632]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001418:	785a      	ldrb	r2, [r3, #1]
 800141a:	4ba0      	ldr	r3, [pc, #640]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x63c>)
 800141c:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800141e:	f7ff fcd5 	bl	8000dcc <sendACK>
  		  break;
 8001422:	e1ce      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 11:
  		  //----------- Set deceleration -----------//
  		  if(RxData[1] > 100) decl = 100;
 8001424:	4b9a      	ldr	r3, [pc, #616]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d903      	bls.n	8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x640>)
 800142e:	2264      	movs	r2, #100	; 0x64
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e003      	b.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>
  		  else decl = RxData[1];
 8001434:	4b96      	ldr	r3, [pc, #600]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001436:	785a      	ldrb	r2, [r3, #1]
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x640>)
 800143a:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800143c:	f7ff fcc6 	bl	8000dcc <sendACK>
  		  break;
 8001440:	e1bf      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 12:
  		  //----------- Set max torque -----------//
  		  if(RxData[1] > 100) DAC1->DHR12R1 = 4024;
 8001442:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d904      	bls.n	8001454 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>
 800144a:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x644>)
 800144c:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	e009      	b.n	8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>
  		  else DAC1->DHR12R1 = RxData[1] * 40;
 8001454:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x630>)
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	461a      	mov	r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	461a      	mov	r2, r3
 8001464:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x644>)
 8001466:	609a      	str	r2, [r3, #8]
  		  sendACK();
 8001468:	f7ff fcb0 	bl	8000dcc <sendACK>
  		  break;
 800146c:	e1a9      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 13:
  		  //----------- Reset faults -----------//
  		  OV_FAULT = 0;
 800146e:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x648>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
  		  GD_FAULT = 0;
 8001474:	4b8d      	ldr	r3, [pc, #564]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x64c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
  		  sendACK();
 800147a:	f7ff fca7 	bl	8000dcc <sendACK>
  		  break;
 800147e:	e1a0      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  	  case 100:
  		  //----------- Left current -----------//
  		  mb = adcBuffer[1];
 8001480:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x650>)
 8001482:	885b      	ldrh	r3, [r3, #2]
 8001484:	617b      	str	r3, [r7, #20]
  		  shuntVoltage = (801 * mb) / 20;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f240 3221 	movw	r2, #801	; 0x321
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	4a88      	ldr	r2, [pc, #544]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x654>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  		  current = (shuntVoltage / 10000.0);
 800149a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149c:	f7fe ffd6 	bl	800044c <__aeabi_ui2d>
 80014a0:	a379      	add	r3, pc, #484	; (adr r3, 8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x628>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f975 	bl	8000794 <__aeabi_ddiv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	4618      	mov	r0, r3
 80014b0:	4621      	mov	r1, r4
 80014b2:	f7ff fb27 	bl	8000b04 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  		  currentMSB = current;
 80014ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c2:	edc7 7a00 	vstr	s15, [r7]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  		  currentLSB = (current - currentMSB)*100;
 80014cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x658>
 80014e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ec:	edc7 7a00 	vstr	s15, [r7]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  	  	  data[1] = currentMSB;
 80014f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fa:	737b      	strb	r3, [r7, #13]
  	  	  data[2] = currentLSB;
 80014fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001500:	73bb      	strb	r3, [r7, #14]
  	  	  TxMessage.StdId = 0;
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 8001508:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 800150e:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 8001514:	4b69      	ldr	r3, [pc, #420]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001516:	2203      	movs	r2, #3
 8001518:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 800151a:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 800151c:	2200      	movs	r2, #0
 800151e:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	f107 020c 	add.w	r2, r7, #12
 8001528:	4964      	ldr	r1, [pc, #400]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f002 fd32 	bl	8003f94 <HAL_CAN_AddTxMessage>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 813a 	beq.w	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x74c>
  	  		  Error_Handler();
 8001538:	f001 f894 	bl	8002664 <Error_Handler>
  	  	  }
  		  break;
 800153c:	e136      	b.n	80017ac <HAL_CAN_RxFifo0MsgPendingCallback+0x74c>
  	  case 101:
  		  //----------- Right current -----------//
  		  mb = adcBuffer[2];
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x650>)
 8001540:	889b      	ldrh	r3, [r3, #4]
 8001542:	617b      	str	r3, [r7, #20]
  		  shuntVoltage = (801 * mb) / 20;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f240 3221 	movw	r2, #801	; 0x321
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x654>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  		  current = (shuntVoltage / 10000.0);
 8001558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800155a:	f7fe ff77 	bl	800044c <__aeabi_ui2d>
 800155e:	a34a      	add	r3, pc, #296	; (adr r3, 8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x628>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f916 	bl	8000794 <__aeabi_ddiv>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4618      	mov	r0, r3
 800156e:	4621      	mov	r1, r4
 8001570:	f7ff fac8 	bl	8000b04 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  		  currentMSB = current;
 8001578:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800157c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001580:	edc7 7a00 	vstr	s15, [r7]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  		  currentLSB = (current - currentMSB)*100;
 800158a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001596:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x658>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015aa:	edc7 7a00 	vstr	s15, [r7]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  		  data[1] = currentMSB;
 80015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b8:	737b      	strb	r3, [r7, #13]
  		  data[2] = currentLSB;
 80015ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015be:	73bb      	strb	r3, [r7, #14]
  	  	  TxMessage.StdId = 0;
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  	  	  TxMessage.IDE = CAN_ID_STD;
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  	  	  TxMessage.RTR = CAN_RTR_DATA;
 80015cc:	4b3b      	ldr	r3, [pc, #236]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  	  	  TxMessage.DLC = 3;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	611a      	str	r2, [r3, #16]
  	  	  TxMessage.TransmitGlobalTime = DISABLE;
 80015d8:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	751a      	strb	r2, [r3, #20]
  	  	  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f002 fcd3 	bl	8003f94 <HAL_CAN_AddTxMessage>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80dd 	beq.w	80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>
  	  		  Error_Handler();
 80015f6:	f001 f835 	bl	8002664 <Error_Handler>
  	  	  }
  		  break;
 80015fa:	e0d9      	b.n	80017b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>
  	  case 102:
  		  //----------- Battery voltage -----------//
  		  voltage = getInputVoltage();
 80015fc:	f7ff fbac 	bl	8000d58 <getInputVoltage>
 8001600:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  		  voltageMSB = voltage;
 8001604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160c:	edc7 7a00 	vstr	s15, [r7]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  		  voltageLSB = (voltage - voltageMSB) * 100;
 8001616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x658>
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001636:	edc7 7a00 	vstr	s15, [r7]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  		  data[1] = voltageMSB;
 8001640:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001644:	737b      	strb	r3, [r7, #13]
  		  data[2] = voltageLSB;
 8001646:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800164a:	73bb      	strb	r3, [r7, #14]
  		  TxMessage.StdId = 0;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 3;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001660:	2203      	movs	r2, #3
 8001662:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001666:	2200      	movs	r2, #0
 8001668:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	f107 020c 	add.w	r2, r7, #12
 8001672:	4912      	ldr	r1, [pc, #72]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x65c>)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f002 fc8d 	bl	8003f94 <HAL_CAN_AddTxMessage>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8099 	beq.w	80017b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x754>
  			  Error_Handler();
 8001682:	f000 ffef 	bl	8002664 <Error_Handler>
  		  }
  		  break;
 8001686:	e095      	b.n	80017b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x754>
 8001688:	00000000 	.word	0x00000000
 800168c:	40c38800 	.word	0x40c38800
 8001690:	20000344 	.word	0x20000344
 8001694:	20000004 	.word	0x20000004
 8001698:	20000008 	.word	0x20000008
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000001 	.word	0x20000001
 80016a4:	40007400 	.word	0x40007400
 80016a8:	2000004d 	.word	0x2000004d
 80016ac:	2000004c 	.word	0x2000004c
 80016b0:	200000ac 	.word	0x200000ac
 80016b4:	cccccccd 	.word	0xcccccccd
 80016b8:	42c80000 	.word	0x42c80000
 80016bc:	20000398 	.word	0x20000398
  	  case 103:
  		  //----------- Left speed -----------//
  		  data[1] = speed_left;
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x780>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	737b      	strb	r3, [r7, #13]
  		  TxMessage.StdId = 0;
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 2;
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016da:	2202      	movs	r2, #2
 80016dc:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	493d      	ldr	r1, [pc, #244]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f002 fc50 	bl	8003f94 <HAL_CAN_AddTxMessage>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d05e      	beq.n	80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x758>
  		  	Error_Handler();
 80016fa:	f000 ffb3 	bl	8002664 <Error_Handler>
  		  }
  		  break;
 80016fe:	e05b      	b.n	80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x758>
  	  case 104:
  		  //----------- Right speed -----------//
  		  data[1] = pid_pwm_target_left / 2.66;
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x788>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fea1 	bl	800044c <__aeabi_ui2d>
 800170a:	a333      	add	r3, pc, #204	; (adr r3, 80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x778>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7ff f840 	bl	8000794 <__aeabi_ddiv>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4618      	mov	r0, r3
 800171a:	4621      	mov	r1, r4
 800171c:	f7ff f9d2 	bl	8000ac4 <__aeabi_d2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	737b      	strb	r3, [r7, #13]
  		  TxMessage.StdId = 0;
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 2;
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800173a:	2202      	movs	r2, #2
 800173c:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001740:	2200      	movs	r2, #0
 8001742:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f002 fc20 	bl	8003f94 <HAL_CAN_AddTxMessage>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d030      	beq.n	80017bc <HAL_CAN_RxFifo0MsgPendingCallback+0x75c>
  		  	Error_Handler();
 800175a:	f000 ff83 	bl	8002664 <Error_Handler>
  		  }
  		  break;
 800175e:	e02d      	b.n	80017bc <HAL_CAN_RxFifo0MsgPendingCallback+0x75c>
  	  case 105:
  		  //----------- Get Status -----------//
  		  data[1] = OV_FAULT;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x78c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	737b      	strb	r3, [r7, #13]
  		  data[2] = GD_FAULT;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x790>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	73bb      	strb	r3, [r7, #14]
  		  data[3] = TIMEOUT;
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x794>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	73fb      	strb	r3, [r7, #15]
  		  TxMessage.StdId = 0;
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
  		  TxMessage.IDE = CAN_ID_STD;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  		  TxMessage.RTR = CAN_RTR_DATA;
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  		  TxMessage.DLC = 4;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 8001786:	2204      	movs	r2, #4
 8001788:	611a      	str	r2, [r3, #16]
  		  TxMessage.TransmitGlobalTime = DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800178c:	2200      	movs	r2, #0
 800178e:	751a      	strb	r2, [r3, #20]
  		  if (HAL_CAN_AddTxMessage(hcan, &TxMessage, data, &mb) != HAL_OK) {
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	f107 020c 	add.w	r2, r7, #12
 8001798:	4912      	ldr	r1, [pc, #72]	; (80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x784>)
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f002 fbfa 	bl	8003f94 <HAL_CAN_AddTxMessage>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x760>
  		    Error_Handler();
 80017a6:	f000 ff5d 	bl	8002664 <Error_Handler>
  		  }
  		  break;
 80017aa:	e009      	b.n	80017c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x760>
  		  break;
 80017ac:	bf00      	nop
 80017ae:	e008      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  break;
 80017b0:	bf00      	nop
 80017b2:	e006      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  break;
 80017b4:	bf00      	nop
 80017b6:	e004      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  break;
 80017b8:	bf00      	nop
 80017ba:	e002      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  break;
 80017bc:	bf00      	nop
 80017be:	e000      	b.n	80017c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x762>
  		  break;
 80017c0:	bf00      	nop
  };
  counter ++;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x798>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x798>)
 80017cc:	801a      	strh	r2, [r3, #0]

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	373c      	adds	r7, #60	; 0x3c
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	147ae148 	.word	0x147ae148
 80017dc:	400547ae 	.word	0x400547ae
 80017e0:	20000064 	.word	0x20000064
 80017e4:	20000398 	.word	0x20000398
 80017e8:	20000044 	.word	0x20000044
 80017ec:	2000004d 	.word	0x2000004d
 80017f0:	2000004c 	.word	0x2000004c
 80017f4:	2000004e 	.word	0x2000004e
 80017f8:	20000040 	.word	0x20000040
 80017fc:	00000000 	.word	0x00000000

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001806:	f001 fab1 	bl	8002d6c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180a:	f000 faaf 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180e:	f000 fe8d 	bl	800252c <MX_GPIO_Init>
  MX_DMA_Init();
 8001812:	f000 fe73 	bl	80024fc <MX_DMA_Init>
  MX_ADC1_Init();
 8001816:	f000 fb0d 	bl	8001e34 <MX_ADC1_Init>
  MX_CAN_Init();
 800181a:	f000 fb87 	bl	8001f2c <MX_CAN_Init>
  MX_DAC_Init();
 800181e:	f000 fbeb 	bl	8001ff8 <MX_DAC_Init>
  MX_TIM1_Init();
 8001822:	f000 fc53 	bl	80020cc <MX_TIM1_Init>
  MX_TIM15_Init();
 8001826:	f000 fd03 	bl	8002230 <MX_TIM15_Init>
  MX_TIM16_Init();
 800182a:	f000 fd97 	bl	800235c <MX_TIM16_Init>
  MX_TIM17_Init();
 800182e:	f000 fdbb 	bl	80023a8 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001832:	f000 fc0b 	bl	800204c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001836:	f000 fe31 	bl	800249c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800183a:	f000 fca3 	bl	8002184 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800183e:	2100      	movs	r1, #0
 8001840:	48a9      	ldr	r0, [pc, #676]	; (8001ae8 <main+0x2e8>)
 8001842:	f003 f933 	bl	8004aac <HAL_DAC_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001846:	2100      	movs	r1, #0
 8001848:	48a8      	ldr	r0, [pc, #672]	; (8001aec <main+0x2ec>)
 800184a:	f005 f943 	bl	8006ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800184e:	2104      	movs	r1, #4
 8001850:	48a6      	ldr	r0, [pc, #664]	; (8001aec <main+0x2ec>)
 8001852:	f005 f93f 	bl	8006ad4 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001856:	2100      	movs	r1, #0
 8001858:	48a5      	ldr	r0, [pc, #660]	; (8001af0 <main+0x2f0>)
 800185a:	f001 fd4f 	bl	80032fc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 3);
 800185e:	2203      	movs	r2, #3
 8001860:	49a4      	ldr	r1, [pc, #656]	; (8001af4 <main+0x2f4>)
 8001862:	48a3      	ldr	r0, [pc, #652]	; (8001af0 <main+0x2f0>)
 8001864:	f001 fcae 	bl	80031c4 <HAL_ADC_Start_DMA>
  HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2014      	movs	r0, #20
 800186e:	f003 f8a8 	bl	80049c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001872:	2014      	movs	r0, #20
 8001874:	f003 f8c1 	bl	80049fa <HAL_NVIC_EnableIRQ>
  //SysTick_Config(SystemCoreClock / 800000);
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/800000000);
 8001878:	f004 fe46 	bl	8006508 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b9e      	ldr	r3, [pc, #632]	; (8001af8 <main+0x2f8>)
 8001880:	fba3 2302 	umull	r2, r3, r3, r2
 8001884:	0f1b      	lsrs	r3, r3, #28
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f8c5 	bl	8004a16 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800188c:	2004      	movs	r0, #4
 800188e:	f003 f8cf 	bl	8004a30 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	f04f 30ff 	mov.w	r0, #4294967295
 800189a:	f003 f892 	bl	80049c2 <HAL_NVIC_SetPriority>
  DAC1->DHR12R1 = 4000;
 800189e:	4b97      	ldr	r3, [pc, #604]	; (8001afc <main+0x2fc>)
 80018a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80018a4:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Start_IT(&htim1);
 80018a6:	4896      	ldr	r0, [pc, #600]	; (8001b00 <main+0x300>)
 80018a8:	f005 f868 	bl	800697c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80018ac:	4895      	ldr	r0, [pc, #596]	; (8001b04 <main+0x304>)
 80018ae:	f005 f865 	bl	800697c <HAL_TIM_Base_Start_IT>
  setPWMLeft(400);
 80018b2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018b6:	f7ff fb41 	bl	8000f3c <setPWMLeft>
  setPWMRight(400);
 80018ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018be:	f7ff fb85 	bl	8000fcc <setPWMRight>
  initPID(0.3, 3.0 ,0,0);
 80018c2:	2000      	movs	r0, #0
 80018c4:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8001b08 <main+0x308>
 80018c8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018cc:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8001b0c <main+0x30c>
 80018d0:	f7ff f968 	bl	8000ba4 <initPID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  timertick = HAL_GetTick();
 80018d4:	f001 faa4 	bl	8002e20 <HAL_GetTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b8c      	ldr	r3, [pc, #560]	; (8001b10 <main+0x310>)
 80018de:	601a      	str	r2, [r3, #0]
	  if(OV_FAULT == 1)
 80018e0:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <main+0x314>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d115      	bne.n	8001914 <main+0x114>
	  {
		  setPWMLeft(400);
 80018e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018ec:	f7ff fb26 	bl	8000f3c <setPWMLeft>
	  	  setPWMRight(400);
 80018f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018f4:	f7ff fb6a 	bl	8000fcc <setPWMRight>
	   	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	4886      	ldr	r0, [pc, #536]	; (8001b18 <main+0x318>)
 80018fe:	f003 fbd7 	bl	80050b0 <HAL_GPIO_WritePin>
	   	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	4884      	ldr	r0, [pc, #528]	; (8001b18 <main+0x318>)
 8001908:	f003 fbd2 	bl	80050b0 <HAL_GPIO_WritePin>
	   	  HAL_Delay(100);
 800190c:	2064      	movs	r0, #100	; 0x64
 800190e:	f001 fa93 	bl	8002e38 <HAL_Delay>
 8001912:	e169      	b.n	8001be8 <main+0x3e8>
	  }
	  else if(TIMEOUT == 1)
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <main+0x31c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d129      	bne.n	8001970 <main+0x170>
	  {
		  //Set sleep pins low
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	487d      	ldr	r0, [pc, #500]	; (8001b18 <main+0x318>)
 8001922:	f003 fbc5 	bl	80050b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	487b      	ldr	r0, [pc, #492]	; (8001b18 <main+0x318>)
 800192c:	f003 fbc0 	bl	80050b0 <HAL_GPIO_WritePin>
		  //Set Phase pins low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2140      	movs	r1, #64	; 0x40
 8001934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001938:	f003 fbba 	bl	80050b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f003 fbb4 	bl	80050b0 <HAL_GPIO_WritePin>
		  pwm_left = 400;
 8001948:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <main+0x320>)
 800194a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800194e:	601a      	str	r2, [r3, #0]
		  pwm_target_left = 400;
 8001950:	4b74      	ldr	r3, [pc, #464]	; (8001b24 <main+0x324>)
 8001952:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001956:	601a      	str	r2, [r3, #0]
		  pwm_right = 400;
 8001958:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <main+0x328>)
 800195a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800195e:	601a      	str	r2, [r3, #0]
		  pwm_target_right = 400;
 8001960:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <main+0x32c>)
 8001962:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001966:	601a      	str	r2, [r3, #0]
		  HAL_Delay(100);
 8001968:	2064      	movs	r0, #100	; 0x64
 800196a:	f001 fa65 	bl	8002e38 <HAL_Delay>
 800196e:	e13b      	b.n	8001be8 <main+0x3e8>
	  }
	  else if(pwm_target_left != pwm_left || pwm_target_right != pwm_right)
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <main+0x324>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <main+0x320>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d106      	bne.n	800198a <main+0x18a>
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <main+0x32c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <main+0x328>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	f000 812f 	beq.w	8001be8 <main+0x3e8>
	  {
		  if((timertick - old_timertick_accl) >= accl)
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <main+0x310>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <main+0x330>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <main+0x334>)
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	4293      	cmp	r3, r2
 800199a:	db77      	blt.n	8001a8c <main+0x28c>
		  {
			  old_timertick_accl = timertick;
 800199c:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <main+0x310>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <main+0x330>)
 80019a2:	6013      	str	r3, [r2, #0]
			  if(pwm_left < 400)
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <main+0x320>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019ac:	d21a      	bcs.n	80019e4 <main+0x1e4>
			  {
				  if(pwm_target_left < pwm_left)
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <main+0x324>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <main+0x320>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d22e      	bcs.n	8001a18 <main+0x218>
				  {
					  if((pwm_left - pwm_target_left) > 10) setPIDPWMLeft(pwm_left - 10);
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <main+0x320>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <main+0x324>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b0a      	cmp	r3, #10
 80019c6:	d906      	bls.n	80019d6 <main+0x1d6>
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <main+0x320>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3b0a      	subs	r3, #10
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa26 	bl	8000e20 <setPIDPWMLeft>
 80019d4:	e020      	b.n	8001a18 <main+0x218>
					  else setPIDPWMLeft(pwm_left - 1);
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <main+0x320>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3b01      	subs	r3, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fa1f 	bl	8000e20 <setPIDPWMLeft>
 80019e2:	e019      	b.n	8001a18 <main+0x218>
				  }
			  }
			  else
			  {
				  if(pwm_target_left > pwm_left)
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <main+0x324>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <main+0x320>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d913      	bls.n	8001a18 <main+0x218>
				  {
					  if((pwm_target_left - pwm_left) > 10) setPIDPWMLeft(pwm_left + 10);
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <main+0x324>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <main+0x320>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d906      	bls.n	8001a0c <main+0x20c>
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <main+0x320>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	330a      	adds	r3, #10
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa0b 	bl	8000e20 <setPIDPWMLeft>
 8001a0a:	e005      	b.n	8001a18 <main+0x218>
					  else setPIDPWMLeft(pwm_left + 1);
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <main+0x320>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fa04 	bl	8000e20 <setPIDPWMLeft>
				  }
			  }
			  if(pwm_right < 400)
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <main+0x328>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a20:	d21a      	bcs.n	8001a58 <main+0x258>
			  {
				  if(pwm_target_right < pwm_right)
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <main+0x32c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <main+0x328>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d22e      	bcs.n	8001a8c <main+0x28c>
				  {
					  if((pwm_right - pwm_target_right) > 10) setPIDPWMRight(pwm_right - 10);
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <main+0x328>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <main+0x32c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b0a      	cmp	r3, #10
 8001a3a:	d906      	bls.n	8001a4a <main+0x24a>
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <main+0x328>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3b0a      	subs	r3, #10
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fa34 	bl	8000eb0 <setPIDPWMRight>
 8001a48:	e020      	b.n	8001a8c <main+0x28c>
					  else setPIDPWMRight(pwm_right - 1);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <main+0x328>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa2d 	bl	8000eb0 <setPIDPWMRight>
 8001a56:	e019      	b.n	8001a8c <main+0x28c>
				  }
			  }
			  else
			  {
				  if(pwm_target_right > pwm_right)
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <main+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <main+0x328>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d913      	bls.n	8001a8c <main+0x28c>
				  {
					  if((pwm_target_right - pwm_right) > 10) setPIDPWMRight(pwm_right + 10);
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <main+0x32c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <main+0x328>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d906      	bls.n	8001a80 <main+0x280>
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <main+0x328>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330a      	adds	r3, #10
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa19 	bl	8000eb0 <setPIDPWMRight>
 8001a7e:	e005      	b.n	8001a8c <main+0x28c>
					  else setPIDPWMRight(pwm_right + 1);
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <main+0x328>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fa12 	bl	8000eb0 <setPIDPWMRight>
				  }
			  }
		  }
		  if((timertick - old_timertick_decl) >= decl)
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <main+0x310>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <main+0x338>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <main+0x33c>)
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	f2c0 80a4 	blt.w	8001be8 <main+0x3e8>
		  {
			  old_timertick_decl = timertick;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <main+0x310>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <main+0x338>)
 8001aa6:	6013      	str	r3, [r2, #0]
			  if(pwm_left < 400)
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <main+0x320>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001ab0:	d246      	bcs.n	8001b40 <main+0x340>
			  {
				  if(pwm_target_left > pwm_left)
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <main+0x324>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <main+0x320>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d95a      	bls.n	8001b74 <main+0x374>
				  {
					  if((pwm_target_left - pwm_left) > 10) setPIDPWMLeft(pwm_left + 10);
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <main+0x324>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <main+0x320>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	d906      	bls.n	8001ada <main+0x2da>
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <main+0x320>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	330a      	adds	r3, #10
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f9a4 	bl	8000e20 <setPIDPWMLeft>
 8001ad8:	e04c      	b.n	8001b74 <main+0x374>
					  else setPIDPWMLeft(pwm_left + 1);
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <main+0x320>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f99d 	bl	8000e20 <setPIDPWMLeft>
 8001ae6:	e045      	b.n	8001b74 <main+0x374>
 8001ae8:	20000294 	.word	0x20000294
 8001aec:	20000100 	.word	0x20000100
 8001af0:	200001c0 	.word	0x200001c0
 8001af4:	200000ac 	.word	0x200000ac
 8001af8:	55e63b89 	.word	0x55e63b89
 8001afc:	40007400 	.word	0x40007400
 8001b00:	200002f4 	.word	0x200002f4
 8001b04:	2000034c 	.word	0x2000034c
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	3e99999a 	.word	0x3e99999a
 8001b10:	20000050 	.word	0x20000050
 8001b14:	2000004d 	.word	0x2000004d
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	2000004e 	.word	0x2000004e
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	20000004 	.word	0x20000004
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000054 	.word	0x20000054
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000058 	.word	0x20000058
 8001b3c:	20000001 	.word	0x20000001
				  }
			  }
			  else
			  {
				  if(pwm_target_left < pwm_left)
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <main+0x528>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <main+0x52c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d213      	bcs.n	8001b74 <main+0x374>
				  {
				  	  if((pwm_left - pwm_target_left) > 10) setPIDPWMLeft(pwm_left - 10);
 8001b4c:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <main+0x52c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <main+0x528>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d906      	bls.n	8001b68 <main+0x368>
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <main+0x52c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3b0a      	subs	r3, #10
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f95d 	bl	8000e20 <setPIDPWMLeft>
 8001b66:	e005      	b.n	8001b74 <main+0x374>
				  	  else setPIDPWMLeft(pwm_left - 1);
 8001b68:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <main+0x52c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f956 	bl	8000e20 <setPIDPWMLeft>
				  }
			  }
			  if(pwm_right < 400)
 8001b74:	4b6e      	ldr	r3, [pc, #440]	; (8001d30 <main+0x530>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001b7c:	d21a      	bcs.n	8001bb4 <main+0x3b4>
			  {
				  if(pwm_target_right > pwm_right)
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <main+0x534>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <main+0x530>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d92e      	bls.n	8001be8 <main+0x3e8>
				  {
				  	  if((pwm_target_right - pwm_right) > 10) setPIDPWMRight(pwm_right + 10);
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <main+0x534>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <main+0x530>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b0a      	cmp	r3, #10
 8001b96:	d906      	bls.n	8001ba6 <main+0x3a6>
 8001b98:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <main+0x530>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	330a      	adds	r3, #10
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f986 	bl	8000eb0 <setPIDPWMRight>
 8001ba4:	e020      	b.n	8001be8 <main+0x3e8>
				  	  else setPIDPWMRight(pwm_right + 1);
 8001ba6:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <main+0x530>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f97f 	bl	8000eb0 <setPIDPWMRight>
 8001bb2:	e019      	b.n	8001be8 <main+0x3e8>
				  }
			  }
			  else
			  {
				  if(pwm_target_right < pwm_right)
 8001bb4:	4b5f      	ldr	r3, [pc, #380]	; (8001d34 <main+0x534>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <main+0x530>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d213      	bcs.n	8001be8 <main+0x3e8>
				  {
					  if((pwm_right - pwm_target_right) > 10) setPIDPWMRight(pwm_right - 10);
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <main+0x530>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <main+0x534>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d906      	bls.n	8001bdc <main+0x3dc>
 8001bce:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <main+0x530>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3b0a      	subs	r3, #10
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f96b 	bl	8000eb0 <setPIDPWMRight>
 8001bda:	e005      	b.n	8001be8 <main+0x3e8>
					  else setPIDPWMRight(pwm_right - 1);
 8001bdc:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <main+0x530>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f964 	bl	8000eb0 <setPIDPWMRight>
				  }
			  }
		  }
  	  }
  	  float inputVoltage = getInputVoltage();
 8001be8:	f7ff f8b6 	bl	8000d58 <getInputVoltage>
 8001bec:	ed87 0a01 	vstr	s0, [r7, #4]
  	  if(inputVoltage > OVERVOLTAGE && OV_FAULT == 0)
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fc4d 	bl	8000490 <__aeabi_f2d>
 8001bf6:	a348      	add	r3, pc, #288	; (adr r3, 8001d18 <main+0x518>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe ff30 	bl	8000a60 <__aeabi_dcmpgt>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <main+0x414>
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <main+0x538>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <main+0x414>
  	  {
  		  OV_FAULT = 1;
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <main+0x538>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) || !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9)))
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	4848      	ldr	r0, [pc, #288]	; (8001d3c <main+0x53c>)
 8001c1a:	f003 fa31 	bl	8005080 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <main+0x434>
 8001c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c28:	4844      	ldr	r0, [pc, #272]	; (8001d3c <main+0x53c>)
 8001c2a:	f003 fa29 	bl	8005080 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d103      	bne.n	8001c3c <main+0x43c>
  	  {
  		  GD_FAULT = 1;
 8001c34:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <main+0x540>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e002      	b.n	8001c42 <main+0x442>
  	  }
  	  else{
  		  GD_FAULT = 0;
 8001c3c:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <main+0x540>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((timertick - timeout_timertick) >= 5000)
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <main+0x544>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <main+0x548>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c50:	4293      	cmp	r3, r2
 8001c52:	dd03      	ble.n	8001c5c <main+0x45c>
  	  {
  		  TIMEOUT = 1;
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <main+0x54c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e002      	b.n	8001c62 <main+0x462>
  	  }
  	  else {
  		  TIMEOUT = 0;
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <main+0x54c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
  	  }
  	  if((timertick - temp_timertick) >= 100)
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <main+0x544>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <main+0x550>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b63      	cmp	r3, #99	; 0x63
 8001c6e:	f77f ae31 	ble.w	80018d4 <main+0xd4>
  	  {
  		  speed_left = TIM1 -> CNT;
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <main+0x554>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <main+0x558>)
 8001c7a:	701a      	strb	r2, [r3, #0]
  		  speed_right = TIM2 -> CNT;
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <main+0x55c>)
 8001c86:	701a      	strb	r2, [r3, #0]
  		  TIM1 -> CNT = 0;
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <main+0x554>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  		  TIM2 -> CNT = 0;
 8001c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  		  temp_timertick = timertick;
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <main+0x544>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <main+0x550>)
 8001c9c:	6013      	str	r3, [r2, #0]
  		  int pidresult = calculatePIDLeft(speed_left, pid_pwm_target_left / 2.66);
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <main+0x558>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <main+0x560>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbcf 	bl	800044c <__aeabi_ui2d>
 8001cae:	a31c      	add	r3, pc, #112	; (adr r3, 8001d20 <main+0x520>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fd6e 	bl	8000794 <__aeabi_ddiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f7fe fed8 	bl	8000a74 <__aeabi_d2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f7fe ff8f 	bl	8000bec <calculatePIDLeft>
 8001cce:	6038      	str	r0, [r7, #0]
  		  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pidresult);
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <main+0x564>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
  		  pidresult = calculatePIDRight(speed_right, pid_pwm_target_right / 2.66);
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <main+0x55c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461d      	mov	r5, r3
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <main+0x568>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbb2 	bl	800044c <__aeabi_ui2d>
 8001ce8:	a30d      	add	r3, pc, #52	; (adr r3, 8001d20 <main+0x520>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fd51 	bl	8000794 <__aeabi_ddiv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f7fe febb 	bl	8000a74 <__aeabi_d2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7fe ffc6 	bl	8000c94 <calculatePIDRight>
 8001d08:	6038      	str	r0, [r7, #0]
  		  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, pidresult);
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <main+0x564>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8001d12:	e5df      	b.n	80018d4 <main+0xd4>
 8001d14:	f3af 8000 	nop.w
 8001d18:	33333333 	.word	0x33333333
 8001d1c:	403d3333 	.word	0x403d3333
 8001d20:	147ae148 	.word	0x147ae148
 8001d24:	400547ae 	.word	0x400547ae
 8001d28:	20000004 	.word	0x20000004
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000008 	.word	0x20000008
 8001d38:	2000004d 	.word	0x2000004d
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	2000004c 	.word	0x2000004c
 8001d44:	20000050 	.word	0x20000050
 8001d48:	20000060 	.word	0x20000060
 8001d4c:	2000004e 	.word	0x2000004e
 8001d50:	2000005c 	.word	0x2000005c
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	20000064 	.word	0x20000064
 8001d5c:	20000065 	.word	0x20000065
 8001d60:	20000044 	.word	0x20000044
 8001d64:	20000100 	.word	0x20000100
 8001d68:	20000048 	.word	0x20000048

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09c      	sub	sp, #112	; 0x70
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 f912 	bl	8007fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2234      	movs	r2, #52	; 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f006 f904 	bl	8007fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da4:	2310      	movs	r3, #16
 8001da6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da8:	2302      	movs	r3, #2
 8001daa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dac:	2300      	movs	r3, #0
 8001dae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001db0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fab6 	bl	800532c <HAL_RCC_OscConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001dc6:	f000 fc4d 	bl	8002664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dca:	230f      	movs	r3, #15
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001dd2:	2390      	movs	r3, #144	; 0x90
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f9a9 	bl	800613c <HAL_RCC_ClockConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001df0:	f000 fc38 	bl	8002664 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <SystemClock_Config+0xc4>)
 8001df6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8001e10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e16:	463b      	mov	r3, r7
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fbc5 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001e24:	f000 fc1e 	bl	8002664 <Error_Handler>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3770      	adds	r7, #112	; 0x70
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	001c10a1 	.word	0x001c10a1

08001e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e7c:	f44f 7260 	mov.w	r2, #896	; 0x380
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e98:	2204      	movs	r2, #4
 8001e9a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea8:	481f      	ldr	r0, [pc, #124]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001eaa:	f001 f805 	bl	8002eb8 <HAL_ADC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8001eb4:	f000 fbd6 	bl	8002664 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001ed6:	f001 fa7b 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ee0:	f000 fbc0 	bl	8002664 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001eec:	2304      	movs	r3, #4
 8001eee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001ef6:	f001 fa6b 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001f00:	f000 fbb0 	bl	8002664 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f04:	2306      	movs	r3, #6
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_ADC1_Init+0xf4>)
 8001f12:	f001 fa5d 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001f1c:	f000 fba2 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200001c0 	.word	0x200001c0

08001f2c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <MX_CAN_Init+0xc8>)
 8001f36:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f4c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001f50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001f7e:	f001 fe00 	bl	8003b82 <HAL_CAN_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001f88:	f000 fb6c 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sf;
    sf.FilterMaskIdHigh = 0xFFFF;
 8001f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f90:	60bb      	str	r3, [r7, #8]
    sf.FilterMaskIdLow = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
    sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
    sf.FilterBank = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
    sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
    sf.FilterActivation = CAN_FILTER_ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	623b      	str	r3, [r7, #32]
    sf.FilterIdLow= 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
    sf.FilterIdHigh = 0x001 << 5;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	603b      	str	r3, [r7, #0]
    if (HAL_CAN_ConfigFilter(&hcan, &sf) != HAL_OK) {
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001fb8:	f001 fede 	bl	8003d78 <HAL_CAN_ConfigFilter>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_CAN_Init+0x9a>
      Error_Handler();
 8001fc2:	f000 fb4f 	bl	8002664 <Error_Handler>
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001fca:	f002 f9d0 	bl	800436e <HAL_CAN_ActivateNotification>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_CAN_Init+0xac>
        Error_Handler();
 8001fd4:	f000 fb46 	bl	8002664 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_CAN_Init+0xc4>)
 8001fda:	f001 ff97 	bl	8003f0c <HAL_CAN_Start>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_CAN_Init+0xbc>
      Error_Handler();
 8001fe4:	f000 fb3e 	bl	8002664 <Error_Handler>



  /* USER CODE END CAN_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000198 	.word	0x20000198
 8001ff4:	40006400 	.word	0x40006400

08001ff8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_DAC_Init+0x4c>)
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <MX_DAC_Init+0x50>)
 800200c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_DAC_Init+0x4c>)
 8002010:	f002 fd2a 	bl	8004a68 <HAL_DAC_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800201a:	f000 fb23 	bl	8002664 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_DAC_Init+0x4c>)
 800202e:	f002 fd74 	bl	8004b1a <HAL_DAC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8002038:	f000 fb14 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000294 	.word	0x20000294
 8002048:	40007400 	.word	0x40007400

0800204c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <MX_I2C1_Init+0x78>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <MX_I2C1_Init+0x7c>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_I2C1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002064:	2201      	movs	r2, #1
 8002066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_I2C1_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_I2C1_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <MX_I2C1_Init+0x74>)
 8002088:	f003 f82a 	bl	80050e0 <HAL_I2C_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002092:	f000 fae7 	bl	8002664 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002096:	2100      	movs	r1, #0
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <MX_I2C1_Init+0x74>)
 800209a:	f003 f8b0 	bl	80051fe <HAL_I2CEx_ConfigAnalogFilter>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a4:	f000 fade 	bl	8002664 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a8:	2100      	movs	r1, #0
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_I2C1_Init+0x74>)
 80020ac:	f003 f8f2 	bl	8005294 <HAL_I2CEx_ConfigDigitalFilter>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020b6:	f000 fad5 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200000b4 	.word	0x200000b4
 80020c4:	40005400 	.word	0x40005400
 80020c8:	2000090e 	.word	0x2000090e

080020cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e2:	463b      	mov	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <MX_TIM1_Init+0xb0>)
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <MX_TIM1_Init+0xb4>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_TIM1_Init+0xb0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <MX_TIM1_Init+0xb0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_TIM1_Init+0xb0>)
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM1_Init+0xb0>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_TIM1_Init+0xb0>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM1_Init+0xb0>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002118:	4818      	ldr	r0, [pc, #96]	; (800217c <MX_TIM1_Init+0xb0>)
 800211a:	f004 fbd7 	bl	80068cc <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 fa9e 	bl	8002664 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002128:	2307      	movs	r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800212c:	2370      	movs	r3, #112	; 0x70
 800212e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4619      	mov	r1, r3
 8002142:	480e      	ldr	r0, [pc, #56]	; (800217c <MX_TIM1_Init+0xb0>)
 8002144:	f004 febc 	bl	8006ec0 <HAL_TIM_SlaveConfigSynchro>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800214e:	f000 fa89 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_TIM1_Init+0xb0>)
 8002164:	f005 fb2e 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800216e:	f000 fa79 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200002f4 	.word	0x200002f4
 8002180:	40012c00 	.word	0x40012c00

08002184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <MX_TIM2_Init+0xa8>)
 80021a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <MX_TIM2_Init+0xa8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <MX_TIM2_Init+0xa8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <MX_TIM2_Init+0xa8>)
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_TIM2_Init+0xa8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <MX_TIM2_Init+0xa8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021cc:	4817      	ldr	r0, [pc, #92]	; (800222c <MX_TIM2_Init+0xa8>)
 80021ce:	f004 fb7d 	bl	80068cc <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021d8:	f000 fa44 	bl	8002664 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80021dc:	2307      	movs	r3, #7
 80021de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80021e0:	2370      	movs	r3, #112	; 0x70
 80021e2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	4619      	mov	r1, r3
 80021f6:	480d      	ldr	r0, [pc, #52]	; (800222c <MX_TIM2_Init+0xa8>)
 80021f8:	f004 fe62 	bl	8006ec0 <HAL_TIM_SlaveConfigSynchro>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002202:	f000 fa2f 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	; (800222c <MX_TIM2_Init+0xa8>)
 8002214:	f005 fad6 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800221e:	f000 fa21 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000034c 	.word	0x2000034c

08002230 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b096      	sub	sp, #88	; 0x58
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	222c      	movs	r2, #44	; 0x2c
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f005 fea1 	bl	8007fa4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <MX_TIM15_Init+0x124>)
 8002264:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <MX_TIM15_Init+0x128>)
 8002266:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <MX_TIM15_Init+0x124>)
 800226a:	2200      	movs	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <MX_TIM15_Init+0x124>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 8002274:	4b37      	ldr	r3, [pc, #220]	; (8002354 <MX_TIM15_Init+0x124>)
 8002276:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800227a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <MX_TIM15_Init+0x124>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <MX_TIM15_Init+0x124>)
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <MX_TIM15_Init+0x124>)
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800228e:	4831      	ldr	r0, [pc, #196]	; (8002354 <MX_TIM15_Init+0x124>)
 8002290:	f004 fbc8 	bl	8006a24 <HAL_TIM_PWM_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800229a:	f000 f9e3 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800229e:	2320      	movs	r3, #32
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80022a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4829      	ldr	r0, [pc, #164]	; (8002354 <MX_TIM15_Init+0x124>)
 80022ae:	f005 fa89 	bl	80077c4 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80022b8:	f000 f9d4 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1200;
 80022c0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ca:	2300      	movs	r3, #0
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	4619      	mov	r1, r3
 80022e2:	481c      	ldr	r0, [pc, #112]	; (8002354 <MX_TIM15_Init+0x124>)
 80022e4:	f004 fcdc 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80022ee:	f000 f9b9 	bl	8002664 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 80022f2:	23c8      	movs	r3, #200	; 0xc8
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022fa:	2204      	movs	r2, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4815      	ldr	r0, [pc, #84]	; (8002354 <MX_TIM15_Init+0x124>)
 8002300:	f004 fcce 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM15_Init+0xde>
  {
    Error_Handler();
 800230a:	f000 f9ab 	bl	8002664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4807      	ldr	r0, [pc, #28]	; (8002354 <MX_TIM15_Init+0x124>)
 8002336:	f005 faab 	bl	8007890 <HAL_TIMEx_ConfigBreakDeadTime>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM15_Init+0x114>
  {
    Error_Handler();
 8002340:	f000 f990 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002344:	4803      	ldr	r0, [pc, #12]	; (8002354 <MX_TIM15_Init+0x124>)
 8002346:	f000 fbc5 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 800234a:	bf00      	nop
 800234c:	3758      	adds	r7, #88	; 0x58
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000100 	.word	0x20000100
 8002358:	40014000 	.word	0x40014000

0800235c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_TIM16_Init+0x44>)
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <MX_TIM16_Init+0x48>)
 8002364:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_TIM16_Init+0x44>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_TIM16_Init+0x44>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_TIM16_Init+0x44>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_TIM16_Init+0x44>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <MX_TIM16_Init+0x44>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_TIM16_Init+0x44>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <MX_TIM16_Init+0x44>)
 800238e:	f004 fa9d 	bl	80068cc <HAL_TIM_Base_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002398:	f000 f964 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200003b0 	.word	0x200003b0
 80023a4:	40014400 	.word	0x40014400

080023a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b092      	sub	sp, #72	; 0x48
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	222c      	movs	r2, #44	; 0x2c
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fdeb 	bl	8007fa4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <MX_TIM17_Init+0xec>)
 80023d0:	4a31      	ldr	r2, [pc, #196]	; (8002498 <MX_TIM17_Init+0xf0>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <MX_TIM17_Init+0xec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <MX_TIM17_Init+0xec>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <MX_TIM17_Init+0xec>)
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <MX_TIM17_Init+0xec>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_TIM17_Init+0xec>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <MX_TIM17_Init+0xec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80023fa:	4826      	ldr	r0, [pc, #152]	; (8002494 <MX_TIM17_Init+0xec>)
 80023fc:	f004 fa66 	bl	80068cc <HAL_TIM_Base_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002406:	f000 f92d 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800240a:	4822      	ldr	r0, [pc, #136]	; (8002494 <MX_TIM17_Init+0xec>)
 800240c:	f004 fb0a 	bl	8006a24 <HAL_TIM_PWM_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002416:	f000 f925 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241a:	2360      	movs	r3, #96	; 0x60
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002426:	2300      	movs	r3, #0
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	4815      	ldr	r0, [pc, #84]	; (8002494 <MX_TIM17_Init+0xec>)
 8002440:	f004 fc2e 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800244a:	f000 f90b 	bl	8002664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002466:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002470:	463b      	mov	r3, r7
 8002472:	4619      	mov	r1, r3
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <MX_TIM17_Init+0xec>)
 8002476:	f005 fa0b 	bl	8007890 <HAL_TIMEx_ConfigBreakDeadTime>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002480:	f000 f8f0 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <MX_TIM17_Init+0xec>)
 8002486:	f000 fb25 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 800248a:	bf00      	nop
 800248c:	3748      	adds	r7, #72	; 0x48
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000014c 	.word	0x2000014c
 8002498:	40014800 	.word	0x40014800

0800249c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <MX_USART1_UART_Init+0x5c>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80024ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_USART1_UART_Init+0x58>)
 80024e0:	f005 fa4e 	bl	8007980 <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024ea:	f000 f8bb 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000210 	.word	0x20000210
 80024f8:	40013800 	.word	0x40013800

080024fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_DMA_Init+0x2c>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <MX_DMA_Init+0x2c>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6153      	str	r3, [r2, #20]
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <MX_DMA_Init+0x2c>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000

0800252c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	4b45      	ldr	r3, [pc, #276]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4a44      	ldr	r2, [pc, #272]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800254c:	6153      	str	r3, [r2, #20]
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <MX_GPIO_Init+0x12c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4a3e      	ldr	r2, [pc, #248]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	6153      	str	r3, [r2, #20]
 8002566:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6153      	str	r3, [r2, #20]
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <MX_GPIO_Init+0x12c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	21c0      	movs	r1, #192	; 0xc0
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002592:	f002 fd8d 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259c:	482f      	ldr	r0, [pc, #188]	; (800265c <MX_GPIO_Init+0x130>)
 800259e:	f002 fd87 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	21c0      	movs	r1, #192	; 0xc0
 80025a6:	482e      	ldr	r0, [pc, #184]	; (8002660 <MX_GPIO_Init+0x134>)
 80025a8:	f002 fd82 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c2:	f002 fbeb 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c6:	23c0      	movs	r3, #192	; 0xc0
 80025c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	2301      	movs	r3, #1
 80025cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025ce:	2302      	movs	r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f002 fbdc 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025e4:	2301      	movs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4619      	mov	r1, r3
 80025f6:	4819      	ldr	r0, [pc, #100]	; (800265c <MX_GPIO_Init+0x130>)
 80025f8:	f002 fbd0 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	4811      	ldr	r0, [pc, #68]	; (800265c <MX_GPIO_Init+0x130>)
 8002616:	f002 fbc1 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800261a:	23c0      	movs	r3, #192	; 0xc0
 800261c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002622:	2302      	movs	r3, #2
 8002624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4619      	mov	r1, r3
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <MX_GPIO_Init+0x134>)
 8002632:	f002 fbb3 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002640:	2301      	movs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_GPIO_Init+0x134>)
 800264c:	f002 fba6 	bl	8004d9c <HAL_GPIO_Init>

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	48000400 	.word	0x48000400
 8002660:	48000800 	.word	0x48000800

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800266a:	e7fe      	b.n	800266a <Error_Handler+0x6>

0800266c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_MspInit+0x44>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_MspInit+0x44>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6193      	str	r3, [r2, #24]
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_MspInit+0x44>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_MspInit+0x44>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_MspInit+0x44>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_MspInit+0x44>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d4:	d14c      	bne.n	8002770 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6153      	str	r3, [r2, #20]
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026f8:	6153      	str	r3, [r2, #20]
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_ADC_MspInit+0xc4>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002706:	2307      	movs	r3, #7
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <HAL_ADC_MspInit+0xc8>)
 800271a:	f002 fb3f 	bl	8004d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_ADC_MspInit+0xd0>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002744:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002748:	2220      	movs	r2, #32
 800274a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 800274e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002752:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002754:	480a      	ldr	r0, [pc, #40]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002756:	f002 fa2d 	bl	8004bb4 <HAL_DMA_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8002760:	f7ff ff80 	bl	8002664 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <HAL_ADC_MspInit+0xcc>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	48000800 	.word	0x48000800
 8002780:	200002a8 	.word	0x200002a8
 8002784:	40020008 	.word	0x40020008

08002788 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_CAN_MspInit+0x90>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d131      	bne.n	800280e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	6153      	str	r3, [r2, #20]
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_CAN_MspInit+0x94>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80027ec:	2309      	movs	r3, #9
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fa:	f002 facf 	bl	8004d9c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2014      	movs	r0, #20
 8002804:	f002 f8dd 	bl	80049c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002808:	2014      	movs	r0, #20
 800280a:	f002 f8f6 	bl	80049fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40006400 	.word	0x40006400
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_DAC_MspInit+0x74>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d124      	bne.n	800288c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_DAC_MspInit+0x78>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_DAC_MspInit+0x78>)
 8002848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_DAC_MspInit+0x78>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_DAC_MspInit+0x78>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_DAC_MspInit+0x78>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	6153      	str	r3, [r2, #20]
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_DAC_MspInit+0x78>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002872:	2310      	movs	r3, #16
 8002874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002876:	2303      	movs	r3, #3
 8002878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f002 fa88 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40007400 	.word	0x40007400
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_I2C_MspInit+0xb8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d145      	bne.n	800294a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c8:	6153      	str	r3, [r2, #20]
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6153      	str	r3, [r2, #20]
 80028e2:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f4:	2312      	movs	r3, #18
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002900:	2304      	movs	r3, #4
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f002 fa45 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002922:	2304      	movs	r3, #4
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <HAL_I2C_MspInit+0xc0>)
 800292e:	f002 fa35 	bl	8004d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 8002938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_I2C_MspInit+0xbc>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40005400 	.word	0x40005400
 8002958:	40021000 	.word	0x40021000
 800295c:	48000400 	.word	0x48000400

08002960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	; 0x38
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <HAL_TIM_Base_MspInit+0x120>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d128      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	4a3f      	ldr	r2, [pc, #252]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800298c:	6193      	str	r3, [r2, #24]
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029a4:	6153      	str	r3, [r2, #20]
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC4     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029b2:	2310      	movs	r3, #16
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029c2:	2302      	movs	r3, #2
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	4619      	mov	r1, r3
 80029cc:	482e      	ldr	r0, [pc, #184]	; (8002a88 <HAL_TIM_Base_MspInit+0x128>)
 80029ce:	f002 f9e5 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80029d2:	e051      	b.n	8002a78 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d129      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	6153      	str	r3, [r2, #20]
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2c:	f002 f9b6 	bl	8004d9c <HAL_GPIO_Init>
}
 8002a30:	e022      	b.n	8002a78 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM16)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIM_Base_MspInit+0x12c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10c      	bne.n	8002a56 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
}
 8002a54:	e010      	b.n	8002a78 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM17)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_TIM_Base_MspInit+0x130>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10b      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_TIM_Base_MspInit+0x124>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3738      	adds	r7, #56	; 0x38
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000800 	.word	0x48000800
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	40014800 	.word	0x40014800

08002a94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_TIM_PWM_MspInit+0x38>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10b      	bne.n	8002abe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6193      	str	r3, [r2, #24]
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <HAL_TIM_MspPostInit+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d13a      	bne.n	8002b6c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4a30      	ldr	r2, [pc, #192]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	6153      	str	r3, [r2, #20]
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6153      	str	r3, [r2, #20]
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b26:	2308      	movs	r3, #8
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002b36:	2309      	movs	r3, #9
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b44:	f002 f92a 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4816      	ldr	r0, [pc, #88]	; (8002bc0 <HAL_TIM_MspPostInit+0xec>)
 8002b66:	f002 f919 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002b6a:	e021      	b.n	8002bb0 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM17)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIM_MspPostInit+0xf0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d11c      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6153      	str	r3, [r2, #20]
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_TIM_MspPostInit+0xe8>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <HAL_TIM_MspPostInit+0xec>)
 8002bac:	f002 f8f6 	bl	8004d9c <HAL_GPIO_Init>
}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	40014800 	.word	0x40014800

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_UART_MspInit+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d145      	bne.n	8002c76 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6193      	str	r3, [r2, #24]
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c0c:	6153      	str	r3, [r2, #20]
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	6153      	str	r3, [r2, #20]
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_UART_MspInit+0xbc>)
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c32:	2320      	movs	r3, #32
 8002c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c42:	2307      	movs	r3, #7
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480e      	ldr	r0, [pc, #56]	; (8002c88 <HAL_UART_MspInit+0xc0>)
 8002c4e:	f002 f8a5 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c64:	2307      	movs	r3, #7
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c72:	f002 f893 	bl	8004d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40021000 	.word	0x40021000
 8002c88:	48000800 	.word	0x48000800

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd8:	f000 f88e 	bl	8002df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002ce6:	f001 fb68 	bl	80043ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000198 	.word	0x20000198

08002cf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <SystemInit+0x20>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <SystemInit+0x20>)
 8002d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d1c:	480d      	ldr	r0, [pc, #52]	; (8002d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d1e:	490e      	ldr	r1, [pc, #56]	; (8002d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d20:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <LoopForever+0xe>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d34:	4c0b      	ldr	r4, [pc, #44]	; (8002d64 <LoopForever+0x16>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d42:	f7ff ffd7 	bl	8002cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d46:	f005 f909 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d4a:	f7fe fd59 	bl	8001800 <main>

08002d4e <LoopForever>:

LoopForever:
    b LoopForever
 8002d4e:	e7fe      	b.n	8002d4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d58:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002d5c:	08008010 	.word	0x08008010
  ldr r2, =_sbss
 8002d60:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002d64:	2000041c 	.word	0x2000041c

08002d68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_Init+0x28>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_Init+0x28>)
 8002d76:	f043 0310 	orr.w	r3, r3, #16
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	f001 fe15 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f000 f808 	bl	8002d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d88:	f7ff fc70 	bl	800266c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x54>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x58>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fe2d 	bl	8004a16 <HAL_SYSTICK_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00e      	b.n	8002de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d80a      	bhi.n	8002de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f001 fdf5 	bl	80049c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_InitTick+0x5c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000018 	.word	0x20000018
 8002df0:	20000020 	.word	0x20000020
 8002df4:	2000001c 	.word	0x2000001c

08002df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x20>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x24>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_IncTick+0x24>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	20000418 	.word	0x20000418

08002e20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0



	return uwTick;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_GetTick+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000418 	.word	0x20000418

08002e38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7ff ffee 	bl	8002e20 <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d005      	beq.n	8002e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_Delay+0x40>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e5e:	bf00      	nop
 8002e60:	f7ff ffde 	bl	8002e20 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d8f7      	bhi.n	8002e60 <HAL_Delay+0x28>
  {
  }
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000020 	.word	0x20000020

08002e7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b09a      	sub	sp, #104	; 0x68
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e169      	b.n	80031ac <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d176      	bne.n	8002fd8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d152      	bne.n	8002f98 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fbd1 	bl	80026b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d13b      	bne.n	8002f98 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fdcf 	bl	8003ac4 <ADC_Disable>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d12f      	bne.n	8002f98 <HAL_ADC_Init+0xe0>
 8002f38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d12b      	bne.n	8002f98 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f48:	f023 0302 	bic.w	r3, r3, #2
 8002f4c:	f043 0202 	orr.w	r2, r3, #2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f62:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f72:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f74:	4b8f      	ldr	r3, [pc, #572]	; (80031b4 <HAL_ADC_Init+0x2fc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a8f      	ldr	r2, [pc, #572]	; (80031b8 <HAL_ADC_Init+0x300>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9a      	lsrs	r2, r3, #18
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f8a:	e002      	b.n	8002f92 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f9      	bne.n	8002f8c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb4:	d110      	bne.n	8002fd8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f023 0312 	bic.w	r3, r3, #18
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 80d6 	bne.w	8003192 <HAL_ADC_Init+0x2da>
 8002fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 80d1 	bne.w	8003192 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 80c9 	bne.w	8003192 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_ADC_Init+0x304>)
 8003012:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d108      	bne.n	8003038 <HAL_ADC_Init+0x180>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_Init+0x180>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_ADC_Init+0x182>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11c      	bne.n	8003078 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800303e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_ADC_Init+0x1a8>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_ADC_Init+0x1a8>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_ADC_Init+0x1aa>
 8003060:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	431a      	orrs	r2, r3
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7e5b      	ldrb	r3, [r3, #25]
 800307c:	035b      	lsls	r3, r3, #13
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003082:	2a01      	cmp	r2, #1
 8003084:	d002      	beq.n	800308c <HAL_ADC_Init+0x1d4>
 8003086:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800308a:	e000      	b.n	800308e <HAL_ADC_Init+0x1d6>
 800308c:	2200      	movs	r2, #0
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4313      	orrs	r3, r2
 800309c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800309e:	4313      	orrs	r3, r2
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11b      	bne.n	80030e4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7e5b      	ldrb	r3, [r3, #25]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	3b01      	subs	r3, #1
 80030ba:	045a      	lsls	r2, r3, #17
 80030bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030be:	4313      	orrs	r3, r2
 80030c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c4:	663b      	str	r3, [r7, #96]	; 0x60
 80030c6:	e00d      	b.n	80030e4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d007      	beq.n	80030fc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	4313      	orrs	r3, r2
 80030f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f8:	4313      	orrs	r3, r2
 80030fa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d114      	bne.n	8003134 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003118:	f023 0302 	bic.w	r3, r3, #2
 800311c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e1b      	ldrb	r3, [r3, #24]
 8003122:	039a      	lsls	r2, r3, #14
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4313      	orrs	r3, r2
 800312e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003130:	4313      	orrs	r3, r2
 8003132:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <HAL_ADC_Init+0x308>)
 800313c:	4013      	ands	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10c      	bne.n	800316a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f023 010f 	bic.w	r1, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
 8003168:	e007      	b.n	800317a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020f 	bic.w	r2, r2, #15
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f023 0303 	bic.w	r3, r3, #3
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
 8003190:	e00a      	b.n	80031a8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f023 0312 	bic.w	r3, r3, #18
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80031a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3768      	adds	r7, #104	; 0x68
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000018 	.word	0x20000018
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	50000300 	.word	0x50000300
 80031c0:	fff0c007 	.word	0xfff0c007

080031c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d17e      	bne.n	80032e0 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_Start_DMA+0x2c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e07a      	b.n	80032e6 <HAL_ADC_Start_DMA+0x122>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fc05 	bl	8003a08 <ADC_Enable>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d166      	bne.n	80032d6 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800323e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d106      	bne.n	8003262 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f023 0206 	bic.w	r2, r3, #6
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
 8003260:	e002      	b.n	8003268 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_ADC_Start_DMA+0x12c>)
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_ADC_Start_DMA+0x130>)
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_ADC_Start_DMA+0x134>)
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	221c      	movs	r2, #28
 800328e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0210 	orr.w	r2, r2, #16
 800329e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3340      	adds	r3, #64	; 0x40
 80032ba:	4619      	mov	r1, r3
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f001 fcbf 	bl	8004c42 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0204 	orr.w	r2, r2, #4
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	e006      	b.n	80032e4 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032de:	e001      	b.n	80032e4 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
 80032e2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	0800393d 	.word	0x0800393d
 80032f4:	080039b7 	.word	0x080039b7
 80032f8:	080039d3 	.word	0x080039d3

080032fc <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_ADCEx_Calibration_Start+0x1c>
 8003314:	2302      	movs	r3, #2
 8003316:	e057      	b.n	80033c8 <HAL_ADCEx_Calibration_Start+0xcc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fbcf 	bl	8003ac4 <ADC_Disable>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d146      	bne.n	80033be <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003344:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800335a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800336a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800336c:	f7ff fd58 	bl	8002e20 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003372:	e014      	b.n	800339e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003374:	f7ff fd54 	bl	8002e20 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b0a      	cmp	r3, #10
 8003380:	d90d      	bls.n	800339e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f023 0312 	bic.w	r3, r3, #18
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e014      	b.n	80033c8 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ac:	d0e2      	beq.n	8003374 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b09b      	sub	sp, #108	; 0x6c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x22>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e299      	b.n	8003926 <HAL_ADC_ConfigChannel+0x556>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 827d 	bne.w	8003904 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d81c      	bhi.n	800344c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	461a      	mov	r2, r3
 8003426:	231f      	movs	r3, #31
 8003428:	4093      	lsls	r3, r2
 800342a:	43db      	mvns	r3, r3
 800342c:	4019      	ands	r1, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa00 f203 	lsl.w	r2, r0, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
 800344a:	e063      	b.n	8003514 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b09      	cmp	r3, #9
 8003452:	d81e      	bhi.n	8003492 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	3b1e      	subs	r3, #30
 8003468:	221f      	movs	r2, #31
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	4019      	ands	r1, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	3b1e      	subs	r3, #30
 8003484:	fa00 f203 	lsl.w	r2, r0, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	635a      	str	r2, [r3, #52]	; 0x34
 8003490:	e040      	b.n	8003514 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b0e      	cmp	r3, #14
 8003498:	d81e      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	3b3c      	subs	r3, #60	; 0x3c
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4019      	ands	r1, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	3b3c      	subs	r3, #60	; 0x3c
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38
 80034d6:	e01d      	b.n	8003514 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	3b5a      	subs	r3, #90	; 0x5a
 80034ec:	221f      	movs	r2, #31
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4019      	ands	r1, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	3b5a      	subs	r3, #90	; 0x5a
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 80e5 	bne.w	80036ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d91c      	bls.n	8003566 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6999      	ldr	r1, [r3, #24]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	3b1e      	subs	r3, #30
 800353e:	2207      	movs	r2, #7
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	4019      	ands	r1, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6898      	ldr	r0, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	3b1e      	subs	r3, #30
 8003558:	fa00 f203 	lsl.w	r2, r0, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	619a      	str	r2, [r3, #24]
 8003564:	e019      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6959      	ldr	r1, [r3, #20]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	4019      	ands	r1, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	fa00 f203 	lsl.w	r2, r0, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d84f      	bhi.n	800365c <HAL_ADC_ConfigChannel+0x28c>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d5 	.word	0x080035d5
 80035c8:	080035f7 	.word	0x080035f7
 80035cc:	08003619 	.word	0x08003619
 80035d0:	0800363b 	.word	0x0800363b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035da:	4b99      	ldr	r3, [pc, #612]	; (8003840 <HAL_ADC_ConfigChannel+0x470>)
 80035dc:	4013      	ands	r3, r2
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	0691      	lsls	r1, r2, #26
 80035e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035e6:	430a      	orrs	r2, r1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035f4:	e07e      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035fc:	4b90      	ldr	r3, [pc, #576]	; (8003840 <HAL_ADC_ConfigChannel+0x470>)
 80035fe:	4013      	ands	r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	0691      	lsls	r1, r2, #26
 8003606:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003608:	430a      	orrs	r2, r1
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003614:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003616:	e06d      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_ADC_ConfigChannel+0x470>)
 8003620:	4013      	ands	r3, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	0691      	lsls	r1, r2, #26
 8003628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800362a:	430a      	orrs	r2, r1
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003636:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003638:	e05c      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003640:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <HAL_ADC_ConfigChannel+0x470>)
 8003642:	4013      	ands	r3, r2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	0691      	lsls	r1, r2, #26
 800364a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800364c:	430a      	orrs	r2, r1
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003658:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800365a:	e04b      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	429a      	cmp	r2, r3
 80036da:	d10a      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80036ec:	e001      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80036f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d108      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x344>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x344>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_ADC_ConfigChannel+0x346>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 80ff 	bne.w	800391a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d00f      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	400a      	ands	r2, r1
 800373e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003742:	e049      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	409a      	lsls	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b09      	cmp	r3, #9
 8003764:	d91c      	bls.n	80037a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6999      	ldr	r1, [r3, #24]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	3b1b      	subs	r3, #27
 8003778:	2207      	movs	r2, #7
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	4019      	ands	r1, r3
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6898      	ldr	r0, [r3, #8]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	3b1b      	subs	r3, #27
 8003792:	fa00 f203 	lsl.w	r2, r0, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
 800379e:	e01b      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6959      	ldr	r1, [r3, #20]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	2207      	movs	r2, #7
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4019      	ands	r1, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6898      	ldr	r0, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	fa00 f203 	lsl.w	r2, r0, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_ADC_ConfigChannel+0x474>)
 80037da:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d014      	beq.n	800381a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80037f4:	2b11      	cmp	r3, #17
 80037f6:	d105      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003808:	2b12      	cmp	r3, #18
 800380a:	f040 8086 	bne.w	800391a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800380e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d17f      	bne.n	800391a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10d      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x478>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d106      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x478>
 800383a:	2301      	movs	r3, #1
 800383c:	e005      	b.n	800384a <HAL_ADC_ConfigChannel+0x47a>
 800383e:	bf00      	nop
 8003840:	83fff000 	.word	0x83fff000
 8003844:	50000300 	.word	0x50000300
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d150      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800384e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d010      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x4a0>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x4a0>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_ADC_ConfigChannel+0x4a2>
 8003870:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	d13c      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d11d      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x4ea>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003886:	d118      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003892:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <HAL_ADC_ConfigChannel+0x564>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <HAL_ADC_ConfigChannel+0x568>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9a      	lsrs	r2, r3, #18
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038aa:	e002      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038b8:	e02e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b11      	cmp	r3, #17
 80038c0:	d10b      	bne.n	80038da <HAL_ADC_ConfigChannel+0x50a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ca:	d106      	bne.n	80038da <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80038cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038d8:	e01e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b12      	cmp	r3, #18
 80038e0:	d11a      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038ee:	e013      	b.n	8003918 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003902:	e00a      	b.n	800391a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003918:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003922:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003926:	4618      	mov	r0, r3
 8003928:	376c      	adds	r7, #108	; 0x6c
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000018 	.word	0x20000018
 8003938:	431bde83 	.word	0x431bde83

0800393c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d126      	bne.n	80039a4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800396c:	2b00      	cmp	r3, #0
 800396e:	d115      	bne.n	800399c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fa6d 	bl	8002e7c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80039a2:	e004      	b.n	80039ae <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fa63 	bl	8002e90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fa53 	bl	8002ea4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <ADC_Enable+0x2c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <ADC_Enable+0x2c>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <ADC_Enable+0x2e>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13c      	bne.n	8003ab4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <ADC_Enable+0xb8>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 0210 	orr.w	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e028      	b.n	8003ab6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003a74:	f7ff f9d4 	bl	8002e20 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a7a:	e014      	b.n	8003aa6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a7c:	f7ff f9d0 	bl	8002e20 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d90d      	bls.n	8003aa6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0210 	orr.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d1e3      	bne.n	8003a7c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	8000003f 	.word	0x8000003f

08003ac4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d108      	bne.n	8003af0 <ADC_Disable+0x2c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <ADC_Disable+0x2c>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <ADC_Disable+0x2e>
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d040      	beq.n	8003b78 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030d 	and.w	r3, r3, #13
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10f      	bne.n	8003b24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0202 	orr.w	r2, r2, #2
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b1c:	f7ff f980 	bl	8002e20 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b22:	e022      	b.n	8003b6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e01c      	b.n	8003b7a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b40:	f7ff f96e 	bl	8002e20 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d90d      	bls.n	8003b6a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e007      	b.n	8003b7a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d0e3      	beq.n	8003b40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0ed      	b.n	8003d70 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe fdf1 	bl	8002788 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0202 	bic.w	r2, r2, #2
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb6:	f7ff f933 	bl	8002e20 <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bbc:	e012      	b.n	8003be4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bbe:	f7ff f92f 	bl	8002e20 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b0a      	cmp	r3, #10
 8003bca:	d90b      	bls.n	8003be4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2205      	movs	r2, #5
 8003bdc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0c5      	b.n	8003d70 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c02:	f7ff f90d 	bl	8002e20 <HAL_GetTick>
 8003c06:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c08:	e012      	b.n	8003c30 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c0a:	f7ff f909 	bl	8002e20 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b0a      	cmp	r3, #10
 8003c16:	d90b      	bls.n	8003c30 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2205      	movs	r2, #5
 8003c28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09f      	b.n	8003d70 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0e5      	beq.n	8003c0a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7e1b      	ldrb	r3, [r3, #24]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e007      	b.n	8003c68 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7e5b      	ldrb	r3, [r3, #25]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e007      	b.n	8003c92 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7e9b      	ldrb	r3, [r3, #26]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0220 	bic.w	r2, r2, #32
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7edb      	ldrb	r3, [r3, #27]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0210 	bic.w	r2, r2, #16
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e007      	b.n	8003ce6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0210 	orr.w	r2, r2, #16
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7f1b      	ldrb	r3, [r3, #28]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0208 	orr.w	r2, r2, #8
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0208 	bic.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7f5b      	ldrb	r3, [r3, #29]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0204 	orr.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e007      	b.n	8003d3a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0204 	bic.w	r2, r2, #4
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	ea42 0103 	orr.w	r1, r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d003      	beq.n	8003d9e <HAL_CAN_ConfigFilter+0x26>
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f040 80aa 	bne.w	8003ef2 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	2201      	movs	r2, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	401a      	ands	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d123      	bne.n	8003e20 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003dfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3248      	adds	r2, #72	; 0x48
 8003e00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	3348      	adds	r3, #72	; 0x48
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d122      	bne.n	8003e6e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3248      	adds	r2, #72	; 0x48
 8003e4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e64:	6979      	ldr	r1, [r7, #20]
 8003e66:	3348      	adds	r3, #72	; 0x48
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	401a      	ands	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e88:	e007      	b.n	8003e9a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	401a      	ands	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003eb4:	e007      	b.n	8003ec6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ee4:	f023 0201 	bic.w	r2, r3, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e006      	b.n	8003f00 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d12e      	bne.n	8003f7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fe ff72 	bl	8002e20 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f3e:	e012      	b.n	8003f66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f40:	f7fe ff6e 	bl	8002e20 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b0a      	cmp	r3, #10
 8003f4c:	d90b      	bls.n	8003f66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e012      	b.n	8003f8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e006      	b.n	8003f8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fb2:	7ffb      	ldrb	r3, [r7, #31]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d003      	beq.n	8003fc0 <HAL_CAN_AddTxMessage+0x2c>
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	f040 80b8 	bne.w	8004130 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80a0 	beq.w	8004120 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	0e1b      	lsrs	r3, r3, #24
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d907      	bls.n	8004000 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e09e      	b.n	800413e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004000:	2201      	movs	r2, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	409a      	lsls	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	6809      	ldr	r1, [r1, #0]
 8004020:	431a      	orrs	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3318      	adds	r3, #24
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	440b      	add	r3, r1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e00f      	b.n	800404e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004038:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004042:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3318      	adds	r3, #24
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	440b      	add	r3, r1
 800404c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	3318      	adds	r3, #24
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	440b      	add	r3, r1
 800405e:	3304      	adds	r3, #4
 8004060:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	7d1b      	ldrb	r3, [r3, #20]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d111      	bne.n	800408e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3318      	adds	r3, #24
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	4413      	add	r3, r2
 8004076:	3304      	adds	r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3318      	adds	r3, #24
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	440b      	add	r3, r1
 800408a:	3304      	adds	r3, #4
 800408c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3307      	adds	r3, #7
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	061a      	lsls	r2, r3, #24
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3306      	adds	r3, #6
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3305      	adds	r3, #5
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	4313      	orrs	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	3204      	adds	r2, #4
 80040ae:	7812      	ldrb	r2, [r2, #0]
 80040b0:	4610      	mov	r0, r2
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6811      	ldr	r1, [r2, #0]
 80040b6:	ea43 0200 	orr.w	r2, r3, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	440b      	add	r3, r1
 80040c0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3303      	adds	r3, #3
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	061a      	lsls	r2, r3, #24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3302      	adds	r3, #2
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	4313      	orrs	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	4610      	mov	r0, r2
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	ea43 0200 	orr.w	r2, r3, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80040fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3318      	adds	r3, #24
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3318      	adds	r3, #24
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	440b      	add	r3, r1
 800411a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e00e      	b.n	800413e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e006      	b.n	800413e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800415e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d003      	beq.n	800416e <HAL_CAN_GetRxMessage+0x24>
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b02      	cmp	r3, #2
 800416a:	f040 80f3 	bne.w	8004354 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10e      	bne.n	8004192 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0e7      	b.n	8004362 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0d8      	b.n	8004362 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	331b      	adds	r3, #27
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4413      	add	r3, r2
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0204 	and.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	331b      	adds	r3, #27
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4413      	add	r3, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0d5b      	lsrs	r3, r3, #21
 80041de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	331b      	adds	r3, #27
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	4413      	add	r3, r2
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	331b      	adds	r3, #27
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0202 	and.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	331b      	adds	r3, #27
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4413      	add	r3, r2
 8004222:	3304      	adds	r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	331b      	adds	r3, #27
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b2da      	uxtb	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	331b      	adds	r3, #27
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0a1a      	lsrs	r2, r3, #8
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	4413      	add	r3, r2
 8004298:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0c1a      	lsrs	r2, r3, #16
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	3302      	adds	r3, #2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e1a      	lsrs	r2, r3, #24
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3303      	adds	r3, #3
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0a1a      	lsrs	r2, r3, #8
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	3305      	adds	r3, #5
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0c1a      	lsrs	r2, r3, #16
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3306      	adds	r3, #6
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	4413      	add	r3, r2
 8004318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e1a      	lsrs	r2, r3, #24
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3307      	adds	r3, #7
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0220 	orr.w	r2, r2, #32
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e007      	b.n	8004350 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0220 	orr.w	r2, r2, #32
 800434e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e006      	b.n	8004362 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d002      	beq.n	800438c <HAL_CAN_ActivateNotification+0x1e>
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d109      	bne.n	80043a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6959      	ldr	r1, [r3, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e006      	b.n	80043ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d07c      	beq.n	80044fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f97d 	bl	800471c <HAL_CAN_TxMailbox0CompleteCallback>
 8004422:	e016      	b.n	8004452 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e00c      	b.n	8004452 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e002      	b.n	8004452 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f983 	bl	8004758 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d024      	beq.n	80044a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004464:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f95d 	bl	8004730 <HAL_CAN_TxMailbox1CompleteCallback>
 8004476:	e016      	b.n	80044a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e00c      	b.n	80044a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
 800449e:	e002      	b.n	80044a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f963 	bl	800476c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d024      	beq.n	80044fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f93d 	bl	8004744 <HAL_CAN_TxMailbox2CompleteCallback>
 80044ca:	e016      	b.n	80044fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	e00c      	b.n	80044fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e002      	b.n	80044fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f943 	bl	8004780 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00c      	beq.n	800451e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004514:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2210      	movs	r2, #16
 800451c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2208      	movs	r2, #8
 8004538:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f92a 	bl	8004794 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fc fd81 	bl	8001060 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004578:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2210      	movs	r2, #16
 8004580:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2208      	movs	r2, #8
 800459c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f90c 	bl	80047bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8f3 	bl	80047a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d006      	beq.n	80045e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8f6 	bl	80047d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8ef 	bl	80047e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d075      	beq.n	80046fc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d06c      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03d      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800467e:	2b00      	cmp	r3, #0
 8004680:	d038      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d017      	beq.n	80046bc <HAL_CAN_IRQHandler+0x302>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d804      	bhi.n	800469a <HAL_CAN_IRQHandler+0x2e0>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d009      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x2ee>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d00c      	beq.n	80046b2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004698:	e024      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800469a:	2b50      	cmp	r3, #80	; 0x50
 800469c:	d018      	beq.n	80046d0 <HAL_CAN_IRQHandler+0x316>
 800469e:	2b60      	cmp	r3, #96	; 0x60
 80046a0:	d01b      	beq.n	80046da <HAL_CAN_IRQHandler+0x320>
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d00f      	beq.n	80046c6 <HAL_CAN_IRQHandler+0x30c>
            break;
 80046a6:	e01d      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f043 0308 	orr.w	r3, r3, #8
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046b0:	e018      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f043 0310 	orr.w	r3, r3, #16
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046ba:	e013      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f043 0320 	orr.w	r3, r3, #32
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046c4:	e00e      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046ce:	e009      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046d8:	e004      	b.n	80046e4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2204      	movs	r2, #4
 80046fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f872 	bl	80047f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004828:	4013      	ands	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483e:	4a04      	ldr	r2, [pc, #16]	; (8004850 <__NVIC_SetPriorityGrouping+0x44>)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	60d3      	str	r3, [r2, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <__NVIC_GetPriorityGrouping+0x18>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0307 	and.w	r3, r3, #7
}
 8004862:	4618      	mov	r0, r3
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0b      	blt.n	800489a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <__NVIC_EnableIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	; (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
         );
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d301      	bcc.n	800497e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497a:	2301      	movs	r3, #1
 800497c:	e00f      	b.n	800499e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <SysTick_Config+0x40>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004986:	210f      	movs	r1, #15
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f7ff ff8e 	bl	80048ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <SysTick_Config+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <SysTick_Config+0x40>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff29 	bl	800480c <__NVIC_SetPriorityGrouping>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d4:	f7ff ff3e 	bl	8004854 <__NVIC_GetPriorityGrouping>
 80049d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff8e 	bl	8004900 <NVIC_EncodePriority>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff5d 	bl	80048ac <__NVIC_SetPriority>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ff31 	bl	8004870 <__NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffa2 	bl	8004968 <SysTick_Config>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d106      	bne.n	8004a4c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004a4a:	e005      	b.n	8004a58 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004a52:	f023 0304 	bic.w	r3, r3, #4
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e010 	.word	0xe000e010

08004a68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e014      	b.n	8004aa4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd fec8 	bl	8002820 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	795b      	ldrb	r3, [r3, #5]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_DAC_Start+0x16>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e025      	b.n	8004b0e <HAL_DAC_Start+0x62>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004aec:	2b3c      	cmp	r3, #60	; 0x3c
 8004aee:	d107      	bne.n	8004b00 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	795b      	ldrb	r3, [r3, #5]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_DAC_ConfigChannel+0x20>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e036      	b.n	8004ba8 <HAL_DAC_ConfigChannel+0x8e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2202      	movs	r2, #2
 8004b44:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004b4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	22c0      	movs	r2, #192	; 0xc0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43da      	mvns	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e037      	b.n	8004c3a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004be0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004be4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f89d 	bl	8004d5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}  
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_DMA_Start_IT+0x20>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e04a      	b.n	8004cf8 <HAL_DMA_Start_IT+0xb6>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d13a      	bne.n	8004cea <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f831 	bl	8004d00 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 020e 	orr.w	r2, r2, #14
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e00f      	b.n	8004cd8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 020a 	orr.w	r2, r2, #10
 8004cc6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e005      	b.n	8004cf6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d108      	bne.n	8004d40 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d3e:	e007      	b.n	8004d50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <DMA_CalcBaseAndBitshift+0x34>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <DMA_CalcBaseAndBitshift+0x38>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	009a      	lsls	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <DMA_CalcBaseAndBitshift+0x3c>)
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	bffdfff8 	.word	0xbffdfff8
 8004d94:	cccccccd 	.word	0xcccccccd
 8004d98:	40020000 	.word	0x40020000

08004d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004daa:	e14e      	b.n	800504a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2101      	movs	r1, #1
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8140 	beq.w	8005044 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d00b      	beq.n	8004de4 <HAL_GPIO_Init+0x48>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d007      	beq.n	8004de4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd8:	2b11      	cmp	r3, #17
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b12      	cmp	r3, #18
 8004de2:	d130      	bne.n	8004e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2203      	movs	r2, #3
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 0201 	and.w	r2, r3, #1
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0xea>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b12      	cmp	r3, #18
 8004e84:	d123      	bne.n	8004ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	08da      	lsrs	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3208      	adds	r2, #8
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	6939      	ldr	r1, [r7, #16]
 8004eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 809a 	beq.w	8005044 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <HAL_GPIO_Init+0x2cc>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4a54      	ldr	r2, [pc, #336]	; (8005068 <HAL_GPIO_Init+0x2cc>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6193      	str	r3, [r2, #24]
 8004f1c:	4b52      	ldr	r3, [pc, #328]	; (8005068 <HAL_GPIO_Init+0x2cc>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f28:	4a50      	ldr	r2, [pc, #320]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	3302      	adds	r3, #2
 8004f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	220f      	movs	r2, #15
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43db      	mvns	r3, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f52:	d013      	beq.n	8004f7c <HAL_GPIO_Init+0x1e0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a46      	ldr	r2, [pc, #280]	; (8005070 <HAL_GPIO_Init+0x2d4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00d      	beq.n	8004f78 <HAL_GPIO_Init+0x1dc>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a45      	ldr	r2, [pc, #276]	; (8005074 <HAL_GPIO_Init+0x2d8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <HAL_GPIO_Init+0x1d8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a44      	ldr	r2, [pc, #272]	; (8005078 <HAL_GPIO_Init+0x2dc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_GPIO_Init+0x1d4>
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <HAL_GPIO_Init+0x1e2>
 8004f70:	2305      	movs	r3, #5
 8004f72:	e004      	b.n	8004f7e <HAL_GPIO_Init+0x1e2>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e002      	b.n	8004f7e <HAL_GPIO_Init+0x1e2>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_GPIO_Init+0x1e2>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	f002 0203 	and.w	r2, r2, #3
 8004f84:	0092      	lsls	r2, r2, #2
 8004f86:	4093      	lsls	r3, r2
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f8e:	4937      	ldr	r1, [pc, #220]	; (800506c <HAL_GPIO_Init+0x2d0>)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	3302      	adds	r3, #2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9c:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fc0:	4a2e      	ldr	r2, [pc, #184]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fc6:	4b2d      	ldr	r3, [pc, #180]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fea:	4a24      	ldr	r2, [pc, #144]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ff0:	4b22      	ldr	r3, [pc, #136]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_GPIO_Init+0x2e0>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800503e:	4a0f      	ldr	r2, [pc, #60]	; (800507c <HAL_GPIO_Init+0x2e0>)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	3301      	adds	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	f47f aea9 	bne.w	8004dac <HAL_GPIO_Init+0x10>
  }
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	40010000 	.word	0x40010000
 8005070:	48000400 	.word	0x48000400
 8005074:	48000800 	.word	0x48000800
 8005078:	48000c00 	.word	0x48000c00
 800507c:	40010400 	.word	0x40010400

08005080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]
 80050bc:	4613      	mov	r3, r2
 80050be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c0:	787b      	ldrb	r3, [r7, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050cc:	e002      	b.n	80050d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e081      	b.n	80051f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fd fbc8 	bl	800289c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	; 0x24
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e006      	b.n	8005168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d104      	bne.n	800517a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	ea42 0103 	orr.w	r1, r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b20      	cmp	r3, #32
 8005212:	d138      	bne.n	8005286 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800521e:	2302      	movs	r3, #2
 8005220:	e032      	b.n	8005288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	; 0x24
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005250:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d139      	bne.n	800531e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e033      	b.n	8005320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005332:	af00      	add	r7, sp, #0
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f000 bef4 	b.w	800612e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 816a 	beq.w	800562a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005356:	4bb3      	ldr	r3, [pc, #716]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d00c      	beq.n	800537c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005362:	4bb0      	ldr	r3, [pc, #704]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b08      	cmp	r3, #8
 800536c:	d159      	bne.n	8005422 <HAL_RCC_OscConfig+0xf6>
 800536e:	4bad      	ldr	r3, [pc, #692]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537a:	d152      	bne.n	8005422 <HAL_RCC_OscConfig+0xf6>
 800537c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005380:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005388:	fa93 f3a3 	rbit	r3, r3
 800538c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005390:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	fab3 f383 	clz	r3, r3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <HAL_RCC_OscConfig+0x82>
 80053a8:	4b9e      	ldr	r3, [pc, #632]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0xae>
 80053ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80053c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80053ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80053d6:	4b93      	ldr	r3, [pc, #588]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80053e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80053e6:	fa92 f2a2 	rbit	r2, r2
 80053ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80053ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80053f2:	fab2 f282 	clz	r2, r2
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	f042 0220 	orr.w	r2, r2, #32
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	f002 021f 	and.w	r2, r2, #31
 8005402:	2101      	movs	r1, #1
 8005404:	fa01 f202 	lsl.w	r2, r1, r2
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 810c 	beq.w	8005628 <HAL_RCC_OscConfig+0x2fc>
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 8106 	bne.w	8005628 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f000 be86 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542c:	d106      	bne.n	800543c <HAL_RCC_OscConfig+0x110>
 800542e:	4b7d      	ldr	r3, [pc, #500]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a7c      	ldr	r2, [pc, #496]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e030      	b.n	800549e <HAL_RCC_OscConfig+0x172>
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x134>
 8005446:	4b77      	ldr	r3, [pc, #476]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a76      	ldr	r2, [pc, #472]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800544c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b74      	ldr	r3, [pc, #464]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a73      	ldr	r2, [pc, #460]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e01e      	b.n	800549e <HAL_RCC_OscConfig+0x172>
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546a:	d10c      	bne.n	8005486 <HAL_RCC_OscConfig+0x15a>
 800546c:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a6c      	ldr	r2, [pc, #432]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4b6a      	ldr	r3, [pc, #424]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a69      	ldr	r2, [pc, #420]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800547e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e00b      	b.n	800549e <HAL_RCC_OscConfig+0x172>
 8005486:	4b67      	ldr	r3, [pc, #412]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a66      	ldr	r2, [pc, #408]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b64      	ldr	r3, [pc, #400]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a63      	ldr	r2, [pc, #396]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800549e:	4b61      	ldr	r3, [pc, #388]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f023 020f 	bic.w	r2, r3, #15
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	495d      	ldr	r1, [pc, #372]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d059      	beq.n	8005570 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fd fcb0 	bl	8002e20 <HAL_GetTick>
 80054c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c4:	e00a      	b.n	80054dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c6:	f7fd fcab 	bl	8002e20 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d902      	bls.n	80054dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	f000 be29 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
 80054dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80054e8:	fa93 f3a3 	rbit	r3, r3
 80054ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80054f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f4:	fab3 f383 	clz	r3, r3
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d102      	bne.n	800550e <HAL_RCC_OscConfig+0x1e2>
 8005508:	4b46      	ldr	r3, [pc, #280]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x20e>
 800550e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005512:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005526:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800552a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005536:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800553e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005542:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005546:	fa92 f2a2 	rbit	r2, r2
 800554a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800554e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005552:	fab2 f282 	clz	r2, r2
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	f042 0220 	orr.w	r2, r2, #32
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	f002 021f 	and.w	r2, r2, #31
 8005562:	2101      	movs	r1, #1
 8005564:	fa01 f202 	lsl.w	r2, r1, r2
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ab      	beq.n	80054c6 <HAL_RCC_OscConfig+0x19a>
 800556e:	e05c      	b.n	800562a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7fd fc56 	bl	8002e20 <HAL_GetTick>
 8005574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005578:	e00a      	b.n	8005590 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800557a:	f7fd fc51 	bl	8002e20 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	; 0x64
 8005588:	d902      	bls.n	8005590 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	f000 bdcf 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
 8005590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005594:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800559c:	fa93 f3a3 	rbit	r3, r3
 80055a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80055a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d102      	bne.n	80055c2 <HAL_RCC_OscConfig+0x296>
 80055bc:	4b19      	ldr	r3, [pc, #100]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	e015      	b.n	80055ee <HAL_RCC_OscConfig+0x2c2>
 80055c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80055ce:	fa93 f3a3 	rbit	r3, r3
 80055d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80055d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80055de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCC_OscConfig+0x2f8>)
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80055f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80055fa:	fa92 f2a2 	rbit	r2, r2
 80055fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005602:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005606:	fab2 f282 	clz	r2, r2
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f042 0220 	orr.w	r2, r2, #32
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	f002 021f 	and.w	r2, r2, #31
 8005616:	2101      	movs	r1, #1
 8005618:	fa01 f202 	lsl.w	r2, r1, r2
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1ab      	bne.n	800557a <HAL_RCC_OscConfig+0x24e>
 8005622:	e002      	b.n	800562a <HAL_RCC_OscConfig+0x2fe>
 8005624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 816f 	beq.w	8005918 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800563a:	4bd0      	ldr	r3, [pc, #832]	; (800597c <HAL_RCC_OscConfig+0x650>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005646:	4bcd      	ldr	r3, [pc, #820]	; (800597c <HAL_RCC_OscConfig+0x650>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b08      	cmp	r3, #8
 8005650:	d16c      	bne.n	800572c <HAL_RCC_OscConfig+0x400>
 8005652:	4bca      	ldr	r3, [pc, #808]	; (800597c <HAL_RCC_OscConfig+0x650>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d166      	bne.n	800572c <HAL_RCC_OscConfig+0x400>
 800565e:	2302      	movs	r3, #2
 8005660:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005668:	fa93 f3a3 	rbit	r3, r3
 800566c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005670:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005674:	fab3 f383 	clz	r3, r3
 8005678:	b2db      	uxtb	r3, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_RCC_OscConfig+0x362>
 8005688:	4bbc      	ldr	r3, [pc, #752]	; (800597c <HAL_RCC_OscConfig+0x650>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	e013      	b.n	80056b6 <HAL_RCC_OscConfig+0x38a>
 800568e:	2302      	movs	r3, #2
 8005690:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005698:	fa93 f3a3 	rbit	r3, r3
 800569c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80056a0:	2302      	movs	r3, #2
 80056a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80056a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80056b2:	4bb2      	ldr	r3, [pc, #712]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2202      	movs	r2, #2
 80056b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80056bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80056c0:	fa92 f2a2 	rbit	r2, r2
 80056c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80056c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80056cc:	fab2 f282 	clz	r2, r2
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	f042 0220 	orr.w	r2, r2, #32
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	f002 021f 	and.w	r2, r2, #31
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f202 	lsl.w	r2, r1, r2
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d002      	beq.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f000 bd1b 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f8:	4ba0      	ldr	r3, [pc, #640]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	21f8      	movs	r1, #248	; 0xf8
 8005708:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005710:	fa91 f1a1 	rbit	r1, r1
 8005714:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005718:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800571c:	fab1 f181 	clz	r1, r1
 8005720:	b2c9      	uxtb	r1, r1
 8005722:	408b      	lsls	r3, r1
 8005724:	4995      	ldr	r1, [pc, #596]	; (800597c <HAL_RCC_OscConfig+0x650>)
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	e0f5      	b.n	8005918 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8085 	beq.w	8005842 <HAL_RCC_OscConfig+0x516>
 8005738:	2301      	movs	r3, #1
 800573a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800574a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	461a      	mov	r2, r3
 8005760:	2301      	movs	r3, #1
 8005762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fd fb5c 	bl	8002e20 <HAL_GetTick>
 8005768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e00a      	b.n	8005784 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576e:	f7fd fb57 	bl	8002e20 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d902      	bls.n	8005784 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	f000 bcd5 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
 8005784:	2302      	movs	r3, #2
 8005786:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005796:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579a:	fab3 f383 	clz	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d102      	bne.n	80057b4 <HAL_RCC_OscConfig+0x488>
 80057ae:	4b73      	ldr	r3, [pc, #460]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	e013      	b.n	80057dc <HAL_RCC_OscConfig+0x4b0>
 80057b4:	2302      	movs	r3, #2
 80057b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057c6:	2302      	movs	r3, #2
 80057c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80057d0:	fa93 f3a3 	rbit	r3, r3
 80057d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80057d8:	4b68      	ldr	r3, [pc, #416]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2202      	movs	r2, #2
 80057de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80057e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80057e6:	fa92 f2a2 	rbit	r2, r2
 80057ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80057ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80057f2:	fab2 f282 	clz	r2, r2
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	f042 0220 	orr.w	r2, r2, #32
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f002 021f 	and.w	r2, r2, #31
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f202 	lsl.w	r2, r1, r2
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0af      	beq.n	800576e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCC_OscConfig+0x650>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	21f8      	movs	r1, #248	; 0xf8
 800581e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005826:	fa91 f1a1 	rbit	r1, r1
 800582a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800582e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005832:	fab1 f181 	clz	r1, r1
 8005836:	b2c9      	uxtb	r1, r1
 8005838:	408b      	lsls	r3, r1
 800583a:	4950      	ldr	r1, [pc, #320]	; (800597c <HAL_RCC_OscConfig+0x650>)
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]
 8005840:	e06a      	b.n	8005918 <HAL_RCC_OscConfig+0x5ec>
 8005842:	2301      	movs	r3, #1
 8005844:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800584c:	fa93 f3a3 	rbit	r3, r3
 8005850:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fd fad7 	bl	8002e20 <HAL_GetTick>
 8005872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005878:	f7fd fad2 	bl	8002e20 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d902      	bls.n	800588e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	f000 bc50 	b.w	800612e <HAL_RCC_OscConfig+0xe02>
 800588e:	2302      	movs	r3, #2
 8005890:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005898:	fa93 f3a3 	rbit	r3, r3
 800589c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a4:	fab3 f383 	clz	r3, r3
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HAL_RCC_OscConfig+0x592>
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	e013      	b.n	80058e6 <HAL_RCC_OscConfig+0x5ba>
 80058be:	2302      	movs	r3, #2
 80058c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058d0:	2302      	movs	r3, #2
 80058d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_RCC_OscConfig+0x650>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2202      	movs	r2, #2
 80058e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80058ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80058f0:	fa92 f2a2 	rbit	r2, r2
 80058f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80058f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80058fc:	fab2 f282 	clz	r2, r2
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	f042 0220 	orr.w	r2, r2, #32
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	f002 021f 	and.w	r2, r2, #31
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f202 	lsl.w	r2, r1, r2
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1af      	bne.n	8005878 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80da 	beq.w	8005adc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d069      	beq.n	8005a06 <HAL_RCC_OscConfig+0x6da>
 8005932:	2301      	movs	r3, #1
 8005934:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800593c:	fa93 f3a3 	rbit	r3, r3
 8005940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_OscConfig+0x654>)
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	461a      	mov	r2, r3
 8005958:	2301      	movs	r3, #1
 800595a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595c:	f7fd fa60 	bl	8002e20 <HAL_GetTick>
 8005960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005964:	e00e      	b.n	8005984 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005966:	f7fd fa5b 	bl	8002e20 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d906      	bls.n	8005984 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e3d9      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	10908120 	.word	0x10908120
 8005984:	2302      	movs	r3, #2
 8005986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005996:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800599a:	2202      	movs	r2, #2
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	fa93 f2a3 	rbit	r2, r3
 80059a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059b2:	2202      	movs	r2, #2
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	fa93 f2a3 	rbit	r2, r3
 80059c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	4ba5      	ldr	r3, [pc, #660]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 80059c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059ce:	2102      	movs	r1, #2
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	fa93 f1a3 	rbit	r1, r3
 80059dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059e0:	6019      	str	r1, [r3, #0]
  return result;
 80059e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0b0      	beq.n	8005966 <HAL_RCC_OscConfig+0x63a>
 8005a04:	e06a      	b.n	8005adc <HAL_RCC_OscConfig+0x7b0>
 8005a06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	fa93 f2a3 	rbit	r2, r3
 8005a18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a1c:	601a      	str	r2, [r3, #0]
  return result;
 8005a1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a24:	fab3 f383 	clz	r3, r3
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b8c      	ldr	r3, [pc, #560]	; (8005c60 <HAL_RCC_OscConfig+0x934>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a38:	f7fd f9f2 	bl	8002e20 <HAL_GetTick>
 8005a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a40:	e009      	b.n	8005a56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a42:	f7fd f9ed 	bl	8002e20 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e36b      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 8005a56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	fa93 f2a3 	rbit	r2, r3
 8005a68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	fa93 f2a3 	rbit	r2, r3
 8005a98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005a9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a9e:	4b6f      	ldr	r3, [pc, #444]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	fa93 f1a3 	rbit	r1, r3
 8005ab4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ab8:	6019      	str	r1, [r3, #0]
  return result;
 8005aba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1b2      	bne.n	8005a42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8158 	beq.w	8005d9c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af2:	4b5a      	ldr	r3, [pc, #360]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d112      	bne.n	8005b24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005afe:	4b57      	ldr	r3, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4a56      	ldr	r2, [pc, #344]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b08:	61d3      	str	r3, [r2, #28]
 8005b0a:	4b54      	ldr	r3, [pc, #336]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f107 0308 	add.w	r3, r7, #8
 8005b1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <HAL_RCC_OscConfig+0x938>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11a      	bne.n	8005b66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b30:	4b4c      	ldr	r3, [pc, #304]	; (8005c64 <HAL_RCC_OscConfig+0x938>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4b      	ldr	r2, [pc, #300]	; (8005c64 <HAL_RCC_OscConfig+0x938>)
 8005b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b3c:	f7fd f970 	bl	8002e20 <HAL_GetTick>
 8005b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b44:	e009      	b.n	8005b5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b46:	f7fd f96b 	bl	8002e20 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e2e9      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <HAL_RCC_OscConfig+0x938>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ef      	beq.n	8005b46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x852>
 8005b70:	4b3a      	ldr	r3, [pc, #232]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	4a39      	ldr	r2, [pc, #228]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6213      	str	r3, [r2, #32]
 8005b7c:	e02f      	b.n	8005bde <HAL_RCC_OscConfig+0x8b2>
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x876>
 8005b88:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	6213      	str	r3, [r2, #32]
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005b9a:	f023 0304 	bic.w	r3, r3, #4
 8005b9e:	6213      	str	r3, [r2, #32]
 8005ba0:	e01d      	b.n	8005bde <HAL_RCC_OscConfig+0x8b2>
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x89a>
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bb2:	f043 0304 	orr.w	r3, r3, #4
 8005bb6:	6213      	str	r3, [r2, #32]
 8005bb8:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4a27      	ldr	r2, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6213      	str	r3, [r2, #32]
 8005bc4:	e00b      	b.n	8005bde <HAL_RCC_OscConfig+0x8b2>
 8005bc6:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	6213      	str	r3, [r2, #32]
 8005bd2:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d06b      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be8:	f7fd f91a 	bl	8002e20 <HAL_GetTick>
 8005bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf0:	e00b      	b.n	8005c0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf2:	f7fd f915 	bl	8002e20 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e291      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 8005c0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c0e:	2202      	movs	r2, #2
 8005c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	fa93 f2a3 	rbit	r2, r3
 8005c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c26:	2202      	movs	r2, #2
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	fa93 f2a3 	rbit	r2, r3
 8005c34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c38:	601a      	str	r2, [r3, #0]
  return result;
 8005c3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	fab3 f383 	clz	r3, r3
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f043 0302 	orr.w	r3, r3, #2
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d109      	bne.n	8005c68 <HAL_RCC_OscConfig+0x93c>
 8005c54:	4b01      	ldr	r3, [pc, #4]	; (8005c5c <HAL_RCC_OscConfig+0x930>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	e014      	b.n	8005c84 <HAL_RCC_OscConfig+0x958>
 8005c5a:	bf00      	nop
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	10908120 	.word	0x10908120
 8005c64:	40007000 	.word	0x40007000
 8005c68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	fa93 f2a3 	rbit	r2, r3
 8005c7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	4bbb      	ldr	r3, [pc, #748]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005c88:	2102      	movs	r1, #2
 8005c8a:	6011      	str	r1, [r2, #0]
 8005c8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	fa92 f1a2 	rbit	r1, r2
 8005c96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005c9a:	6011      	str	r1, [r2, #0]
  return result;
 8005c9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	fab2 f282 	clz	r2, r2
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	f002 021f 	and.w	r2, r2, #31
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d099      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x8c6>
 8005cbe:	e063      	b.n	8005d88 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc0:	f7fd f8ae 	bl	8002e20 <HAL_GetTick>
 8005cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc8:	e00b      	b.n	8005ce2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fd f8a9 	bl	8002e20 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e225      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 8005ce2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	fa93 f2a3 	rbit	r2, r3
 8005cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005cfe:	2202      	movs	r2, #2
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fa93 f2a3 	rbit	r2, r3
 8005d0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d10:	601a      	str	r2, [r3, #0]
  return result;
 8005d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f043 0302 	orr.w	r3, r3, #2
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_OscConfig+0xa06>
 8005d2c:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	e00d      	b.n	8005d4e <HAL_RCC_OscConfig+0xa22>
 8005d32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d36:	2202      	movs	r2, #2
 8005d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	fa93 f2a3 	rbit	r2, r3
 8005d44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d52:	2102      	movs	r1, #2
 8005d54:	6011      	str	r1, [r2, #0]
 8005d56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	fa92 f1a2 	rbit	r1, r2
 8005d60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005d64:	6011      	str	r1, [r2, #0]
  return result;
 8005d66:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	fab2 f282 	clz	r2, r2
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	f002 021f 	and.w	r2, r2, #31
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1a0      	bne.n	8005cca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d90:	4b77      	ldr	r3, [pc, #476]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4a76      	ldr	r2, [pc, #472]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 81c2 	beq.w	800612c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005da8:	4b71      	ldr	r3, [pc, #452]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	f000 819c 	beq.w	80060ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f040 8114 	bne.w	8005fea <HAL_RCC_OscConfig+0xcbe>
 8005dc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	fa93 f2a3 	rbit	r2, r3
 8005dd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005dda:	601a      	str	r2, [r3, #0]
  return result;
 8005ddc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005de0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	461a      	mov	r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fd f812 	bl	8002e20 <HAL_GetTick>
 8005dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e00:	e009      	b.n	8005e16 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e02:	f7fd f80d 	bl	8002e20 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e18b      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 8005e16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	fa93 f2a3 	rbit	r2, r3
 8005e2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e2e:	601a      	str	r2, [r3, #0]
  return result;
 8005e30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_RCC_OscConfig+0xb24>
 8005e4a:	4b49      	ldr	r3, [pc, #292]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	e01b      	b.n	8005e88 <HAL_RCC_OscConfig+0xb5c>
 8005e50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	fa93 f2a3 	rbit	r2, r3
 8005e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	fa93 f2a3 	rbit	r2, r3
 8005e7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	fa92 f1a2 	rbit	r1, r2
 8005e9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005ea0:	6011      	str	r1, [r2, #0]
  return result;
 8005ea2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	fab2 f282 	clz	r2, r2
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	f042 0220 	orr.w	r2, r2, #32
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	f002 021f 	and.w	r2, r2, #31
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f202 	lsl.w	r2, r1, r2
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d19e      	bne.n	8005e02 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ec4:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	4925      	ldr	r1, [pc, #148]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	fa93 f2a3 	rbit	r2, r3
 8005ef4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ef8:	601a      	str	r2, [r3, #0]
  return result;
 8005efa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005efe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f00:	fab3 f383 	clz	r3, r3
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	461a      	mov	r2, r3
 8005f12:	2301      	movs	r3, #1
 8005f14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fc ff83 	bl	8002e20 <HAL_GetTick>
 8005f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f1e:	e009      	b.n	8005f34 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fc ff7e 	bl	8002e20 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0fc      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 8005f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	fa93 f2a3 	rbit	r2, r3
 8005f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f4c:	601a      	str	r2, [r3, #0]
  return result;
 8005f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f54:	fab3 f383 	clz	r3, r3
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0xc48>
 8005f68:	4b01      	ldr	r3, [pc, #4]	; (8005f70 <HAL_RCC_OscConfig+0xc44>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	e01e      	b.n	8005fac <HAL_RCC_OscConfig+0xc80>
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000
 8005f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	fa93 f2a3 	rbit	r2, r3
 8005f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	fa93 f2a3 	rbit	r2, r3
 8005fa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	4b63      	ldr	r3, [pc, #396]	; (8006138 <HAL_RCC_OscConfig+0xe0c>)
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fb4:	6011      	str	r1, [r2, #0]
 8005fb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	fa92 f1a2 	rbit	r1, r2
 8005fc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005fc4:	6011      	str	r1, [r2, #0]
  return result;
 8005fc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	fab2 f282 	clz	r2, r2
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	f042 0220 	orr.w	r2, r2, #32
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	f002 021f 	and.w	r2, r2, #31
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d09b      	beq.n	8005f20 <HAL_RCC_OscConfig+0xbf4>
 8005fe8:	e0a0      	b.n	800612c <HAL_RCC_OscConfig+0xe00>
 8005fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	fa93 f2a3 	rbit	r2, r3
 8005ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006002:	601a      	str	r2, [r3, #0]
  return result;
 8006004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006008:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600a:	fab3 f383 	clz	r3, r3
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	461a      	mov	r2, r3
 800601c:	2300      	movs	r3, #0
 800601e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fc fefe 	bl	8002e20 <HAL_GetTick>
 8006024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006028:	e009      	b.n	800603e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602a:	f7fc fef9 	bl	8002e20 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e077      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
 800603e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	fa93 f2a3 	rbit	r2, r3
 8006052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006056:	601a      	str	r2, [r3, #0]
  return result;
 8006058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800605c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800605e:	fab3 f383 	clz	r3, r3
 8006062:	b2db      	uxtb	r3, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d102      	bne.n	8006078 <HAL_RCC_OscConfig+0xd4c>
 8006072:	4b31      	ldr	r3, [pc, #196]	; (8006138 <HAL_RCC_OscConfig+0xe0c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	e01b      	b.n	80060b0 <HAL_RCC_OscConfig+0xd84>
 8006078:	f107 0320 	add.w	r3, r7, #32
 800607c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f107 0320 	add.w	r3, r7, #32
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	fa93 f2a3 	rbit	r2, r3
 800608c:	f107 031c 	add.w	r3, r7, #28
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f107 0318 	add.w	r3, r7, #24
 8006096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f107 0318 	add.w	r3, r7, #24
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	fa93 f2a3 	rbit	r2, r3
 80060a6:	f107 0314 	add.w	r3, r7, #20
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	4b22      	ldr	r3, [pc, #136]	; (8006138 <HAL_RCC_OscConfig+0xe0c>)
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f107 0210 	add.w	r2, r7, #16
 80060b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	f107 0210 	add.w	r2, r7, #16
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	fa92 f1a2 	rbit	r1, r2
 80060c4:	f107 020c 	add.w	r2, r7, #12
 80060c8:	6011      	str	r1, [r2, #0]
  return result;
 80060ca:	f107 020c 	add.w	r2, r7, #12
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	fab2 f282 	clz	r2, r2
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	f042 0220 	orr.w	r2, r2, #32
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	f002 021f 	and.w	r2, r2, #31
 80060e0:	2101      	movs	r1, #1
 80060e2:	fa01 f202 	lsl.w	r2, r1, r2
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d19e      	bne.n	800602a <HAL_RCC_OscConfig+0xcfe>
 80060ec:	e01e      	b.n	800612c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e018      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <HAL_RCC_OscConfig+0xe0c>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006104:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	429a      	cmp	r2, r3
 8006114:	d108      	bne.n	8006128 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006116:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800611a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000

0800613c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b09e      	sub	sp, #120	; 0x78
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e162      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006154:	4b90      	ldr	r3, [pc, #576]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d910      	bls.n	8006184 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006162:	4b8d      	ldr	r3, [pc, #564]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 0207 	bic.w	r2, r3, #7
 800616a:	498b      	ldr	r1, [pc, #556]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	4313      	orrs	r3, r2
 8006170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006172:	4b89      	ldr	r3, [pc, #548]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d001      	beq.n	8006184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e14a      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006190:	4b82      	ldr	r3, [pc, #520]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	497f      	ldr	r1, [pc, #508]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80dc 	beq.w	8006368 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d13c      	bne.n	8006232 <HAL_RCC_ClockConfig+0xf6>
 80061b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c8:	fab3 f383 	clz	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xa6>
 80061dc:	4b6f      	ldr	r3, [pc, #444]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	e00f      	b.n	8006202 <HAL_RCC_ClockConfig+0xc6>
 80061e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	667b      	str	r3, [r7, #100]	; 0x64
 80061f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	fa93 f3a3 	rbit	r3, r3
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	4b67      	ldr	r3, [pc, #412]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006206:	65ba      	str	r2, [r7, #88]	; 0x58
 8006208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800620a:	fa92 f2a2 	rbit	r2, r2
 800620e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006212:	fab2 f282 	clz	r2, r2
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	f042 0220 	orr.w	r2, r2, #32
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	f002 021f 	and.w	r2, r2, #31
 8006222:	2101      	movs	r1, #1
 8006224:	fa01 f202 	lsl.w	r2, r1, r2
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d17b      	bne.n	8006326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0f3      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d13c      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x178>
 800623a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800623e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d102      	bne.n	8006264 <HAL_RCC_ClockConfig+0x128>
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	e00f      	b.n	8006284 <HAL_RCC_ClockConfig+0x148>
 8006264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006268:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626c:	fa93 f3a3 	rbit	r3, r3
 8006270:	647b      	str	r3, [r7, #68]	; 0x44
 8006272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006276:	643b      	str	r3, [r7, #64]	; 0x40
 8006278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627a:	fa93 f3a3 	rbit	r3, r3
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006280:	4b46      	ldr	r3, [pc, #280]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006288:	63ba      	str	r2, [r7, #56]	; 0x38
 800628a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800628c:	fa92 f2a2 	rbit	r2, r2
 8006290:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006294:	fab2 f282 	clz	r2, r2
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	f042 0220 	orr.w	r2, r2, #32
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	f002 021f 	and.w	r2, r2, #31
 80062a4:	2101      	movs	r1, #1
 80062a6:	fa01 f202 	lsl.w	r2, r1, r2
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d13a      	bne.n	8006326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0b2      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
 80062b4:	2302      	movs	r3, #2
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	fa93 f3a3 	rbit	r3, r3
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d102      	bne.n	80062dc <HAL_RCC_ClockConfig+0x1a0>
 80062d6:	4b31      	ldr	r3, [pc, #196]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	e00d      	b.n	80062f8 <HAL_RCC_ClockConfig+0x1bc>
 80062dc:	2302      	movs	r3, #2
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	fa93 f3a3 	rbit	r3, r3
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
 80062e8:	2302      	movs	r3, #2
 80062ea:	623b      	str	r3, [r7, #32]
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	4b29      	ldr	r3, [pc, #164]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2202      	movs	r2, #2
 80062fa:	61ba      	str	r2, [r7, #24]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	fa92 f2a2 	rbit	r2, r2
 8006302:	617a      	str	r2, [r7, #20]
  return result;
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	fab2 f282 	clz	r2, r2
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	f042 0220 	orr.w	r2, r2, #32
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	f002 021f 	and.w	r2, r2, #31
 8006316:	2101      	movs	r1, #1
 8006318:	fa01 f202 	lsl.w	r2, r1, r2
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e079      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006326:	4b1d      	ldr	r3, [pc, #116]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	491a      	ldr	r1, [pc, #104]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006338:	f7fc fd72 	bl	8002e20 <HAL_GetTick>
 800633c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633e:	e00a      	b.n	8006356 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006340:	f7fc fd6e 	bl	8002e20 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	; 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e061      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <HAL_RCC_ClockConfig+0x260>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 020c 	and.w	r2, r3, #12
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	429a      	cmp	r2, r3
 8006366:	d1eb      	bne.n	8006340 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d214      	bcs.n	80063a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f023 0207 	bic.w	r2, r3, #7
 800637e:	4906      	ldr	r1, [pc, #24]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006386:	4b04      	ldr	r3, [pc, #16]	; (8006398 <HAL_RCC_ClockConfig+0x25c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e040      	b.n	800641a <HAL_RCC_ClockConfig+0x2de>
 8006398:	40022000 	.word	0x40022000
 800639c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ac:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <HAL_RCC_ClockConfig+0x2e8>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	491a      	ldr	r1, [pc, #104]	; (8006424 <HAL_RCC_ClockConfig+0x2e8>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <HAL_RCC_ClockConfig+0x2e8>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4912      	ldr	r1, [pc, #72]	; (8006424 <HAL_RCC_ClockConfig+0x2e8>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063de:	f000 f829 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 80063e2:	4601      	mov	r1, r0
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <HAL_RCC_ClockConfig+0x2e8>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ec:	22f0      	movs	r2, #240	; 0xf0
 80063ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	fa92 f2a2 	rbit	r2, r2
 80063f6:	60fa      	str	r2, [r7, #12]
  return result;
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	fab2 f282 	clz	r2, r2
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	40d3      	lsrs	r3, r2
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <HAL_RCC_ClockConfig+0x2ec>)
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	fa21 f303 	lsr.w	r3, r1, r3
 800640a:	4a08      	ldr	r2, [pc, #32]	; (800642c <HAL_RCC_ClockConfig+0x2f0>)
 800640c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_RCC_ClockConfig+0x2f4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fc fcc0 	bl	8002d98 <HAL_InitTick>
  
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3778      	adds	r7, #120	; 0x78
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000
 8006428:	08007fd0 	.word	0x08007fd0
 800642c:	20000018 	.word	0x20000018
 8006430:	2000001c 	.word	0x2000001c

08006434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006434:	b480      	push	{r7}
 8006436:	b08b      	sub	sp, #44	; 0x2c
 8006438:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800644e:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b04      	cmp	r3, #4
 800645c:	d002      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x30>
 800645e:	2b08      	cmp	r3, #8
 8006460:	d003      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x36>
 8006462:	e03c      	b.n	80064de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006464:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006466:	623b      	str	r3, [r7, #32]
      break;
 8006468:	e03c      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006470:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006474:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	fa92 f2a2 	rbit	r2, r2
 800647c:	607a      	str	r2, [r7, #4]
  return result;
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	fab2 f282 	clz	r2, r2
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	40d3      	lsrs	r3, r2
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800648a:	5cd3      	ldrb	r3, [r2, r3]
 800648c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	220f      	movs	r2, #15
 8006498:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	fa92 f2a2 	rbit	r2, r2
 80064a0:	60fa      	str	r2, [r7, #12]
  return result;
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	fab2 f282 	clz	r2, r2
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	40d3      	lsrs	r3, r2
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <HAL_RCC_GetSysClockFreq+0xcc>)
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064bc:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	e004      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4a0c      	ldr	r2, [pc, #48]	; (8006504 <HAL_RCC_GetSysClockFreq+0xd0>)
 80064d2:	fb02 f303 	mul.w	r3, r2, r3
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	623b      	str	r3, [r7, #32]
      break;
 80064dc:	e002      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064e0:	623b      	str	r3, [r7, #32]
      break;
 80064e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	372c      	adds	r7, #44	; 0x2c
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40021000 	.word	0x40021000
 80064f8:	007a1200 	.word	0x007a1200
 80064fc:	08007fe8 	.word	0x08007fe8
 8006500:	08007ff8 	.word	0x08007ff8
 8006504:	003d0900 	.word	0x003d0900

08006508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <HAL_RCC_GetHCLKFreq+0x14>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000018 	.word	0x20000018

08006520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006526:	f7ff ffef 	bl	8006508 <HAL_RCC_GetHCLKFreq>
 800652a:	4601      	mov	r1, r0
 800652c:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006534:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006538:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	fa92 f2a2 	rbit	r2, r2
 8006540:	603a      	str	r2, [r7, #0]
  return result;
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	fab2 f282 	clz	r2, r2
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	40d3      	lsrs	r3, r2
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <HAL_RCC_GetPCLK1Freq+0x40>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40021000 	.word	0x40021000
 8006560:	08007fe0 	.word	0x08007fe0

08006564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800656a:	f7ff ffcd 	bl	8006508 <HAL_RCC_GetHCLKFreq>
 800656e:	4601      	mov	r1, r0
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006578:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800657c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	fa92 f2a2 	rbit	r2, r2
 8006584:	603a      	str	r2, [r7, #0]
  return result;
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	fab2 f282 	clz	r2, r2
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	40d3      	lsrs	r3, r2
 8006590:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006592:	5cd3      	ldrb	r3, [r2, r3]
 8006594:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40021000 	.word	0x40021000
 80065a4:	08007fe0 	.word	0x08007fe0

080065a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b092      	sub	sp, #72	; 0x48
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80d4 	beq.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065cc:	4b4e      	ldr	r3, [pc, #312]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10e      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d8:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4a4a      	ldr	r2, [pc, #296]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e2:	61d3      	str	r3, [r2, #28]
 80065e4:	4b48      	ldr	r3, [pc, #288]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f6:	4b45      	ldr	r3, [pc, #276]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d118      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006602:	4b42      	ldr	r3, [pc, #264]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a41      	ldr	r2, [pc, #260]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800660e:	f7fc fc07 	bl	8002e20 <HAL_GetTick>
 8006612:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	e008      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006616:	f7fc fc03 	bl	8002e20 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	; 0x64
 8006622:	d901      	bls.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e14b      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	4b38      	ldr	r3, [pc, #224]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8084 	beq.w	800674e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006650:	429a      	cmp	r2, r3
 8006652:	d07c      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	fa93 f3a3 	rbit	r3, r3
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800666e:	fab3 f383 	clz	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	4b26      	ldr	r3, [pc, #152]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	461a      	mov	r2, r3
 800667e:	2301      	movs	r3, #1
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	fa93 f3a3 	rbit	r3, r3
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006692:	fab3 f383 	clz	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	461a      	mov	r2, r3
 80066a2:	2300      	movs	r3, #0
 80066a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066a6:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04b      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b6:	f7fc fbb3 	bl	8002e20 <HAL_GetTick>
 80066ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066bc:	e00a      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fc fbaf 	bl	8002e20 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e0f5      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80066d4:	2302      	movs	r3, #2
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	2302      	movs	r3, #2
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	fa93 f3a3 	rbit	r3, r3
 80066ea:	61fb      	str	r3, [r7, #28]
  return result;
 80066ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ee:	fab3 f383 	clz	r3, r3
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d108      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006702:	4b01      	ldr	r3, [pc, #4]	; (8006708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	e00d      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006708:	40021000 	.word	0x40021000
 800670c:	40007000 	.word	0x40007000
 8006710:	10908100 	.word	0x10908100
 8006714:	2302      	movs	r3, #2
 8006716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	fa93 f3a3 	rbit	r3, r3
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	4b69      	ldr	r3, [pc, #420]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2202      	movs	r2, #2
 8006726:	613a      	str	r2, [r7, #16]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	fa92 f2a2 	rbit	r2, r2
 800672e:	60fa      	str	r2, [r7, #12]
  return result;
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	fab2 f282 	clz	r2, r2
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	f002 021f 	and.w	r2, r2, #31
 8006742:	2101      	movs	r1, #1
 8006744:	fa01 f202 	lsl.w	r2, r1, r2
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0b7      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800674e:	4b5e      	ldr	r3, [pc, #376]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	495b      	ldr	r1, [pc, #364]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800675c:	4313      	orrs	r3, r2
 800675e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006764:	2b01      	cmp	r3, #1
 8006766:	d105      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006768:	4b57      	ldr	r3, [pc, #348]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	4a56      	ldr	r2, [pc, #344]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800676e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006780:	4b51      	ldr	r3, [pc, #324]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	f023 0203 	bic.w	r2, r3, #3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	494e      	ldr	r1, [pc, #312]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800678e:	4313      	orrs	r3, r2
 8006790:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800679e:	4b4a      	ldr	r3, [pc, #296]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f023 0210 	bic.w	r2, r3, #16
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	4947      	ldr	r1, [pc, #284]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80067bc:	4b42      	ldr	r3, [pc, #264]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	493f      	ldr	r1, [pc, #252]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067da:	4b3b      	ldr	r3, [pc, #236]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	f023 0220 	bic.w	r2, r3, #32
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4938      	ldr	r1, [pc, #224]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067f8:	4b33      	ldr	r3, [pc, #204]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	4930      	ldr	r1, [pc, #192]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006806:	4313      	orrs	r3, r2
 8006808:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006816:	4b2c      	ldr	r3, [pc, #176]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4929      	ldr	r1, [pc, #164]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	4921      	ldr	r1, [pc, #132]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006842:	4313      	orrs	r3, r2
 8006844:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d008      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	491a      	ldr	r1, [pc, #104]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006860:	4313      	orrs	r3, r2
 8006862:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	4912      	ldr	r1, [pc, #72]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800687e:	4313      	orrs	r3, r2
 8006880:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800688e:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	490b      	ldr	r1, [pc, #44]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800689c:	4313      	orrs	r3, r2
 800689e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4903      	ldr	r1, [pc, #12]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3748      	adds	r7, #72	; 0x48
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40021000 	.word	0x40021000

080068cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e049      	b.n	8006972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fc f834 	bl	8002960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	4619      	mov	r1, r3
 800690a:	4610      	mov	r0, r2
 800690c:	f000 fb1a 	bl	8006f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d001      	beq.n	8006994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e03b      	b.n	8006a0c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <HAL_TIM_Base_Start_IT+0x9c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIM_Base_Start_IT+0x4e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069be:	d004      	beq.n	80069ca <HAL_TIM_Base_Start_IT+0x4e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <HAL_TIM_Base_Start_IT+0xa0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d115      	bne.n	80069f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <HAL_TIM_Base_Start_IT+0xa4>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b06      	cmp	r3, #6
 80069da:	d015      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x8c>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e2:	d011      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f4:	e008      	b.n	8006a08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0201 	orr.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e000      	b.n	8006a0a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	00010007 	.word	0x00010007

08006a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e049      	b.n	8006aca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fc f822 	bl	8002a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 fa6e 	bl	8006f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <HAL_TIM_PWM_Start+0x24>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	e03c      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d109      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x3e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	bf14      	ite	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	2300      	moveq	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	e02f      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d109      	bne.n	8006b2c <HAL_TIM_PWM_Start+0x58>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e022      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b0c      	cmp	r3, #12
 8006b30:	d109      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x72>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	e015      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d109      	bne.n	8006b60 <HAL_TIM_PWM_Start+0x8c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	bf14      	ite	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	2300      	moveq	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	e008      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e083      	b.n	8006c82 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0xb6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b88:	e023      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_PWM_Start+0xc6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	e01b      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_PWM_Start+0xd6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	e013      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_PWM_Start+0xe6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb8:	e00b      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_PWM_Start+0xf6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc8:	e003      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fdcd 	bl	800777a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a29      	ldr	r2, [pc, #164]	; (8006c8c <HAL_TIM_PWM_Start+0x1b8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x134>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <HAL_TIM_PWM_Start+0x1bc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x134>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_TIM_PWM_Start+0x1c0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x134>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <HAL_TIM_PWM_Start+0x1c4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d101      	bne.n	8006c0c <HAL_TIM_PWM_Start+0x138>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_TIM_PWM_Start+0x13a>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <HAL_TIM_PWM_Start+0x1b8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_TIM_PWM_Start+0x16c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c34:	d004      	beq.n	8006c40 <HAL_TIM_PWM_Start+0x16c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <HAL_TIM_PWM_Start+0x1bc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d115      	bne.n	8006c6c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_TIM_PWM_Start+0x1c8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	d015      	beq.n	8006c7e <HAL_TIM_PWM_Start+0x1aa>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c58:	d011      	beq.n	8006c7e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6a:	e008      	b.n	8006c7e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e000      	b.n	8006c80 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800
 8006c9c:	00010007 	.word	0x00010007

08006ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e0fd      	b.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b14      	cmp	r3, #20
 8006cc6:	f200 80f0 	bhi.w	8006eaa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006eab 	.word	0x08006eab
 8006cd8:	08006eab 	.word	0x08006eab
 8006cdc:	08006eab 	.word	0x08006eab
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006eab 	.word	0x08006eab
 8006ce8:	08006eab 	.word	0x08006eab
 8006cec:	08006eab 	.word	0x08006eab
 8006cf0:	08006da7 	.word	0x08006da7
 8006cf4:	08006eab 	.word	0x08006eab
 8006cf8:	08006eab 	.word	0x08006eab
 8006cfc:	08006eab 	.word	0x08006eab
 8006d00:	08006de7 	.word	0x08006de7
 8006d04:	08006eab 	.word	0x08006eab
 8006d08:	08006eab 	.word	0x08006eab
 8006d0c:	08006eab 	.word	0x08006eab
 8006d10:	08006e29 	.word	0x08006e29
 8006d14:	08006eab 	.word	0x08006eab
 8006d18:	08006eab 	.word	0x08006eab
 8006d1c:	08006eab 	.word	0x08006eab
 8006d20:	08006e69 	.word	0x08006e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f978 	bl	8007020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6999      	ldr	r1, [r3, #24]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	619a      	str	r2, [r3, #24]
      break;
 8006d62:	e0a3      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f9de 	bl	800712c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6999      	ldr	r1, [r3, #24]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	619a      	str	r2, [r3, #24]
      break;
 8006da4:	e082      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fa3d 	bl	800722c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0208 	orr.w	r2, r2, #8
 8006dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0204 	bic.w	r2, r2, #4
 8006dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	61da      	str	r2, [r3, #28]
      break;
 8006de4:	e062      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fa9b 	bl	8007328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69d9      	ldr	r1, [r3, #28]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	021a      	lsls	r2, r3, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	61da      	str	r2, [r3, #28]
      break;
 8006e26:	e041      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fade 	bl	80073f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0208 	orr.w	r2, r2, #8
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0204 	bic.w	r2, r2, #4
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e66:	e021      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fb1c 	bl	80074ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ea8:	e000      	b.n	8006eac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006eaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e031      	b.n	8006f3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb3e 	bl	800756c <TIM_SlaveTimer_SetConfig>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e018      	b.n	8006f3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a2e      	ldr	r2, [pc, #184]	; (8007010 <TIM_Base_SetConfig+0xcc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x20>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a25      	ldr	r2, [pc, #148]	; (8007010 <TIM_Base_SetConfig+0xcc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <TIM_Base_SetConfig+0x5a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d00b      	beq.n	8006f9e <TIM_Base_SetConfig+0x5a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a22      	ldr	r2, [pc, #136]	; (8007014 <TIM_Base_SetConfig+0xd0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <TIM_Base_SetConfig+0x5a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a21      	ldr	r2, [pc, #132]	; (8007018 <TIM_Base_SetConfig+0xd4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_Base_SetConfig+0x5a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a20      	ldr	r2, [pc, #128]	; (800701c <TIM_Base_SetConfig+0xd8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a0e      	ldr	r2, [pc, #56]	; (8007010 <TIM_Base_SetConfig+0xcc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <TIM_Base_SetConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <TIM_Base_SetConfig+0xd0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <TIM_Base_SetConfig+0xb0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <TIM_Base_SetConfig+0xd4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_Base_SetConfig+0xb0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a0b      	ldr	r2, [pc, #44]	; (800701c <TIM_Base_SetConfig+0xd8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d103      	bne.n	8006ffc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	615a      	str	r2, [r3, #20]
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800

08007020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0302 	bic.w	r3, r3, #2
 800706c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a28      	ldr	r2, [pc, #160]	; (800711c <TIM_OC1_SetConfig+0xfc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00b      	beq.n	8007098 <TIM_OC1_SetConfig+0x78>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a27      	ldr	r2, [pc, #156]	; (8007120 <TIM_OC1_SetConfig+0x100>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_OC1_SetConfig+0x78>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a26      	ldr	r2, [pc, #152]	; (8007124 <TIM_OC1_SetConfig+0x104>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC1_SetConfig+0x78>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a25      	ldr	r2, [pc, #148]	; (8007128 <TIM_OC1_SetConfig+0x108>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d10c      	bne.n	80070b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0308 	bic.w	r3, r3, #8
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a19      	ldr	r2, [pc, #100]	; (800711c <TIM_OC1_SetConfig+0xfc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_OC1_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a18      	ldr	r2, [pc, #96]	; (8007120 <TIM_OC1_SetConfig+0x100>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_OC1_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a17      	ldr	r2, [pc, #92]	; (8007124 <TIM_OC1_SetConfig+0x104>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC1_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <TIM_OC1_SetConfig+0x108>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d111      	bne.n	80070f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0210 	bic.w	r2, r3, #16
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800715a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0320 	bic.w	r3, r3, #32
 800717a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a24      	ldr	r2, [pc, #144]	; (800721c <TIM_OC2_SetConfig+0xf0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d10d      	bne.n	80071ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1b      	ldr	r2, [pc, #108]	; (800721c <TIM_OC2_SetConfig+0xf0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_OC2_SetConfig+0xa0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <TIM_OC2_SetConfig+0xf4>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_OC2_SetConfig+0xa0>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a19      	ldr	r2, [pc, #100]	; (8007224 <TIM_OC2_SetConfig+0xf8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC2_SetConfig+0xa0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a18      	ldr	r2, [pc, #96]	; (8007228 <TIM_OC2_SetConfig+0xfc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d113      	bne.n	80071f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40012c00 	.word	0x40012c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40014400 	.word	0x40014400
 8007228:	40014800 	.word	0x40014800

0800722c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a23      	ldr	r2, [pc, #140]	; (8007318 <TIM_OC3_SetConfig+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10d      	bne.n	80072aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <TIM_OC3_SetConfig+0xec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00b      	beq.n	80072ca <TIM_OC3_SetConfig+0x9e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <TIM_OC3_SetConfig+0xf0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d007      	beq.n	80072ca <TIM_OC3_SetConfig+0x9e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a18      	ldr	r2, [pc, #96]	; (8007320 <TIM_OC3_SetConfig+0xf4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_OC3_SetConfig+0x9e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a17      	ldr	r2, [pc, #92]	; (8007324 <TIM_OC3_SetConfig+0xf8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d113      	bne.n	80072f2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	621a      	str	r2, [r3, #32]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	40012c00 	.word	0x40012c00
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800

08007328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <TIM_OC4_SetConfig+0xb8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00b      	beq.n	80073a4 <TIM_OC4_SetConfig+0x7c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <TIM_OC4_SetConfig+0xbc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_OC4_SetConfig+0x7c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <TIM_OC4_SetConfig+0xc0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC4_SetConfig+0x7c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a13      	ldr	r2, [pc, #76]	; (80073ec <TIM_OC4_SetConfig+0xc4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d109      	bne.n	80073b8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	019b      	lsls	r3, r3, #6
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40012c00 	.word	0x40012c00
 80073e4:	40014000 	.word	0x40014000
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800

080073f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a15      	ldr	r2, [pc, #84]	; (800749c <TIM_OC5_SetConfig+0xac>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00b      	beq.n	8007462 <TIM_OC5_SetConfig+0x72>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <TIM_OC5_SetConfig+0xb0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d007      	beq.n	8007462 <TIM_OC5_SetConfig+0x72>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a13      	ldr	r2, [pc, #76]	; (80074a4 <TIM_OC5_SetConfig+0xb4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d003      	beq.n	8007462 <TIM_OC5_SetConfig+0x72>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a12      	ldr	r2, [pc, #72]	; (80074a8 <TIM_OC5_SetConfig+0xb8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d109      	bne.n	8007476 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800

080074ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	051b      	lsls	r3, r3, #20
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a16      	ldr	r2, [pc, #88]	; (800755c <TIM_OC6_SetConfig+0xb0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00b      	beq.n	8007520 <TIM_OC6_SetConfig+0x74>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a15      	ldr	r2, [pc, #84]	; (8007560 <TIM_OC6_SetConfig+0xb4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <TIM_OC6_SetConfig+0x74>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a14      	ldr	r2, [pc, #80]	; (8007564 <TIM_OC6_SetConfig+0xb8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC6_SetConfig+0x74>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a13      	ldr	r2, [pc, #76]	; (8007568 <TIM_OC6_SetConfig+0xbc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d109      	bne.n	8007534 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	029b      	lsls	r3, r3, #10
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40014000 	.word	0x40014000
 8007564:	40014400 	.word	0x40014400
 8007568:	40014800 	.word	0x40014800

0800756c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b30      	cmp	r3, #48	; 0x30
 80075b4:	d05c      	beq.n	8007670 <TIM_SlaveTimer_SetConfig+0x104>
 80075b6:	2b30      	cmp	r3, #48	; 0x30
 80075b8:	d806      	bhi.n	80075c8 <TIM_SlaveTimer_SetConfig+0x5c>
 80075ba:	2b10      	cmp	r3, #16
 80075bc:	d058      	beq.n	8007670 <TIM_SlaveTimer_SetConfig+0x104>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d056      	beq.n	8007670 <TIM_SlaveTimer_SetConfig+0x104>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d054      	beq.n	8007670 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80075c6:	e054      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d03d      	beq.n	8007648 <TIM_SlaveTimer_SetConfig+0xdc>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d802      	bhi.n	80075d6 <TIM_SlaveTimer_SetConfig+0x6a>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d010      	beq.n	80075f6 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80075d4:	e04d      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80075d6:	2b60      	cmp	r3, #96	; 0x60
 80075d8:	d040      	beq.n	800765c <TIM_SlaveTimer_SetConfig+0xf0>
 80075da:	2b70      	cmp	r3, #112	; 0x70
 80075dc:	d000      	beq.n	80075e0 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80075de:	e048      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68d9      	ldr	r1, [r3, #12]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f000 f8a3 	bl	800773a <TIM_ETR_SetConfig>
      break;
 80075f4:	e03d      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d101      	bne.n	8007602 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e038      	b.n	8007674 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007628:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	621a      	str	r2, [r3, #32]
      break;
 8007646:	e014      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6899      	ldr	r1, [r3, #8]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	461a      	mov	r2, r3
 8007656:	f000 f811 	bl	800767c <TIM_TI1_ConfigInputStage>
      break;
 800765a:	e00a      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6899      	ldr	r1, [r3, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	461a      	mov	r2, r3
 800766a:	f000 f836 	bl	80076da <TIM_TI2_ConfigInputStage>
      break;
 800766e:	e000      	b.n	8007672 <TIM_SlaveTimer_SetConfig+0x106>
        break;
 8007670:	bf00      	nop
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 030a 	bic.w	r3, r3, #10
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076da:	b480      	push	{r7}
 80076dc:	b087      	sub	sp, #28
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f023 0210 	bic.w	r2, r3, #16
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	031b      	lsls	r3, r3, #12
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007716:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800773a:	b480      	push	{r7}
 800773c:	b087      	sub	sp, #28
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007754:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	021a      	lsls	r2, r3, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	431a      	orrs	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	609a      	str	r2, [r3, #8]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800777a:	b480      	push	{r7}
 800777c:	b087      	sub	sp, #28
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2201      	movs	r2, #1
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a1a      	ldr	r2, [r3, #32]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	43db      	mvns	r3, r3
 800779c:	401a      	ands	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	621a      	str	r2, [r3, #32]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d8:	2302      	movs	r3, #2
 80077da:	e04f      	b.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a21      	ldr	r2, [pc, #132]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d108      	bne.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800780c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a14      	ldr	r2, [pc, #80]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d009      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007844:	d004      	beq.n	8007850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a10      	ldr	r2, [pc, #64]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10c      	bne.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40014000 	.word	0x40014000

08007890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e060      	b.n	800796e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a14      	ldr	r2, [pc, #80]	; (800797c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d115      	bne.n	800795c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	051b      	lsls	r3, r3, #20
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40012c00 	.word	0x40012c00

08007980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e040      	b.n	8007a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fb f910 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2224      	movs	r2, #36	; 0x24
 80079ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0201 	bic.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f82c 	bl	8007a1c <UART_SetConfig>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e022      	b.n	8007a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f958 	bl	8007c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9df 	bl	8007dd0 <UART_CheckIdleState>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b8b      	ldr	r3, [pc, #556]	; (8007c74 <UART_SetConfig+0x258>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	6979      	ldr	r1, [r7, #20]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a79      	ldr	r2, [pc, #484]	; (8007c78 <UART_SetConfig+0x25c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d121      	bne.n	8007adc <UART_SetConfig+0xc0>
 8007a98:	4b78      	ldr	r3, [pc, #480]	; (8007c7c <UART_SetConfig+0x260>)
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d817      	bhi.n	8007ad4 <UART_SetConfig+0xb8>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UART_SetConfig+0x90>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007acf 	.word	0x08007acf
 8007ab8:	08007ac3 	.word	0x08007ac3
 8007abc:	2300      	movs	r3, #0
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e01e      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e01b      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	e018      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007ace:	2308      	movs	r3, #8
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	e015      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	bf00      	nop
 8007ada:	e011      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a67      	ldr	r2, [pc, #412]	; (8007c80 <UART_SetConfig+0x264>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d102      	bne.n	8007aec <UART_SetConfig+0xd0>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	77fb      	strb	r3, [r7, #31]
 8007aea:	e009      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a64      	ldr	r2, [pc, #400]	; (8007c84 <UART_SetConfig+0x268>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d102      	bne.n	8007afc <UART_SetConfig+0xe0>
 8007af6:	2300      	movs	r3, #0
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e001      	b.n	8007b00 <UART_SetConfig+0xe4>
 8007afc:	2310      	movs	r3, #16
 8007afe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b08:	d15c      	bne.n	8007bc4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d828      	bhi.n	8007b62 <UART_SetConfig+0x146>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <UART_SetConfig+0xfc>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b45 	.word	0x08007b45
 8007b20:	08007b4d 	.word	0x08007b4d
 8007b24:	08007b63 	.word	0x08007b63
 8007b28:	08007b53 	.word	0x08007b53
 8007b2c:	08007b63 	.word	0x08007b63
 8007b30:	08007b63 	.word	0x08007b63
 8007b34:	08007b63 	.word	0x08007b63
 8007b38:	08007b5b 	.word	0x08007b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3c:	f7fe fcf0 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8007b40:	61b8      	str	r0, [r7, #24]
        break;
 8007b42:	e013      	b.n	8007b6c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b44:	f7fe fd0e 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8007b48:	61b8      	str	r0, [r7, #24]
        break;
 8007b4a:	e00f      	b.n	8007b6c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b4c:	4b4e      	ldr	r3, [pc, #312]	; (8007c88 <UART_SetConfig+0x26c>)
 8007b4e:	61bb      	str	r3, [r7, #24]
        break;
 8007b50:	e00c      	b.n	8007b6c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b52:	f7fe fc6f 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 8007b56:	61b8      	str	r0, [r7, #24]
        break;
 8007b58:	e008      	b.n	8007b6c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5e:	61bb      	str	r3, [r7, #24]
        break;
 8007b60:	e004      	b.n	8007b6c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	77bb      	strb	r3, [r7, #30]
        break;
 8007b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d074      	beq.n	8007c5c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	005a      	lsls	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	441a      	add	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b0f      	cmp	r3, #15
 8007b8e:	d916      	bls.n	8007bbe <UART_SetConfig+0x1a2>
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b96:	d212      	bcs.n	8007bbe <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f023 030f 	bic.w	r3, r3, #15
 8007ba0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	89fb      	ldrh	r3, [r7, #14]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	89fa      	ldrh	r2, [r7, #14]
 8007bba:	60da      	str	r2, [r3, #12]
 8007bbc:	e04e      	b.n	8007c5c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	77bb      	strb	r3, [r7, #30]
 8007bc2:	e04b      	b.n	8007c5c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bc4:	7ffb      	ldrb	r3, [r7, #31]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d827      	bhi.n	8007c1a <UART_SetConfig+0x1fe>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x1b4>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007bf5 	.word	0x08007bf5
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	08007c1b 	.word	0x08007c1b
 8007be0:	08007c0b 	.word	0x08007c0b
 8007be4:	08007c1b 	.word	0x08007c1b
 8007be8:	08007c1b 	.word	0x08007c1b
 8007bec:	08007c1b 	.word	0x08007c1b
 8007bf0:	08007c13 	.word	0x08007c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf4:	f7fe fc94 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8007bf8:	61b8      	str	r0, [r7, #24]
        break;
 8007bfa:	e013      	b.n	8007c24 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bfc:	f7fe fcb2 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8007c00:	61b8      	str	r0, [r7, #24]
        break;
 8007c02:	e00f      	b.n	8007c24 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <UART_SetConfig+0x26c>)
 8007c06:	61bb      	str	r3, [r7, #24]
        break;
 8007c08:	e00c      	b.n	8007c24 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0a:	f7fe fc13 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 8007c0e:	61b8      	str	r0, [r7, #24]
        break;
 8007c10:	e008      	b.n	8007c24 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c16:	61bb      	str	r3, [r7, #24]
        break;
 8007c18:	e004      	b.n	8007c24 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	77bb      	strb	r3, [r7, #30]
        break;
 8007c22:	bf00      	nop
    }

    if (pclk != 0U)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d018      	beq.n	8007c5c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	085a      	lsrs	r2, r3, #1
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	441a      	add	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b0f      	cmp	r3, #15
 8007c44:	d908      	bls.n	8007c58 <UART_SetConfig+0x23c>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d204      	bcs.n	8007c58 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e001      	b.n	8007c5c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	efff69f3 	.word	0xefff69f3
 8007c78:	40013800 	.word	0x40013800
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40004400 	.word	0x40004400
 8007c84:	40004800 	.word	0x40004800
 8007c88:	007a1200 	.word	0x007a1200

08007c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01a      	beq.n	8007da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8a:	d10a      	bne.n	8007da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007de0:	f7fb f81e 	bl	8002e20 <HAL_GetTick>
 8007de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d10e      	bne.n	8007e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f82d 	bl	8007e62 <UART_WaitOnFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e023      	b.n	8007e5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d10e      	bne.n	8007e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f817 	bl	8007e62 <UART_WaitOnFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e00d      	b.n	8007e5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e72:	e05e      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d05a      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7c:	f7fa ffd0 	bl	8002e20 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d11b      	bne.n	8007eca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ea0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0201 	bic.w	r2, r2, #1
 8007eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e043      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d02c      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee6:	d124      	bne.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e00f      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d091      	beq.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4e0d      	ldr	r6, [pc, #52]	; (8007f94 <__libc_init_array+0x38>)
 8007f60:	4c0d      	ldr	r4, [pc, #52]	; (8007f98 <__libc_init_array+0x3c>)
 8007f62:	1ba4      	subs	r4, r4, r6
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	2500      	movs	r5, #0
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	4e0b      	ldr	r6, [pc, #44]	; (8007f9c <__libc_init_array+0x40>)
 8007f6e:	4c0c      	ldr	r4, [pc, #48]	; (8007fa0 <__libc_init_array+0x44>)
 8007f70:	f000 f820 	bl	8007fb4 <_init>
 8007f74:	1ba4      	subs	r4, r4, r6
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	2500      	movs	r5, #0
 8007f7a:	42a5      	cmp	r5, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f84:	4798      	blx	r3
 8007f86:	3501      	adds	r5, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f8e:	4798      	blx	r3
 8007f90:	3501      	adds	r5, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	08008008 	.word	0x08008008
 8007f98:	08008008 	.word	0x08008008
 8007f9c:	08008008 	.word	0x08008008
 8007fa0:	0800800c 	.word	0x0800800c

08007fa4 <memset>:
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d100      	bne.n	8007fae <memset+0xa>
 8007fac:	4770      	bx	lr
 8007fae:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb2:	e7f9      	b.n	8007fa8 <memset+0x4>

08007fb4 <_init>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr

08007fc0 <_fini>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr
